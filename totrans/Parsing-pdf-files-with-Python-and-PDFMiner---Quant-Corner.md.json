["```\n#############################################################\n# Edouard TALLENT @ TaGoMa.Tech, March, 2014                #\n# Parse a series of online PDF documents to  build          #\n# historical time series                                    #\n# QuantCorner @ https://quantcorner.wordpress.com            #\n#############################################################\n\n# Some sources\n# http://www.unixuser.org/~euske/python/pdfminer/programming.html\n# http://denis.papathanasiou.org/2010/08/04/extracting-text-images-from-pdf-files/\n# http://stackoverflow.com/questions/25665/python-module-for-converting-pdf-to-text\n\n# Required headers\nfrom pdfminer.pdfparser import PDFParser\nfrom pdfminer.pdfdocument import PDFDocument\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.pdfdevice import PDFDevice\nfrom pdfminer.layout import LAParams\nfrom pdfminer.converter import  TextConverter # , XMLConverter, HTMLConverter\nimport urllib2\nfrom urllib2 import Request\nimport datetime\nimport re\n\n# Define a PDF parser function\ndef parsePDF(url):\n\n    # Open the url provided as an argument to the function and read the content\n    open = urllib2.urlopen(Request(url)).read()\n\n    # Cast to StringIO object\n    from StringIO import StringIO\n    memory_file = StringIO(open)\n\n    # Create a PDF parser object associated with the StringIO object\n    parser = PDFParser(memory_file)\n\n    # Create a PDF document object that stores the document structure\n    document = PDFDocument(parser)\n\n    # Define parameters to the PDF device objet \n    rsrcmgr = PDFResourceManager()\n    retstr = StringIO()\n    laparams = LAParams()\n    codec = 'utf-8'\n\n    # Create a PDF device object\n    device = TextConverter(rsrcmgr, retstr, codec = codec, laparams = laparams)\n\n    # Create a PDF interpreter object\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n\n    # Process each page contained in the document\n    for page in PDFPage.create_pages(document):\n        interpreter.process_page(page)\n        data =  retstr.getvalue()\n\n    # Get values for Iowa B100 prices \n    reg = '(?<=\\n---\\n\\n)\\d.\\d{2}-\\d.\\d{2}'\n    matches = re.findall(reg, data)                 # Our data are contained in matches[0]\n\n    # Compute the average\n    # Extract value from previous regex \n    low = re.search('\\d.\\d{2}(?=-)', matches[0])\n    high = re.search('(?<=-)\\d.\\d{2}', matches[0])\n\n    # Cast string variables to float type\n    low_val = float(low.group(0))\n    high_val = float (high.group(0))\n\n    # Calculate the average\n    #import numpy\n    #value = [high_val, low_val]\n    #print value.mean\n    ave = (high_val + low_val) /2\n\n    # Search the date of the report \n    reg = '\\w{3},\\s\\w{3}\\s\\d{2},\\s\\d{4}'\n    match = re.search(reg, data)        # Result is contained in matches[0]\n    dat = match.group(0)\n\n    # Cast to date format\n    #import datetime\n    #form = datetime.datetime.strptime(match.group(0), '%a, %b %d, %Y')\n    #print form\n\n    # http://stackoverflow.com/questions/9752958/how-can-i-return-two-values-from-a-function-in-python\n    return (dat, ave)\n\n# The date of the latest weekly price bulletin\nstart_date = raw_input(\"Enter the date of the latest weekly price bulletin (dd/mm/yyyy): \")\n\n# Convert start_date string to Python date format\ndat = datetime.datetime.strptime(start_date,  '%d/%m/%Y')\n\n# Time series length\nback_weeks = raw_input(\"How many weeks back in time: \")\n\n# A bit of order onto the screen\nprint '\\n'\nprint 'Date as read in PDF' + '\\t' + 'Formatted date' + '\\t' + 'Value'\n\n# Loop through the dates\nfor weeks in xrange(0, int(back_weeks)):\n\n    # Basic exception handling mechamism\n    try:           \n        wk = datetime.timedelta(weeks = weeks)\n        date_back = dat - wk\n\n        # Construct the url\n        url = 'http://search.ams.usda.gov/mndms/' + str(date_back.year) + \\\n              '/' + str(date_back.month).zfill(2) + '/LS' + str(date_back.year) + \\\n              str(date_back.month).zfill(2) + str(date_back.day).zfill(2) + \\\n              'WAGENERGY.PDF'\n\n        # Call to function\n        fun =  parsePDF(url)\n\n        # Information we are after\n        res = str(fun[0]) + '\\t' +  str(date_back.day).zfill(2) + '/' + \\\n              str(date_back.month).zfill(2) +  '/' + str(date_back.year) + \\\n              '\\t' + str(fun[1])\n\n    except Exception:\n        print 'NA\\t\\t\\t' +  str(date_back.day).zfill(2) + '/' + \\\n              str(date_back.month).zfill(2) +  '/' + str(date_back.year) + \\\n              '\\t' + 'NA'\n\n    # Output onto the screen\n    print res\n\n'''\nResult example:\n\n>>> \n\nDate as read in PDF Formatted date  Value\nFri, Mar 07, 2014   07/03/2014  3.67\nFri, Feb 28, 2014   28/02/2014  3.57\nFri, Feb 21, 2014   21/02/2014  3.475\nFri, Feb 14, 2014   14/02/2014  3.225\nFri, Feb 07, 2014   07/02/2014  3.175\nFri, Jan 31, 2014   31/01/2014  3.15\nFri, Jan 24, 2014   24/01/2014  3.295\nFri, Jan 17, 2014   17/01/2014  3.24\nFri, Jan 10, 2014   10/01/2014  3.2\nFri, Jan 03, 2014   03/01/2014  3.825\nFri, Dec 27, 2013   27/12/2013  3.845\nFri, Dec 20, 2013   20/12/2013  3.855\nFri, Dec 13, 2013   13/12/2013  3.885\nFri, Dec 06, 2013   06/12/2013  4.025\nFri, Nov 29, 2013   29/11/2013  4.05\nFri, Nov 22, 2013   22/11/2013  4.025\nFri, Nov 15, 2013   15/11/2013  4.075\nFri, Nov 08, 2013   08/11/2013  4.325\nFri, Nov 01, 2013   01/11/2013  4.365\nFri, Oct 25, 2013   25/10/2013  4.54\n\n'''\n```"]