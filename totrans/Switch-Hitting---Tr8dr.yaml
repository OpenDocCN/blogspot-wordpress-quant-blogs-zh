- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-18 15:39:52'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 15:39:52
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Switch Hitting | Tr8dr
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换打击 | Tr8dr
- en: 来源：[https://tr8dr.wordpress.com/2009/07/31/switch-hitting/#0001-01-01](https://tr8dr.wordpress.com/2009/07/31/switch-hitting/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tr8dr.wordpress.com/2009/07/31/switch-hitting/#0001-01-01](https://tr8dr.wordpress.com/2009/07/31/switch-hitting/#0001-01-01)
- en: 'I’ve used many languages across the years, both functional and imperative.
    Since I live in the real-world (ie non-academic), I’ve generally had to use languages
    with a large user base, strong momentum, etc. In general my must-have criteria
    has been:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些年中，我使用了许多语言，包括函数式和命令式语言。由于我生活在现实世界中（即非学术环境），我通常不得不使用具有庞大用户基础、强大势头等语言。总的来说，我必须具备的标准是：
- en: performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: access to wide range of libraries, both infrastructural and numerical
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问广泛的基础设施和数值库
- en: scalable to large, complex, applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展到大型、复杂、应用程序
- en: runs on one of the major VMs (JVM or CLR)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个主要的虚拟机（JVM或CLR）上运行
- en: 'I would have liked to have had the following as well:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我还希望拥有以下内容：
- en: elegance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优雅
- en: functional programming constructs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程构造
- en: '**Changing Climate**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**变化的气候**'
- en: Things have changed over the last few years though. We now have strong functional
    languages with high performance, access to diverse libraries, and a wider user
    base. There is now even talk in the wider (non-functional programming) community
    about functional languages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，过去几年情况发生了变化。现在我们有了一些功能强大的函数式编程语言，它们具有高性能，能够访问多种多样的库，并且拥有更广泛的用户基础。现在即使是更广泛的（非函数式编程）社区也在讨论函数式编程语言。
- en: On the imperative side have used (by frequency Java, C#, Python, C/C++, Fortran,
    etc). I have probably invested the most in Java at this point, as have found the
    complexity of C++ over the years distasteful and time consuming.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令式方面，我使用过的语言（按频率排序）有Java、C#、Python、C/C++、Fortran等。到目前为止，我可能在Java上的投入最多，因为多年来我发现C++的复杂性令人不快且耗时。
- en: I write parallel-targetted numerical models and write trading strategies around
    them. The problem is that none of the above imperative languages map well to the
    way I think about problems and require a lot of unnecessary scaffolding.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写针对并行目标的数值模型，并围绕它们编写交易策略。问题是，上述任何一种命令式语言都无法很好地映射到我思考问题的方法，并要求大量不必要的架构。
- en: '**Functional Languages on the VM**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**在虚拟机上的函数式语言**'
- en: There have been some stealth functional language projects (ie not all that well
    known outside of the functional community), such as [Clojure](http://clojure.org/)
    for the JVM. Clojure, however, does not have the performance level I am looking
    for and is not much elevated above lisp. I love scheme / Lisp, but feel that it
    doesn’t scales well for large projects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些秘密的函数式语言项目（即在函数式社区之外并不是很出名），例如为JVM的[Clojure](http://clojure.org/)。然而，Clojure的性能水平并非我所寻求的，并且它与lisp没有太大区别。我爱scheme/Lisp，但我认为它在大项目上的扩展性不好。
- en: Relatively new on the scene is [Scala](http://www.scala-lang.org/). Scala aims
    to be a statically typed language with OO and functional features, bridging between
    the two paradigms. It has many nice features, but is more verbose then other functional
    languages. It is certainly much more concise than Java, which is a big plus, but
    does have some bizarre syntax and inconsistencies I’m not thrilled with. There
    are also some performance issues related to for-comprehensions that mean I cannot
    use it right now. Nevertheless, for the JVM, I think it is the only language I
    could consider for functional programming.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相对较新的是[Scala](http://www.scala-lang.org/)。Scala旨在成为一种静态类型的语言，具有面向对象和函数式特性，桥接两种范式。它有许多很好的特性，但比其他函数式语言更冗长。它确实比Java简洁得多，这是一个很大的优点，但它有一些奇怪的语法和不一致之处，这让我不太高兴。还有一些与for-comprehensions相关的性能问题，这意味着我现在无法使用它。尽管如此，对于JVM，我认为它是我可以考虑的唯一一种函数式编程语言。
- en: 'Enter [F#](http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/).
    Ok, Microsoft scares me. That said, as with C# and the CLR, they have been leading
    the pack in innovation. They picked up on the Java mantle, fixed its flaws, and
    have since evolved into Java into something much better: C#.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 进入[F#](http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/)。好吧，微软让我感到害怕。话说回来，正如C#和CLR一样，他们在创新方面一直走在前列。他们接过了Java的接力棒，修复了它的缺陷，并将其演变成了一种更好的语言：C#。
- en: F# is a new language (well a few years old) for the .NET CLR based on OCAML,
    not too distant from Haskell or ML. The language is concise, integrates well with
    the CLR and libraries, and performs very well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: F#是一种新语言（好吧，几岁了），是基于OCAML的.NET CLR语言，与Haskell或ML并不遥远。该语言简洁，与CLR和库集成良好，性能出色。
- en: 'Frankly, I think F# is the superior to any of the other languages available
    on the JVM or CLR. My concern now is: is it worthwhile switching from the JVM
    to the CLR. I have a large set of libraries written in Java. I am also concerned
    about the degree of portability and that the Web 2.0 APIs (which Google is largely
    defining) tend to be Java / JVM based.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说，我认为F#是优于JVM或CLR上可用的其他任何语言的。我现在担心的问题是：从JVM转换到CLR是否值得。我有一套用Java编写的庞大库。我也担心可移植性，并且Web
    2.0 API（谷歌在很大程度上定义了它们）往往是基于Java/JVM的。
- en: '**Practical Details**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**实用细节**'
- en: Am I going to have to live in a hybrid world where I write, say, some GWT apps
    in java and do my core work in the .NET CLR? Is there any hope of anything like
    F# on the horizon for the JVM? Should I abandon eclipse and my other tools and
    look at Mono tools or worse be required to use Visual Studio?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我是否要生活在一个混合世界中，比如我可能用Java编写一些GWT应用，而我的核心工作在.NET CLR中进行？JVM上有望出现类似F#的东西吗？我是否应该放弃Eclipse和其他工具，转而使用Mono工具，或者更糟糕的是，被要求使用Visual
    Studio？
- en: Give me a F# equivalent on the JVM. Please!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请给我一个在JVM上的F#等效物。求你了！
