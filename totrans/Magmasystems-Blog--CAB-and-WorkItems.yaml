- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:14:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Magmasystems Blog: CAB and WorkItems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://magmasystems.blogspot.com/2006/11/cab-and-workitems.html#0001-01-01](http://magmasystems.blogspot.com/2006/11/cab-and-workitems.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**WorkItems**'
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: '**WorkItem**'
  prefs: []
  type: TYPE_NORMAL
- en: is considered to represent a “use case” in CAB terminology. Ignore this. It
    is really just a container of other kinds of objects along with some state information.
  prefs: []
  type: TYPE_NORMAL
- en: A CAB application has a tree of WorkItems. The main CabApplication class contains
    a reference to the root WorkItem, which is referred to by the
  prefs: []
  type: TYPE_NORMAL
- en: '**RootWorkItem**'
  prefs: []
  type: TYPE_NORMAL
- en: property. Given a WorkItem, you can go up one level to its ParentWorkItem, or
    down to the next level by accessing the workItem.
  prefs: []
  type: TYPE_NORMAL
- en: '**WorkItems**'
  prefs: []
  type: TYPE_NORMAL
- en: collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that the main application class is defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**class CABQuoteViewerApplication : FormShellApplication**'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument in the generic’s argument list is the type of WorkItem that
    will be the RootWorkItem of our entire application. All other WorkItems will be
    descendants of this RootWorkItem. A WorkItem has access to any of its descendant’s
    properties; however, sibling WorkItems cannot access eachother’s properties directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'A WorkItem also contains various other collections. It has collections of:'
  prefs: []
  type: TYPE_NORMAL
- en: Workspaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SmartParts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EventTopics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Items (you can stick any object in this collection, including state, views,
    etc)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A WorkItem can contain a
  prefs: []
  type: TYPE_NORMAL
- en: '**State**'
  prefs: []
  type: TYPE_NORMAL
- en: . This is a named collection of name/value pairs. Events are fired when a value
    in the State changes. When a WorkItem is saved, its State is saved along with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: You can Activate/Deactivate a WorkItem, Terminate it, and persist it (Save and
    Load).
  prefs: []
  type: TYPE_NORMAL
- en: There is a virtual function called
  prefs: []
  type: TYPE_NORMAL
- en: '***OnRunStarted***'
  prefs: []
  type: TYPE_NORMAL
- en: () that you can override in order to create views, read data, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**WorkItemExtensions**'
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: '**WorkItemExtension**'
  prefs: []
  type: TYPE_NORMAL
- en: 'is a way of extending the behavior of a WorkItem without having to change the
    WorkItem’s code nor resorting to subclassing the WorkItem. It is a class that
    just receives certain events that happen to the associated WorkItem. These events
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialized
  prefs: []
  type: TYPE_NORMAL
- en: RunStarted
  prefs: []
  type: TYPE_NORMAL
- en: Activated
  prefs: []
  type: TYPE_NORMAL
- en: Deactivated
  prefs: []
  type: TYPE_NORMAL
- en: Terminated
  prefs: []
  type: TYPE_NORMAL
- en: To extend a WorkItem, you need to create a new subclass of WorkItemExtension.
    Then you need to create an object of that class; this object is associated with
    an underlying WorkItem. Then you just handle certain events that happen to the
    WorkItem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And, to use this new WorkItemExtension, you would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This concept is very much akin to the “advice” that AOP containers like Spring.Net
    provide for you, except that you do not have any runtime code injection.
  prefs: []
  type: TYPE_NORMAL
- en: ©2006 Marc Adler - All Rights Reserved
  prefs: []
  type: TYPE_NORMAL
