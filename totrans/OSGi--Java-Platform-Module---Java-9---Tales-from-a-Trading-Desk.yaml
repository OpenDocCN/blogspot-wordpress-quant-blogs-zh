- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:38:30'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: OSGi, Java Platform Module ‚Äì Java 9 | Tales from a Trading Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2015/11/02/osgi-java-platform-module-java-9/#0001-01-01](https://mdavey.wordpress.com/2015/11/02/osgi-java-platform-module-java-9/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OSGi, Java Platform Module ‚Äì Java¬†9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With less than a year away from the Java 9 [release](https://blogs.oracle.com/java/entry/java_9_schedule_is_out),
    its interesting to see a preliminary [discussion](https://dzone.com/articles/from-osgi-to-jigsaw-1)
    of OSGi and the¬†new Java Platform Module System. ¬†Summary provides a good perspective
    of the two module system. ¬†Remember the [KISS](https://en.wikipedia.org/wiki/KISS_principle)
    principle üôÇ
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it is less dynamic than the OSGi original. On the other hand, it is also
    vastly less complex. OSGi service dynamics are cool, but it makes you handle lots
    of (concurrency) edge-cases. Do you really need these dynamics all the time?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ~ by mdavey on November 2, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Java](https://mdavey.wordpress.com/category/languages/java/)
  prefs: []
  type: TYPE_NORMAL
