- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 08:08:58'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: US Treasury notes and QuantLib | Quant Corner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://quantcorner.wordpress.com/2011/01/31/us-treasury-notes-and-quantlib/#0001-01-01](https://quantcorner.wordpress.com/2011/01/31/us-treasury-notes-and-quantlib/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here, we deal with **US debt securities**, and more specifically with **US Treasury
    note****s**. Before turning to the **C++/QuantLib** code itself, we remind the
    reader with some bond-related terminology. And, we will conclude with short comments
    on our code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bond terminology refresh**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Principal** or **face value**: the amount invested in the bond.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Coupon**: the periodic payment until the bond expires. It is a financial
    flow from the issuer toward the holder of the bond. The payments can occur at
    different time interval, it is generally **annual** or **semi annual** coupon.
    And, a bond can pay a **fixed coupon** or much less frequently a **variable coupon**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Redemption value**: a bond can be repurchased by the issuing company before
    expiration. That is redemption. And, the redemption value often is equal to the
    bond principal, but not always.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clean price**: the bond quoted without any accrued interest.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accrued interest**: the amount of interest built up since the last coupon
    payment.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dirty price**: it equals clean price + accrued interest. It is the actual
    payment received by the bond holder.'
  prefs: []
  type: TYPE_NORMAL
- en: C++/QuantLib code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now turn to the code.
  prefs: []
  type: TYPE_NORMAL
- en: __________________________
  prefs: []
  type: TYPE_NORMAL
- en: '**US Treasury security type**:    note'
  prefs: []
  type: TYPE_NORMAL
- en: '**Principal**:                                            100'
  prefs: []
  type: TYPE_NORMAL
- en: '**Issuing date**:                                     January 27th, 2011'
  prefs: []
  type: TYPE_NORMAL
- en: '**Settlement**:                                       January 28th, 2011'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maturity**:                                            August 31th, 2020'
  prefs: []
  type: TYPE_NORMAL
- en: '**Coupon rate**:                                    3,625%'
  prefs: []
  type: TYPE_NORMAL
- en: '**Yield**:                                                     3,4921%'
  prefs: []
  type: TYPE_NORMAL
- en: ________________________________
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**QuantLib** has powerful tools to handle dates (date calculations, formatting,
    …) . A simple example in our code is :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**settlementDate** will be adjusted to the appropriate near business day according
    to the given convention, thanks to **calendar.adjust(settlementDate)**.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, **QuantLib** allows to value ‘for real’ in this case a US Treasury note.
    That implies it requires a precise knowledge of convention dates. *How does the
    US Treasury cope with bank holidays ?*
  prefs: []
  type: TYPE_NORMAL
- en: The reader may have noticed the **try**,  **catch** and **throw** statements
    that we introduced in a recent post. Here, the **exception mechanism** doesn’t
    actually do a great deal for us. But, coding **exception mechanisms** is a good
    practice to make.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we introduced the **RelinkableHandle** handles, even if we don’t take
    much advantage of them in this code example. One benefit is that values  passed
    in relinkable handles can then be relinked to some other data source later on.
  prefs: []
  type: TYPE_NORMAL
