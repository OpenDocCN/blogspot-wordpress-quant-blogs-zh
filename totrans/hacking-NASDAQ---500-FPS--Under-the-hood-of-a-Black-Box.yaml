- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-13 00:03:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月13日00:03:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: Under the hood of a Black Box'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以500 FPS黑客纳斯达克：黑匣子内部
- en: 来源：[http://hackingnasdaq.blogspot.com/2012/04/under-hood-of-black-box.html#0001-01-01](http://hackingnasdaq.blogspot.com/2012/04/under-hood-of-black-box.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2012/04/under-hood-of-black-box.html#0001-01-01](http://hackingnasdaq.blogspot.com/2012/04/under-hood-of-black-box.html#0001-01-01)
- en: Building Mid-freq strategies is alot more involved than HF/UHF strategies, atleast
    so far. With HF/UHF your looking for a simple pattern with a simple data transform
    that`s consistent enough you can build a strategy to exploit. With the mid-freq
    strategies its still a simple pattern the difference is the abstraction level
    and greeks to the trade are more complicated - at least thats what it seems. e.g
    no longer looking at the very short term micro inventory/information/latency arbitrage opportunities and
    instead stationary patterns in highly abstracted and transformed data sets.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 构建中频策略比HF/UHF策略更加复杂，至少目前是这样。使用HF/UHF，你要寻找的是一个简单的模式，带有简单的数据转换，足够一致，你就可以建立一个可利用的策略。而使用中频策略，它仍是一个简单的模式，不同的是抽象级别和交易的greeks更加复杂
    - 至少看起来是这样。例如，不再关注非常短期微观库存/信息/延迟套利机会，而是关注高度抽象化和转换后的数据集中的静态模式。
- en: My mid freq strategies are not going well, it takes alot of time and I put a
    hard deadline of end-of-the-month to have something... which gets closer each
    day. Thus its almost certain will be pulling the machine from colo, to regroup,
    lick my wounds, get some sleep and then march forward with a modified approach...
    just cant do this alone starting from 0.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我的中频策略进展不顺利，需要很长时间，我设定了月底截止的严格期限……这个期限每天都在逼近。因此，几乎可以肯定的是要将机器从cololocation中拔出，重新调整，舔舐伤口，好好休息一下，然后带着修改后的方法前进……但是从0开始我无法完成这些。
- en: So less ranting about my (lack of) PnL and more on the tech side. Here`s a logical
    block diagram of my system.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以不再抱怨我的（缺乏的）盈利，更多地关注技术方面。这是我的系统的逻辑块图。
- en: Pretty simple eh?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 相当简单吧？
- en: First up NIC`s
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是NIC`s
- en: NIC0 -> ssh / management interface
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: NIC0 -> ssh /管理接口
- en: NIC1 -> Order Enter
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: NIC1 -> 订单输入
- en: NIC2 -> not used
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NIC2 -> 未使用
- en: NIC3 -> Market Data
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: NIC3 -> 市场数据
- en: Next is HWT`s
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 HWT`s
- en: Conventional wisdom says you should disable hyper threading as it has significant
    impact on the performance of the other HWT for the core, which can be true. Hyper
    threading works by having separate "contexts" e.g. register block & program counter
    in hardware but sharing the same execution pipeline. Similar in concept to a time
    sliced operating system where each process/thread has its own copy of all user-land
    registers which are swapped in at the start of the threads time slice, the thread
    executes for a set period of time, the registers are copied back into memory,
    and a new thread is swapped in. This allows multiple programs to share a single
    CPU and maximize the utilization of the CPU. HW threads work in a similar way
    but at the ISA (instruction set architecture) level ontop of a processors micro
    architecture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 传统智慧说你应该关闭超线程，因为它对核心的性能有重大影响，这可能是真的。超线程是通过在硬件中拥有独立的“上下文”来工作，例如在同一个执行管线中共享相同的执行管线。在概念上类似于一个分时操作系统，其中每个进程/线程在其时间切片开始时拥有所有用户态寄存器的副本，线程执行一段时间，寄存器被复制回内存，然后新的线程被切换进来。这允许多个程序共享单个CPU，并最大化CPU的利用率。硬件线程以类似的方式工作，但在处理器微体系结构的ISA（指令集架构）层上。
- en: The theory for both time sliced OS and hyper threading is, for a significant
    % of time the execution units are idle as the program is blocked waiting for IO.
    Thus some other program can utilize the hw resource while waiting for the blocked
    IO to complete and you get higher execution occupancy & more throughput... but
    at the cost of increased latency.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 分时操作系统和超线程的理论都是，对于大部分时间的情况下，执行单元都是空闲的，因为程序正在等待IO。因此，一些其他的程序可以利用硬件资源，同时等待阻塞IO的完成，你可以获得更高的执行占用率和更高的吞吐量，但代价是增加的延迟。
- en: 'OS Example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统示例：
- en: while a thread is blocked waiting for Keyboard/Disk/Network input, some other
    thread runs
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个线程被阻塞，等待键盘/磁盘/网络输入时，其他的线程就会运行。
- en: 'HW Example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HW示例：
- en: a memory read missed L1/L2/L3 and has to be fetched from DDR (100cycles), some
    other program runs for those cycles.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一次内存读取未命中L1/L2/L3缓存，必须从DDR中取出（100个周期），其他程序在这些周期内运行。
- en: Have been coding for 8 core asynchronous systems since 2001 so designing for
    wide processing is quite natural these days - have suffered that transition pain.
    Thus have plenty of process/threads but not enough cores, so have to eat the latency
    cost and enable hyperthreading.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自2001年以来一直在编写8核异步系统，所以最近为宽处理而设计是相当自然的 - 曾经经历过那个转变的痛苦。因此有足够的进程/线程，但核心不够，所以必须承担延迟成本并启用超线程。
- en: Short description of each HWT. All processes/threads are locked to their respective
    HWT.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个HWT的简短描述。所有进程/线程都锁定到各自的HWT上。
- en: HWT0
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: HWT0
- en: This is the general purpose, everything runs on this. To linux the system looks
    like a 1 HWT machine. bash sshd etc etc.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通用的，所有东西都在这上面运行。对于linux系统来说，该系统看起来像是一个HWT机器。bash sshd等等。
- en: 'HWT1:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: HWT1：
- en: nothing pre-defined. depends what im doing with the machine for what is assigned
    to this. e.g. live strategies, back testing, backup/crunching.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 未定义任何内容。具体取决于我对机器做什么来分配什么。例如实时策略、回测、备份/计算。
- en: 'HWT2:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HWT2：
- en: FIFO scheduled (e.g. not time sliced) for all strategies to run. Processing
    is setup so 1 cycle of a strategy is run, the round robbin(via linux scheduler)
    to the next strategy and so. Can be dangerous as the strategies can effect each
    other but the core strategy logic is usually very simple and light.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有策略的FIFO调度（如非分时切片）运行。处理设置为执行一轮策略的一个周期，然后通过轮询（通过linux调度程序）切换到下一个策略等。可能会很危险，因为策略可能会互相影响，但核心策略逻辑通常非常简单和轻便。
- en: 'HWT3:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HWT3：
- en: For HF/UHF the amount of brute force number crunching is not so high, thus a
    single HWT is sufficient. The thread has a job queue where anyone can submit something
    to be crunched.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于HF/UHF，暴力数值计算的数量并不太高，因此单个HWT就足够了。线程有一个工作队列，任何人都可以提交要进行计算的东西。
- en: 'HWT4:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: HWT4：
- en: Market Data Feed handler. You might ask why only 1 HWT for this? The answer
    is the more queue`s you add the higher the latency. My system only has 1 Queue
    and thats the Socket`s Rx Buffer which is massive. The 2nd answer is, i`m not
    keeping a book for all ~6.5K symbols on nasdaq thus dont need the additional throughput.
    As mentioned way back in 2010, the key here is extremely fast trivial reject`s
    to filter out all the crap you dont need.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 市场数据源处理程序。您可能会问为什么只有1个HWT？答案是添加的队列越多，延迟越高。我的系统只有1个队列，那就是套接字的Rx缓冲区，它是庞大的。第二个答案是，我没有为纳斯达克的所有~6.5K个符号保留账本，因此不需要额外的吞吐量。正如2010年提到的那样，关键在于极快的琐碎拒绝来过滤掉所有不需要的垃圾。
- en: 'HWT5:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: HWT5：
- en: This is the disk io core who`s sole purpose in life is to copy blocks of shared
    memory to the SSD.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是磁盘io核心，它唯一的目的是将共享内存块复制到SSD。
- en: 'HWT6:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: HWT6：
- en: The Gateway + Active Risk checks. This translates internal order requests (new/mod/can/exe)
    into native protocol versions and performs basic risk check / position management
    / fat finger checks before sending it into the market. Gateway or OMS as some
    call it has hooks to external programs which can enable/disable the sending of
    orders. The risk checks are minimal as its on the critical latency path, thus
    the more elaborate checks are done passively post trade.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 网关+主动风险检查。这将内部订单请求（new/mod/can/exe）转换为本机协议版本，并在发送到市场之前执行基本风险检查/头寸管理/手误检查。网关或一些人称为OMS，具有启用/禁用订单发送的外部程序挂接。风险检查很少，因为它处于关键的延迟路径上，因此更复杂的检查会在交易后被动进行。
- en: 'HWT7:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: HWT7：
- en: Networking utils / passive risk checking. Part one of this HWT is capture and
    logs everything on the wire in all directions going everywhere, think NSA style
    layer2 snooping - yes I see you knocking on the door 192.168.42.1\. The other
    part is to digest and analyze the captured data pseudo realtime. There are soft
    latency limits here, ideally all these functions would be running on an independent machine
    but... didnt want to spend the cash for that.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网络工具/被动风险检查。此HWT的第一部分是捕获和记录所有方向的数据，类似NSA风格的第二层窃听 - 是的，我看见你在门口敲门192.168.42.1。另一部分是伪实时地消化和分析捕获的数据。这里有软延迟限制，理想情况下，所有这些功能将在独立的机器上运行，但是...不想为此花费现金。
- en: .. and so the quest continues as digging thru terrabytes of data, racing a 500HP
    golf cart on the screaming edge of technology down some sketchy back alleyway
    in Hong Kong... is so my thing :P
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '...因此探索继续挖掘大量数据，驾驶一辆500HP的高尔夫球车，在香港一些不靠谱的小巷上面试技术的极限...这就是我的风格: P'
