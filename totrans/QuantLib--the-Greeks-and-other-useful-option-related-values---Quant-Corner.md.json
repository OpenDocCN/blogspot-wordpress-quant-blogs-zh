["```\n#include <ql/quantlib.hpp>\n\n#ifdef BOOST_MSVC\n#endif\n\nusing std::cout;\nusing std::endl;\nusing std::setprecision;\nusing namespace QuantLib;\n\n#if defined(QL_ENABLE_SESSIONS)\nnamespace QuantLib\n{\n\tInteger sessionId() { return 0; }\n}\n#endif\n\nint main(int, char* []) {\n\n\ttry {\n\t\t// Calendar stuff set up\n\t\tCalendar calendar = TARGET();\n\t\tDate todaysDate(6, February, 2011);\n\t\tSettings::instance().evaluationDate() = todaysDate;\n\t\tDayCounter dayCounter = Actual365Fixed();\n\n\t\t// Option parameter\n\t\tOption::Type type(Option::Put);\n\t\tReal underlying = 50;\n\t\tReal strike = 47;\n\t\tSpread dividendYield = 0.00;\n\t\tRate riskFreeRate = 0.05;\n\t\tVolatility volatility = 0.20;\n\t\tDate maturity(10, December, 2011);\n\n\t\t// European exercise type handler\n\t\tboost::shared_ptr<Exercise> europeanExercise(\n\t\t\tnew EuropeanExercise(\n\t\t\tmaturity));\n\n\t\t// Quote (=underlying price) handler\n\t\tHandle<Quote> underlyingH(\n\t\t\tboost::shared_ptr<Quote>(\n\t\t\tnew SimpleQuote(underlying)));\n\n\t\t// Yield term structure handler\n\t\tHandle<YieldTermStructure> flatTermStructure(\n\t\t\tboost::shared_ptr<YieldTermStructure>(\n\t\t\tnew FlatForward(\n\t\t\ttodaysDate,\n\t\t\triskFreeRate,\n\t\t\tdayCounter)));\n\n\t\t// Dividend handler\n\t\tHandle<YieldTermStructure> flatDividendTermStructure(\n\t\t\tboost::shared_ptr<YieldTermStructure>(\n\t\t\tnew FlatForward(\n\t\t\ttodaysDate,\n\t\t\tdividendYield,\n\t\t\tdayCounter)));\n\n\t\t// Volatility handler\n\t\tHandle<BlackVolTermStructure> flatVolTermStructure(\n\t\t\tboost::shared_ptr<BlackVolTermStructure>(\n\t\t\tnew BlackConstantVol(\n\t\t\ttodaysDate,\n\t\t\tcalendar,\n\t\t\tvolatility,\n\t\t\tdayCounter)));\n\n\t\t// Payoff handler\n\t\tboost::shared_ptr<StrikedTypePayoff> payoff(\n\t\t\tnew PlainVanillaPayoff(\n\t\t\ttype,\n\t\t\tstrike));\n\n\t\t// Black Scholes\n\t\tboost::shared_ptr<BlackScholesMertonProcess> bsmProcess(\n\t\t\tnew BlackScholesMertonProcess(\n\t\t\tunderlyingH,\n\t\t\tflatDividendTermStructure,\n\t\t\tflatTermStructure,\n\t\t\tflatVolTermStructure));\n\n\t\t// Option characteristics\n\t\tVanillaOption europeanOption(payoff, europeanExercise);\n\n\t\t// Pricing Engine : in this case BS for European options\n\t\teuropeanOption.setPricingEngine(boost::shared_ptr<PricingEngine>(\n\t\t\tnew AnalyticEuropeanEngine(\n\t\t\tbsmProcess)));\n\n\t\t/**************\n\t\t*  OUTPUTTING *\n\t\t***************/\n\n\t\t// 1) Option parameters\n\t\tcout << \"Option type =\\t\\t\" << type << endl;\n\t\tcout << \"Maturity =\\t\\t\" << maturity << endl;\n\t\tcout << \"Underlying price =\\t\" << underlying << endl;\n\t\tcout << \"Strike =\\t\\t\" << strike << endl;\n\t\tcout << \"Risk-free int. rate =\\t\" << setprecision(2) << io::rate(riskFreeRate) << endl;\n\t\tcout << \"Dividend yield =\\t\" << io::rate(dividendYield) << endl;\n\t\tcout << \"Volatility =\\t\\t\" << setprecision(2) << io::volatility(volatility) << endl;\n\t\tcout << endl;\n\t\tcout << endl;\n\n\t\t// 2) Calculation results\n\t\tcout << \"Option price :\\t\" << setprecision(5) << europeanOption.NPV() << endl;\n\t\tcout << \"Delta :\\t\\t\" << setprecision(5) << europeanOption.delta() << endl;\n\t\tcout << \"Elasticity :\\t\" << setprecision(5) << europeanOption.elasticity() << endl;\n\t\tcout << \"Gamma :\\t\\t\" << setprecision(5) << europeanOption.gamma() << endl;\n\t\tcout << \"Vega :\\t\\t\" << setprecision(5) << europeanOption.vega()/100 << endl;\n\t\tcout << \"Theta :\\t\\t\" << setprecision(5) << europeanOption.thetaPerDay() << endl;\n\t\tcout << \"Rho :\\t\\t\" << setprecision(5) << europeanOption.rho()/100 << endl;\n\t\tcout << endl;\n\n\t\treturn 0;\n\n\t\t}\n\t\tcatch (std::exception& e)\n\t\t{\n\t\t\tstd::cerr << e.what() << endl;\n\t\t\treturn 1;\n\t\t}\n\t\tcatch (...)\n\t\t{\n\t\t\tstd::cerr << \"unknown error\" << endl;\n\t\t\treturn 1;\n\t\t}\n}\n```"]