["```\n\n\t#*****************************************************************\n\t# Construct LONG ONLY minimum variance portfolio using the multiple factor risk model\n\t#****************************************************************** \n\tweights$long.min.var.alpha = weight\n\n\tfor(t in 36:nperiods) {\t\n\t\t#--------------------------------------------------------------------------\n\t\t# Create constraints\n\t\t#--------------------------------------------------------------------------\n\t\t# set min/max wgts for individual stocks: 0 =< x <= 10/100\n\t\tconstraints = new.constraints(n, lb = 0, ub = 10/100)\n\n\t\t# wgts must sum to 1 (fully invested)\n\t\tconstraints = add.constraints(rep(1,n), type = '=', b = 1, constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create factor exposures constraints\n\t\t#--------------------------------------------------------------------------\t\n\t\t# adjust prior constraints, add factor exposures\n\t\tconstraints = add.variables(nfactors, constraints)\n\n\t\t# BX - X1 = 0\n\t\tconstraints = add.constraints(rbind(ifna(factor.exposures[t,,], 0), -diag(nfactors)), rep(0, nfactors), type = '=', constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create Covariance matrix\n\t\t# [Qu  0]\n\t\t# [ 0 Qf]\n\t\t#--------------------------------------------------------------------------\n\t\ttemp = diag(n)\n\t\t\tdiag(temp) = ifna(specific.variance[t,], mean(coredata(specific.variance[t,]), na.rm=T))^2\n\t\tcov.temp = diag(n + nfactors)\n\t\t\tcov.temp[1:n,1:n] = temp\n\t\tcov.temp[(n+1):(n+nfactors),(n+1):(n+nfactors)] = factor.covariance[t,,]\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Setup optimizations\n\t\t#--------------------------------------------------------------------------\t\n\t\t# set expected return\n\t\talpha = factors.avg$AVG[t,] / 5\n\t\texpected.return = c(ifna(coredata(alpha),0), rep(0, nfactors))\n\n\t\t# remove companies that have no beta from optimization\n\t\tindex = which(is.na(beta[t,]))\n\t\tif( len(index) > 0) {\n\t\t\tconstraints$ub[index] = 0\n\t\t\tconstraints$lb[index] = 0\n\t\t}\n\n\t\t# find solution\n\t\tsol = solve.QP.bounds(Dmat = cov.temp, dvec = 0 * expected.return, \n\t\t\t\t\tAmat = constraints$A, bvec = constraints$b, \n\t\t\t\t\tmeq = constraints$meq, lb = constraints$lb, ub = constraints$ub)\n\n\t\tweights$long.min.var.alpha[t,] = sol$solution[1:n]\n\n\t\tcat(t, '\\n')\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Construct Market-Neutral portfolio 100:100 with beta=0 using the multiple factor risk model\n\t# based on the examples in the aa.long.short.test functions\n\t#****************************************************************** \n\tweights$market.neutral.alpha = weight\n\n\tfor(t in 36:nperiods) {\t\n\t\t#--------------------------------------------------------------------------\n\t\t# Split x into x.long and x.short, x_long and x_short >= 0\n\t\t# SUM(x.long) - SUM(x.short) = 0\n\t\t#--------------------------------------------------------------------------\t\t\t\n\t\t# x.long and x.short >= 0\n\t\t# x.long <= 0.1 \n\t\t# x.short <= 0.1 \n\t\tconstraints = new.constraints(2*n, lb = 0, ub = c(rep(0.1,n), rep(0.1,n)))\n\n\t\t# SUM (x.long - x.short) = 0\n\t\tconstraints = add.constraints(c(rep(1,n), -rep(1,n)), 0, type = '=', constraints)\t\t\n\n\t\t# SUM (x.long + x.short) = 2\n\t\tconstraints = add.constraints(c(rep(1,n), rep(1,n)), 2, type = '=', constraints)\t\t\n\n\t\t#--------------------------------------------------------------------------\n\t\t# beta of portfolio is the weighted average of the individual asset betas\t\t\n\t\t# http://www.duke.edu/~charvey/Classes/ba350/riskman/riskman.htm\n\t\t#--------------------------------------------------------------------------\n\t\ttemp = ifna(as.vector(beta[t,]),0)\n\t\tconstraints = add.constraints(c(temp, -temp), type = '=', b = 0, constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create factor exposures constraints\n\t\t#--------------------------------------------------------------------------\t\n\t\t# adjust prior constraints, add factor exposures\n\t\tconstraints = add.variables(nfactors, constraints)\n\n\t\t# BX - X1 = 0\n\t\ttemp = ifna(factor.exposures[t,,], 0)\n\t\tconstraints = add.constraints(rbind(temp, -temp, -diag(nfactors)), rep(0, nfactors), type = '=', constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Add binary constraints\t\n\t\t#--------------------------------------------------------------------------\t\n\t\t# adjust prior constraints: add b.i\n\t\tconstraints = add.variables(n, constraints)\n\n\t\t# index of binary variables b.i\n\t\tconstraints$binary.index = (2*n + nfactors + 1):(3*n + nfactors)\n\n\t\t# binary variable b.i : x.long < b, x.short < (1 - b)\n\t\t# x.long < b\n\t\tconstraints = add.constraints(rbind(diag(n), 0*diag(n), matrix(0,nfactors,n), -diag(n)), rep(0, n), type = '<=', constraints)\n\n\t\t# x.short < (1 - b)\n\t\tconstraints = add.constraints(rbind(0*diag(n), diag(n), matrix(0,nfactors,n), diag(n)), rep(1, n), type = '<=', constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# set expected return\n\t\t#--------------------------------------------------------------------------\t\n\t\t# set expected return\n\t\talpha = factors.avg$AVG[t,] / 5\n\t\ttemp = ifna(coredata(alpha),0)\n\t\texpected.return = c(temp, -temp, rep(0, nfactors), rep(0, n))\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create Covariance matrix\n\t\t# [Qu  0]\n\t\t# [ 0 Qf]\n\t\t#--------------------------------------------------------------------------\n\t\ttemp = diag(n)\n\t\t\tdiag(temp) = ifna(specific.variance[t,], mean(coredata(specific.variance[t,]), na.rm=T))^2\n\n\t\t# | cov -cov |\n\t\t# |-cov  cov |\t\t\n\t\ttemp = cbind( rbind(temp, -temp), rbind(-temp, temp) )\n\n\t\tcov.temp = 0*diag(2*n + nfactors + n)\n\t\t\tcov.temp[1:(2*n),1:(2*n)] = temp\n\t\tcov.temp[(2*n+1):(2*n+nfactors),(2*n+1):(2*n+nfactors)] = factor.covariance[t,,]\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Adjust Covariance matrix\n\t\t#--------------------------------------------------------------------------\n\t\tif(!is.positive.definite(cov.temp)) {\n\t\t\tcov.temp <- make.positive.definite(cov.temp, 0.000000001)\n\t\t}\t\n\n\t\t#--------------------------------------------------------------------------\n\t\t# page 9, Risk: We use the Barra default setting, risk aversion value of 0.0075, and\n\t\t# AS-CF risk aversion ratio of 1.\n\t\t#\n\t\t# The Effects of Risk Aversion on Optimization (2010) by S. Liu, R. Xu\n\t\t# page 4/5\n\t\t#--------------------------------------------------------------------------\n\t\trisk.aversion = 0.0075\n\n\t\t# remove companies that have no beta from optimization\n\t\tindex = which(is.na(beta[t,]))\n\t\tif( len(index) > 0) {\n\t\t\tconstraints$ub[index] = 0\n\t\t\tconstraints$lb[index] = 0\n\t\t\tconstraints$ub[2*index] = 0\n\t\t\tconstraints$lb[2*index] = 0\t\t\t\n\t\t}\n\n\t\t# find solution\n\t\tsol = solve.QP.bounds(Dmat = 2* risk.aversion * cov.temp, dvec = expected.return, \n\t\t\t\t\tAmat = constraints$A, bvec = constraints$b, \n\t\t\t\t\tmeq = constraints$meq, lb = constraints$lb, ub = constraints$ub,\n\t\t\t\t\tbinary.vec = constraints$binary.index)\t\t\t\t\t\n\n\t\tx = sol$solution[1:n] - sol$solution[(n+1):(2*n)]\n\t\tweights$market.neutral.alpha[t,] = x\n\n\t\tcat(t, '\\n')\n\t}\n\n```"]