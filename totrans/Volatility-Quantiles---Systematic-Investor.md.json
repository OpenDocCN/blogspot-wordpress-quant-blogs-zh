["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\n\ttickers = sp500.components()$tickers\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)\n\t\t# remove companies with less than 5 years of data\n\t\trm.index = which( sapply(ls(data), function(x) nrow(data[[x]])) < 1000 )\t\n\t\trm(list=names(rm.index), envir=data)\n\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\n\tbt.prep(data, align='keep.all', dates='1994::')\n\n\tdata.spy <- new.env()\n\tgetSymbols('SPY', src = 'yahoo', from = '1970-01-01', env = data.spy, auto.assign = T)\n\tbt.prep(data.spy, align='keep.all', dates='1994::')\n\n\t#*****************************************************************\n\t# Code Strategies\n\t#****************************************************************** \n\tprices = data$prices\n\t\tnperiods = nrow(prices)\n\t\tn = ncol(prices)\n\n\tmodels = list()\n\n\t# SPY\n\tdata.spy$weight[] = NA\n\t\tdata.spy$weight[] = 1\n\tmodels$spy = bt.run(data.spy)\n\n\t# Equal Weight\n\tdata$weight[] = NA\n\t\tdata$weight[] = ntop(prices, 500)\n\tmodels$equal.weight = bt.run(data)\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Create Quantiles based on the historical one year volatility \n\t#****************************************************************** \n\t# setup re-balancing periods\n\tperiod.ends = endpoints(prices, 'weeks')\n\t\tperiod.ends = period.ends[period.ends > 0]\n\n\t# compute historical one year volatility\n\tp = bt.apply.matrix(coredata(prices), ifna.prev)\t\n\tret = p / mlag(p) - 1\t\t\n\tsd252 = bt.apply.matrix(ret, runSD, 252)\t\t\n\n\t# split stocks in the S&amp;P 500 into Quantiles using one year historical Volatility\n\tn.quantiles=5\n\tstart.t = which(period.ends >= (252+2))[1]\t\n\tquantiles = weights = p * NA\n\n\tfor( t in start.t:len(period.ends) ) {\n\t\ti = period.ends[t]\n\n\t\tfactor = sd252[i,]\n\t\tranking = ceiling(n.quantiles * rank(factor, na.last = 'keep','first') / count(factor))\n\n\t\tquantiles[i,] = ranking\n\t\tweights[i,] = 1/tapply(rep(1,n), ranking, sum)[ranking]\t\t\t\n\t}\n\n\tquantiles = ifna(quantiles,0)\n\n\t#*****************************************************************\n\t# Create backtest for each Quintile\n\t#****************************************************************** \n\tfor( i in 1:n.quantiles) {\n\t\ttemp = weights * NA\n\t\ttemp[period.ends,] = 0\n\t\ttemp[quantiles == i] = weights[quantiles == i]\n\n\t\tdata$weight[] = NA\n\t\t\tdata$weight[] = temp\n\t\tmodels[[ paste('Q',i,sep='_') ]] = bt.run(data, silent = T)\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \t\t\t\t\t\n\tplotbt.custom.report.part1(models)\t\t\n\tplotbt.strategy.sidebyside(models)\n\n```"]