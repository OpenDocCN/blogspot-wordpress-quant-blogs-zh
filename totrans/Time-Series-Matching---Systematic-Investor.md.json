["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\n\ttickers = 'SPY'\n\n\tdata = getSymbols(tickers, src = 'yahoo', from = '1950-01-01', auto.assign = F)\n\n\t#*****************************************************************\n\t# Setup search\n\t#****************************************************************** \n\tdata = last(data, 252*10)\n\treference = coredata(Cl(data))\n\t\tn = len(reference)\n\t\tquery = reference[(n-90+1):n]\t\n\t\treference = reference[1:(n-90)]\n\n\t\tn.query = len(query)\n\t\tn.reference = len(reference)\n\n\t#*****************************************************************\n\t# Compute Distances\n\t#****************************************************************** \t\t\n\tdist = rep(NA, n.reference)\n\tquery.normalized = (query - mean(query)) / sd(query)\n\n\tfor( i in n.query : n.reference ) {\n\t\twindow = reference[ (i - n.query + 1) : i]\n\t\twindow.normalized = (window - mean(window)) / sd(window)\n\t\tdist[i] = stats:::dist(rbind(query.normalized, window.normalized))\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Find Matches\n\t#****************************************************************** \t\t\t\n\tmin.index = c()\n\tn.match = 10\n\n\t# only look at the minimums \n\ttemp = dist\n\t\ttemp[ temp > mean(dist, na.rm=T) ] = NA\n\n\t# remove n.query, points to the left/right of the minimums\n\tfor(i in 1:n.match) {\n\t\tif(any(!is.na(temp))) {\n\t\t\tindex = which.min(temp)\n\t\t\tmin.index[i] = index\n\t\t\ttemp[max(0,index - 2*n.query) : min(n.reference,(index + n.query))] = NA\n\t\t}\n\t}\n\tn.match = len(min.index)\n\n\t#*****************************************************************\n\t# Plot Matches\n\t#****************************************************************** \t\t\n\tdates = index(data)[1:len(dist)]\n\n\tpar(mar=c(2, 4, 2, 2))\n\tplot(dates, dist, type='l',col='gray', main='Top Matches', ylab='Euclidean Distance', xlab='')\n\t\tabline(h = mean(dist, na.rm=T), col='darkgray', lwd=2)\n\t\tpoints(dates[min.index], dist[min.index], pch=22, col='red', bg='red')\n\t\ttext(dates[min.index], dist[min.index], 1:n.match, adj=c(1,1), col='black',xpd=TRUE)\n\n\tplota(data, type='l', col='gray', main=tickers)\n\t\tplota.lines(last(data,90), col='blue')\n\t\tfor(i in 1:n.match) {\n\t\tplota.lines(data[(min.index[i]-n.query + 1):min.index[i]], col='red')\n\t\t}\n\t\ttext(index(data)[min.index - n.query/2], reference[min.index - n.query/2], 1:n.match, \n\t\t\tadj=c(1,-1), col='black',xpd=TRUE)\n\t\tplota.legend('Pattern,Match #','blue,red')\n\n```", "```\n\n\t#*****************************************************************\n\t# Overlay all Matches\n\t#****************************************************************** \t\t\n\tmatches = matrix(NA, nr=(n.match+1), nc=3*n.query)\n\ttemp = c(rep(NA, n.query), reference, query)\n\tfor(i in 1:n.match) {\n\t\tmatches[i,] = temp[ (min.index[i] - n.query + 1):(min.index[i] + 2*n.query) ]\t\n\t}\n\n\t# add the 'query' pattern\n\tmatches[(n.match+1),] = temp[ (len(temp) - 2*n.query + 1):(len(temp) + n.query) ]\t\t\n\n\t# normalize\n\tfor(i in 1:(n.match+1)) {\n\t\tmatches[i,] = matches[i,] / matches[i,n.query]\n\t}\n\n\t#*****************************************************************\n\t# Plot all Matches\n\t#****************************************************************** \t\t\t\t\n\ttemp = 100 * ( t(matches[,-c(1:n.query)]) - 1)\n\n\tpar(mar=c(2, 4, 2, 2))\n\tmatplot(temp, type='l',col='gray',lwd=2, lty='dotted', xlim=c(1,2.5*n.query),\n\t\tmain = paste('Pattern Prediction with', n.match, 'neighbours'),ylab='Normalized', xlab='')\n\t\tlines(temp[,(n.match+1)], col='black',lwd=4)\n\n\tpoints(rep(2*n.query,n.match), temp[2*n.query,1:n.match], pch=21, lwd=2, col='gray', bg='gray')\n\n\tbt.plot.dot.label <- function(x, data, xfun, col='red') {\n\t\tfor(j in 1:len(xfun)) {\n\t\t\ty = match.fun(xfun[[j]])(data)\n\t\t\tpoints(x, y, pch=21, lwd=4, col=col, bg=col)\n\t\t\ttext(x, y, paste(names(xfun)[j], ':', round(y,1),'%'),\n\t\t\t\tadj=c(-0.1,0), cex = 0.8, col=col,xpd=TRUE)\t\t\t\n\t\t}\n\t}\n\n\tbt.plot.dot.label(2*n.query, temp[2*n.query,1:n.match], \n\t\tlist(Min=min,Max=max,Median=median,'Bot 25%'=function(x) quantile(x,0.25),'Top 75%'=function(x) quantile(x,0.75)))\n\tbt.plot.dot.label(n.query, temp[n.query,(n.match+1)], list(Current=min))\n\n```", "```\n\n\t#*****************************************************************\n\t# Table with predictions\n\t#****************************************************************** \t\t\n\ttemp = matrix( double(), nr=(n.match+4), 6)\n\t\trownames(temp) = c(1:n.match, spl('Current,Min,Average,Max'))\n\t\tcolnames(temp) = spl('Start,End,Return,Week,Month,Quarter')\n\n\t# compute returns\n\ttemp[1:(n.match+1),'Return'] = matches[,2*n.query]/ matches[,n.query]\n\ttemp[1:(n.match+1),'Week'] = matches[,(2*n.query+5)]/ matches[,2*n.query]\n\ttemp[1:(n.match+1),'Month'] = matches[,(2*n.query+20)]/ matches[,2*n.query]\n\ttemp[1:(n.match+1),'Quarter'] = matches[,(2*n.query+60)]/ matches[,2*n.query]\n\n\t# compute average returns\n\tindex = spl('Return,Week,Month,Quarter')\n\ttemp['Min', index] = apply(temp[1:(n.match+1),index],2,min,na.rm=T)\n\ttemp['Average', index] = apply(temp[1:(n.match+1),index],2,mean,na.rm=T)\n\ttemp['Max', index] = apply(temp[1:(n.match+1),index],2,max,na.rm=T)\n\n\t# format\n\ttemp[] = plota.format(100*(temp-1),1,'','%')\n\n\t# enter dates\n\ttemp['Current', 'Start'] = format(index(last(data,90)[1]), '%d %b %Y')\n\ttemp['Current', 'End'] = format(index(last(data,1)[1]), '%d %b %Y')\n\tfor(i in 1:n.match) {\n\t\ttemp[i, 'Start'] = format(index(data[min.index[i] - n.query + 1]), '%d %b %Y')\n\t\ttemp[i, 'End'] = format(index(data[min.index[i]]), '%d %b %Y')\t\n\t}\n\n\t# plot table\n\tplot.table(temp, smain='Match #')\n\n```"]