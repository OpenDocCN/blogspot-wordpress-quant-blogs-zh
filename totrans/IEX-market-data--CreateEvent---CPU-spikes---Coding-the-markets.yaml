- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 19:30:09'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: IEX market data, CreateEvent & CPU spikes | Coding the markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://etrading.wordpress.com/2017/02/23/iex-market-data-createevent-cpu-spikes/#0001-01-01](https://etrading.wordpress.com/2017/02/23/iex-market-data-createevent-cpu-spikes/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: IEX market data, CreateEvent & CPU spikes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: February 23, 2017
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This week I’ve been testing the [SpreadServe addin](https://github.com/SpreadServe/SSAddin)
    with [Tiingo’s IEX market data](https://api.tiingo.com/docs/iex/realtime). I was
    checking performance on my [sscalc0.online](http://sscalc0.online) [AWS](https://aws.amazon.com/)
    host for a group of [SpreadServeEngines](http://spreadserve.readthedocs.io/en/latest/guide.html)
    executing various test and demo spreadsheets, including one that subscribes to
    [IEX](https://www.iextrading.com/) tickers for AAPL & SPY, via [Tiingo API websockets](https://api.tiingo.com/docs/general/overview).
    That API gives us real time top of book as well as last trade price and size for
    the cash equity traded on IEX. In my test scenario I was running five engines,
    two of them idle, three running spreadsheets, one of which was a simple IEX market
    data subscriber. Using [Process Explorer](https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx)
    I saw some odd CPU spiking on the idle engines. Zooming in with Process Explorer
    I could see the busyness was on a thread that should have been idle, sleeping
    inside a [WaitForSingleObject](https://msdn.microsoft.com/en-us/library/windows/desktop/ms687032(v=vs.85).aspx)
    call, waiting for a signal to check its input queue. The event object waited upon
    was created by some generic code invoking [win32’s CreateEvent](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682396(v=vs.85).aspx)
    and also used in another thread. Reading the docs I found that CreateEvent’s fourth
    param, the event object name, implies that the caller will get a handle to a previously
    created event object if the names match. And I was using a hardwired name! So
    my thread was being repeatedly woken by events from another thread. A quick fix
    to make the names unique produced idling engines with no unnecessary CPU burn.
    All very instructive, partly because running on AWS makes one very aware of paying
    by the CPU hour.
  prefs: []
  type: TYPE_NORMAL
