- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-17 23:41:11'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Multi-Dimensional Finite Difference Methods on a GPU – HPC-QuantLib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://hpcquantlib.wordpress.com/2012/12/27/multi-dimensional-finite-difference-methods-on-a-gpu/#0001-01-01](https://hpcquantlib.wordpress.com/2012/12/27/multi-dimensional-finite-difference-methods-on-a-gpu/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One key aspect for the performance of multi-dimensional finite difference methods
    based on operator splitting is the performance of the underlying tridiagonal system
    solver [1]. The authors in [2] have analysed different solver strategies and they
    have reported a speed-up factor of around 15 between GPU and CPU for the best
    solver strategy (cyclic reduction) on very large systems. CUDA’s sparse matrix
    library cuSPARSE contains a routine to solve tridiagonal systems based on cyclic
    reduction. nVIDIA claims a speed-up factor of  around ten compared against Intel’s
    MKL library [3].
  prefs: []
  type: TYPE_NORMAL
- en: These factors are smaller than the speed-up factors reported for pure Monte-Carlo
    pricing algorithms. Main reason is that a tridiagonal system solver can not be
    parallelised by a simple divide and conquer approach like many Monte-Carlo pricing
    algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Main classes of the GPU implementation of the Hundsdorfer-Verwer operator splitting
    scheme are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GPUFdmLinearOp**: implements the FdmLinearOp interface and can be initialized
    from any instance of FdmLinearOp/FdmLinearOpComposite via the *toMatrix()/toMatrixDecomp()*
    methods.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GPUTripleBandLinearOp**: GPU based implementation of TripleBandLinearOp.
    This linear operator can be initialized from any instance of the classes FdmLinearOp/FdmLinearOpComposite
    via the toMatrix/toMatrixDecomp() methods. The solver for the tridiagonal system
    is based on cuSPARSE.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GPUHundsdorferScheme**: GPU based implementation of the Hundsdorfer-Verwer
    operator splitting scheme.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[![plot](img/6a732664c417eae00ef5930537e650e5.png)](https://hpcquantlib.wordpress.com/2012/12/27/multi-dimensional-finite-difference-methods-on-a-gpu/plot-50/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![plot](img/bec9afb55c4e1df4f8e94ac113444613.png)](https://hpcquantlib.wordpress.com/2012/12/27/multi-dimensional-finite-difference-methods-on-a-gpu/plot-51/)The
    code is available [here](http://hpc-quantlib.de/src/gpuopsplitting.zip) and it
    is based on the latest [QuantLib](http://quantlib.org) version from the [trunk](http://sourceforge.net/p/quantlib/code/HEAD/tree/),
    [CUDA 4.1](https://developer.nvidia.com/category/zone/cuda-zone) or higher and
    [Cusp 0.3](http://code.google.com/p/cusp-library/) or higher.  As can be seen
    from the diagrams above the speed-up factor depends on the problem size. Speed-up
    factors above ten can only be achieved for very large two-dimensional or for medium-sized
    three-dimensional problems. The GPU precision is defined in cudatypes.hpp by the
    typedef for the type “real”.'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Karel in ’t Hout, [ADI finite difference schemes for the Heston model with
    correlation.](http://win.ua.ac.be/%7Ekihout/ADI_Heston_lecture.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Pablo Quesada-Barriuso, Julián Lamas-Rodríguez, Dora B. Heras, Montserrat
    Bóo, Francisco Argüello, [Selecting the Best Tridiagonal System Solver Projected
    on Multi-Core CPU and GPU Platforms.](http://weblidi.info.unlp.edu.ar/worldcomp2011-mirror/pdp8294.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] nVIDIA, [cuSPARSE](https://developer.nvidia.com/cusparse)'
  prefs: []
  type: TYPE_NORMAL
