- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:42:03'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:42:03
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Great Micro-services Debate | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务辩论 | 交易桌面故事
- en: 来源：[https://mdavey.wordpress.com/2015/06/05/the-great-micro-services-debate/#0001-01-01](https://mdavey.wordpress.com/2015/06/05/the-great-micro-services-debate/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2015/06/05/the-great-micro-services-debate/#0001-01-01](https://mdavey.wordpress.com/2015/06/05/the-great-micro-services-debate/#0001-01-01)
- en: The Great Micro-services Debate
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务辩论
- en: A few people have picked up on the great Micro-services debate that is probably
    occurring in many companies.  Micro-services, like many other architectural options,
    are just another tool in the toolbox.  No single solution will solve all problems
    🙂  Martin Fowler [offers](http://martinfowler.com/bliki/MonolithFirst.html) some
    recent views on micro-services architectures.  Sam [Newman](http://samnewman.io/blog/2015/04/07/microservices-for-greenfield/)
    offer a nice case study on brownfield/greenfield micro-services.  I think one
    of the key takeaways from Sam’s post is that domain knowledge of the problem is
    essential to the partitioning of services.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 少数人关注了正在许多公司中进行的关于微服务的伟大辩论。微服务，像许多其他架构选项一样，只是工具箱中的另一个工具。没有一种单一的解决方案能解决所有问题:) 马丁·福勒（Martin
    Fowler）在他的[文章](http://martinfowler.com/bliki/MonolithFirst.html)中提出了关于微服务架构的最新观点。萨姆·纽曼（Sam
    Newman）在[一篇博客](http://samnewman.io/blog/2015/04/07/microservices-for-greenfield/)中提供了一个关于棕地/绿地微服务的很好的案例研究。我认为萨姆文章中的一个重要收获是，对问题的领域知识对于服务的划分至关重要。
- en: Despite knowing the domain of continuous integration really well, their initial
    stab at coming up with service boundaries for their hosted-CI solution wasn’t
    quite right. This led to a high cost of change and high cost of ownership. After
    several months fighting this problem, the team decided to merge the services back
    into one big application. Later on, when the feature-set of the application had
    stabilized somewhat and the team had a firmer understanding of the domain, it
    was easier to find those stable boundaries.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管他们对持续集成领域的领域知识非常了解，但他们为托管CI解决方案提出的服务边界初稿并不完全正确。这导致了变更成本和拥有成本很高。在为这个问题奋斗了几个月后，团队决定将服务合并回一个大型应用程序。后来，当应用程序的功能集稳定了一些，团队对领域的理解更加坚定时，找到那些稳定的边界变得更容易了。
- en: 'Clean Code [blog](http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html)
    also offers sensible advice in the services area:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 整洁的代码（Clean Code）[博客](http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html)在服务领域也提供了合理的建议：
- en: Don’t leap into microservices just because it sounds cool. Segregate the system
    into jars using a plugin architecture first. If that’s not sufficient, then consider
    introducing service boundaries at strategic points.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不要仅仅因为微服务听起来很酷就仓促进入。首先使用插件架构将系统划分为jar。如果这还不够，那么在战略点上考虑引入服务边界。
- en: ~ by mdavey on June 5, 2015.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：mdavey，发布于2015年6月5日。
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 发布在[语言](https://mdavey.wordpress.com/category/languages/)分类下
