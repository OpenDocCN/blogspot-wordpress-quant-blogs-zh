["```\n\n#-------------------------------------\n# Inputs\n#-------------------------------------\n\n# Initial capital\nstart.capital = 2000000\n\n# Investment\nannual.mean.return = 5 / 100\nannual.ret.std.dev = 7 / 100\n\n# Inflation\nannual.inflation = 2.5 / 100\nannual.inf.std.dev = 1.5 / 100\n\n# Withdrawals\nmonthly.withdrawals = 10000\n\n# Number of observations (in Years)\nn.obs = 20\n\n# Number of simulations\nn.sim = 200\n\n#-------------------------------------\n# Simulation\n#-------------------------------------\n\n# number of months to simulate\nn.obs = 12 * n.obs\n\n# monthly Investment and Inflation assumptions\nmonthly.mean.return = annual.mean.return / 12\nmonthly.ret.std.dev = annual.ret.std.dev / sqrt(12)\n\nmonthly.inflation = annual.inflation / 12\nmonthly.inf.std.dev = annual.inf.std.dev / sqrt(12)\n\n# simulate Returns\nmonthly.invest.returns = matrix(0, n.obs, n.sim)\nmonthly.inflation.returns = matrix(0, n.obs, n.sim)\n\nmonthly.invest.returns[] = rnorm(n.obs * n.sim, mean = monthly.mean.return, sd = monthly.ret.std.dev)\nmonthly.inflation.returns[] = rnorm(n.obs * n.sim, mean = monthly.inflation, sd = monthly.inf.std.dev)\n\n# simulate Withdrawals\nnav = matrix(start.capital, n.obs + 1, n.sim)\nfor (j in 1:n.obs) {\n\tnav[j + 1, ] = nav[j, ] * (1 + monthly.invest.returns[j, ] - monthly.inflation.returns[j, ]) - monthly.withdrawals\n}\n\n# once nav is below 0 => run out of money\nnav[ nav < 0 ] = NA\n\n# convert to millions\nnav = nav / 1000000\n\n#-------------------------------------\n# Plots\n#-------------------------------------\nlayout(matrix(c(1,2,1,3),2,2))\n\n# plot all scenarios    \nmatplot(nav, type = 'l', las = 1, xlab = 'Months', ylab = 'Millions', \n\tmain = 'Projected Value of initial capital')\n\n# plot % of scenarios that are still paying\np.alive = 1 - rowSums(is.na(nav)) / n.sim\n\nplot(100 * p.alive, las = 1, xlab = 'Months', ylab = 'Percentage Paying', \n\tmain = 'Percentage of Paying Scenarios', ylim=c(0,100))\ngrid()\t\n\n# plot distribution of final wealth\nfinal.nav = nav[n.obs + 1, ]\n\tfinal.nav = final.nav[!is.na(final.nav)]\n\nplot(density(final.nav, from=0, to=max(final.nav)), las = 1, xlab = 'Final Capital', \n\tmain = paste('Distribution of Final Capital,', 100 * p.alive[n.obs + 1], '% are still paying'))\ngrid()\t\n\n```", "```\n\n# Define UI for application that plots random distributions \nshinyUI(pageWithSidebar(\n\n  # Application title\n  headerPanel(\"Retirement : simulating wealth with random returns, inflation and withdrawals\"),\n\n  # Sidebar with a slider input for number of observations\n  sidebarPanel(\n    sliderInput(\"n.obs\", \n                \"Number of observations (in Years):\", \n                min = 0, \n                max = 40, \n                value = 20),\n\n    sliderInput(\"start.capital\", \n                \"Initial capital invested :\", \n                min = 100000, \n                max = 10000000, \n                value = 2000000,\n                step = 100000,\n                format=\"$#,##0\",\n                locale=\"us\"),\n\n    sliderInput(\"annual.mean.return\", \n                \"Annual return from investments (in %):\", \n                min = 0.0, \n                max = 30.0, \n                value = 5.0,\n                step = 0.5),\n\n    sliderInput(\"annual.ret.std.dev\", \n                \"Annual volatility from investments (in %):\", \n                min = 0.0, \n                max = 25.0, \n                value = 7.0, \n                step = 0.1),\n\n    sliderInput(\"annual.inflation\", \n                \"Annual inflation (in %):\", \n                min = 0, \n                max = 20, \n                value = 2.5,\n                step = 0.1),\n\n    sliderInput(\"annual.inf.std.dev\", \n                \"Annual inflation volatility. (in %):\", \n                min = 0.0, \n                max = 5.0,\n                value = 1.5,\n                step = 0.05),\n\n    sliderInput(\"monthly.withdrawals\", \n                \"Monthly capital withdrawals:\", \n                min = 1000, \n                max = 100000, \n                value = 10000,\n                step = 1000,\n                format=\"$#,##0\",\n                locale=\"us\",),\n\n    sliderInput(\"n.sim\", \n                \"Number of simulations:\", \n                min = 0, \n                max = 2000, \n                value = 200)\n\n  ),\n\n  # Show a plot of the generated distribution\n  mainPanel(\n    plotOutput(\"distPlot\", height = \"600px\")\n  )\n))\n\n```", "```\n\nlibrary(shiny)\n\n# Define server logic required to generate and plot a random distribution\n#\n# Idea and original code by Pierre Chretien\n# Small updates by Michael Kapler \n#\nshinyServer(function(input, output) {\n\n  # Function that generates scenarios and computes NAV.\n  getNav <- reactive({ \n\t#-------------------------------------\n\t# Inputs\n\t#-------------------------------------\n\n\t# Initial capital\n\tstart.capital = input$start.capital\n\n\t# Investment\n\tannual.mean.return = input$annual.mean.return / 100\n\tannual.ret.std.dev = input$annual.ret.std.dev / 100\n\n\t# Inflation\n\tannual.inflation = input$annual.inflation / 100\n\tannual.inf.std.dev = input$annual.inf.std.dev / 100\n\n\t# Withdrawals\n\tmonthly.withdrawals = input$monthly.withdrawals\n\n\t# Number of observations (in Years)\n\tn.obs = input$n.obs\n\n\t# Number of simulations\n\tn.sim = input$n.sim\n\n\t#-------------------------------------\n\t# Simulation\n\t#-------------------------------------\n\n\t# number of months to simulate\n\tn.obs = 12 * n.obs\n\n\t# monthly Investment and Inflation assumptions\n\tmonthly.mean.return = annual.mean.return / 12\n\tmonthly.ret.std.dev = annual.ret.std.dev / sqrt(12)\n\n\tmonthly.inflation = annual.inflation / 12\n\tmonthly.inf.std.dev = annual.inf.std.dev / sqrt(12)\n\n\t# simulate Returns\n\tmonthly.invest.returns = matrix(0, n.obs, n.sim)\n\tmonthly.inflation.returns = matrix(0, n.obs, n.sim)\n\n\tmonthly.invest.returns[] = rnorm(n.obs * n.sim, mean = monthly.mean.return, sd = monthly.ret.std.dev)\n\tmonthly.inflation.returns[] = rnorm(n.obs * n.sim, mean = monthly.inflation, sd = monthly.inf.std.dev)\n\n\t# simulate Withdrawals\n\tnav = matrix(start.capital, n.obs + 1, n.sim)\n\tfor (j in 1:n.obs) {\n\t\tnav[j + 1, ] = nav[j, ] * (1 + monthly.invest.returns[j, ] - monthly.inflation.returns[j, ]) - monthly.withdrawals\n\t}\t\n\n\t# once nav is below 0 => run out of money\n\tnav[ nav < 0 ] = NA\n\n\t# convert to millions\n\tnav = nav / 1000000\n\n\treturn(nav)  \n  })\n\n  # Expression that plot NAV paths. \n  output$distPlot <- renderPlot({\n\tnav = getNav()\n\n\tlayout(matrix(c(1,2,1,3),2,2))\n\n\t# plot all scenarios    \n\tmatplot(nav, type = 'l', las = 1, xlab = 'Months', ylab = 'Millions', \n\t\tmain = 'Projected Value of initial capital')\n\n\t# plot % of scenarios that are still paying\n\tp.alive = 1 - rowSums(is.na(nav)) / ncol(nav)\n\n\tplot(100 * p.alive, las = 1, xlab = 'Months', ylab = 'Percentage Paying', \n\t\tmain = 'Percentage of Paying Scenarios', ylim=c(0,100))\n\tgrid()\t\n\n\tlast.period = nrow(nav)\n\n\t# plot distribution of final wealth\n\tfinal.nav = nav[last.period, ]\n\t\tfinal.nav = final.nav[!is.na(final.nav)]\n\n\tif(length(final.nav) ==  0) return()\t\t\n\n\tplot(density(final.nav, from=0, to=max(final.nav)), las = 1, xlab = 'Final Capital', \n\t\tmain = paste('Distribution of Final Capital,', 100 * p.alive[last.period], '% are still paying'))\n\tgrid()\t\n  })\n\n})\n\n```"]