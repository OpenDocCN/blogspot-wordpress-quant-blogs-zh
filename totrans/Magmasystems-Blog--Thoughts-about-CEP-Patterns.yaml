- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:07:35'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:07:35
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Magmasystems Blog: Thoughts about CEP Patterns'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Magmasystems博客：关于CEP模式的思考
- en: 来源：[http://magmasystems.blogspot.com/2007/09/thoughts-about-cep-patterns.html#0001-01-01](http://magmasystems.blogspot.com/2007/09/thoughts-about-cep-patterns.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://magmasystems.blogspot.com/2007/09/thoughts-about-cep-patterns.html#0001-01-01](http://magmasystems.blogspot.com/2007/09/thoughts-about-cep-patterns.html#0001-01-01)
- en: 'One of the things that I have been wondering about:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在思考的一件事：
- en: How do you do transactions in the context of event processing? For example,
    if I get an event, we might trigger some units-of-work and generate some more
    derived events from this initial event. These derived events might be put into
    the event cloud.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件处理的情境下，你是如何处理事务的？例如，如果我收到一个事件，我们可能会触发一些工作单元并从这个初始事件中生成一些更多的派生事件。这些派生事件可能会放入事件云中。
- en: If one of the units-of-work fail, how do we rollback the "transaction"? Do we
    need to define compensating events? Do we need to suck the derived events out
    of the event cloud? Do we need to attach "state" to the derived events which signal
    whether they are part of a transaction?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工作中的一个单元失败了，我们如何回滚“事务”？我们需要定义补偿事件吗？我们需要从事件云中提取派生事件吗？我们需要将“状态”附加到派生事件上，以表示它们是否属于一个事务？
- en: We run into a lot of the same issues here that DBMS vendors have run into. How
    can the transactions patterns in the DBMS world be applied to CEP?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里遇到的问题与数据库管理系统（DBMS）供应商遇到的问题有很多是相同的。如何将DBMS世界中的事务模式应用于CEP？
- en: Another thing I have been interested in is the generation of recursive events.
    If I get an event and generate a derived event, how do I know that this derived
    event will not result in recursion? Again, DBMS vendors have run into the same
    situation with database triggers, and some lessons can be learned.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直感兴趣的另一件事是递归事件的生成。如果我收到一个事件并生成一个派生事件，我如何知道这个派生事件不会导致递归？同样，数据库供应商在数据库触发器的情况下遇到了相同的问题，我们可以从中吸取一些教训。
- en: So, does this mean that we are better off considering a CEP vendor who has roots
    in the DBMS world?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这意味着我们应该考虑一个有着DBMS世界背景的CEP供应商吗？
- en: (As you can see, I am just using the blog as scatchpad for some thoughts ....
    but it gives you an idea about the things that any of you who are implementing
    CEP might have to consider...)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: （正如你所见，我只是把博客当作一个记事本，记录一些想法……但它能让你了解到，在实施CEP时，你们中任何人可能需要考虑的事情……）
- en: ©2007 Marc Adler - All Rights Reserved
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ©2007 Marc Adler - 版权所有
