["```\n'''\nCreated on 26 dec. 2011\nCopyright: Jev Kuznetsov\nLicense: BSD\n\nsender-reciever pattern.\n\n'''\n\nimport tradingWithPython.lib.logger as logger\nimport types\n\nclass Sender(object):\n    \"\"\"\n    Sender -> dispatches messages to interested callables \n    \"\"\"\n    def __init__(self):\n        self.listeners = {}\n        self.logger = logger.getLogger()\n\n    def register(self,listener,events=None):\n        \"\"\"\n        register a listener function\n\n        Parameters\n        -----------\n        listener : external listener function\n        events  : tuple or list of relevant events (default=None)\n        \"\"\"\n        if events is not None and type(events) not in (types.TupleType,types.ListType):\n            events = (events,)\n\n        self.listeners[listener] = events\n\n    def dispatch(self,event=None, msg=None):\n        \"\"\"notify listeners \"\"\"\n        for listener,events in self.listeners.items():\n            if events is None or event is None or event in events:\n                try:\n                    listener(self,event,msg)\n                except (Exception,):\n                    self.unregister(listener)\n                    errmsg = \"Exception in message dispatch: Handler '{0}' unregistered for event '{1}'  \".format(listener.func_name,event)\n                    self.logger.exception(errmsg)\n\n    def unregister(self,listener):\n        \"\"\" unregister listener function \"\"\"\n        del self.listeners[listener]             \n\n#---------------test functions--------------\n\nclass ExampleListener(object):\n    def __init__(self,name=None):\n        self.name = name\n\n    def method(self,sender,event,msg=None):\n        print \"[{0}] got event {1} with message {2}\".format(self.name,event,msg)\n\nif __name__==\"__main__\":\n    print 'demonstrating event system'\n\n    alice = Sender()\n    bob = ExampleListener('bob')\n    charlie = ExampleListener('charlie')\n    dave = ExampleListener('dave')\n\n    # add subscribers to messages from alice\n    alice.register(bob.method,events='event1') # listen to 'event1'\n    alice.register(charlie.method,events ='event2') # listen to 'event2'\n    alice.register(dave.method) # listen to all events\n\n    # dispatch some events\n    alice.dispatch(event='event1')\n    alice.dispatch(event='event2',msg=[1,2,3])\n    alice.dispatch(msg='attention to all')\n\n    print 'Done.'\n\n```"]