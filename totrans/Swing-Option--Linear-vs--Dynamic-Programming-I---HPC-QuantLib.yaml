- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-17 23:40:05'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Swing Option: Linear vs. Dynamic Programming I – HPC-QuantLib'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://hpcquantlib.wordpress.com/2011/05/29/swing-option-i-linear-vs-dynamic-programming/#0001-01-01](https://hpcquantlib.wordpress.com/2011/05/29/swing-option-i-linear-vs-dynamic-programming/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finding the optimal exercise strategy for a swing option is a challenging task,
    even for simple payoff structures. In the absence of complicated time-integral
    constraints dynamic programming can be used to calculate the optimal exercise
    strategy. Linear programming applied *ex post* over the whole spot price path
    is capable to deal with more complicated time-integral constraints but the algorithm
    leads only to an upper bound of the real option price [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic payoff structure is e.g.: On the exercise dates ![t_i, i\in\{1..N\}](img/ceb7402f3d0d2dd826076a0feaa3b25e.png)
    the decision variables ![\beta_i\in\{0,1\}](img/14f0ae1ade7291e90648b241544494cb.png)
    indicate whether to exercise ![(\beta_i=1)](img/55b71e53ca8639f44d82e937c1c4dcd3.png)
    or not to exercise ![(\beta_i=0)](img/b9db13e10d2f21a5d9722ac3d5be68de.png) the
    option at a given point ![t_i](img/47514cfd3eec7658c4bd9fa21c2063d0.png) in time.
    Payoff is either ![\beta_i (P(t_i)-K)](img/a79acf140baa7d65b986a73d84feb4e8.png)
    for a call or ![\beta_i(K-P(t_i))](img/607f2105f2f287fc46cae44efebe5298.png) for
    a put option. Here ![K](img/7fbda8d36d2bb059dcc3ef722b1f7c78.png) is the strike
    price and ![P(t_i)](img/a34bd0cc174927dcc1f6360b85e0f7e0.png) is the spot price
    . The number of exercise opportunities is constraint by'
  prefs: []
  type: TYPE_NORMAL
- en: '![E_{min} \le \sum_{i=1}^N \beta_i \le E_{max}](img/87f9ef1bd007e87335bde8c4bf967923.png).'
  prefs: []
  type: TYPE_NORMAL
- en: The price of a swing call option is then given by
  prefs: []
  type: TYPE_NORMAL
- en: '![\text{npv} = \max_{\beta}\mathbb{E}^\mathbb{Q} \left[ \sum_{i=1}^N \beta_i
    \left( P(t_i) - K\right)e^{rt_i}\right]](img/81f6ce454db48d6841abb4b35ef23406.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let the dynamics of the spot price in the risk neutral measure ![\mathbb{Q}](img/5303e8e873ee25c92b0ce4499aa13f42.png)
    be given by the Kluge model [2]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rcl} S &=& exp(X_t + Y_t) \\ dX_t &=& \alpha(\mu(t)-X_t)dt
    + \sigma dW_t \\ dY_t &=& -\beta Y_{t-}dt + J_tdN_t \\ \omega(J)&=& \eta_u e^{-\eta_u
    J} \end{array}](img/26404891dce6827104120e026b6228fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This model is composed of an Ornstein-Uhlenbeck (OU) process ![X_t](img/bac49ad8e6c0a4d679f98639122d578f.png),
    a deterministic period function ![\mu(t)](img/fbf2ff543464902ce67787f23dc78cd2.png)
    characterizing the seasonality and a mean reverting process ![Y_t](img/f6195da594b33c3d1302f6dd33eaf94d.png)
    with jumps to incorporate spikes. ![N_t](img/c6d44fd3b9c210c1d0e71a4a31edb3dc.png)
    is a Poisson  process with jump intensity ![\lambda](img/4a42b8a415b6b944138e18b71269a40a.png)
    and the jump size itself is exponentially distributed. The random variables ![W_t,
    N_t](img/bb74d9d6f7f62360527ae50bf2908bf9.png) and ![J_t](img/97d07d8e4f632ef05d60a661bf325be8.png)
    are independent. The Monte-Carlo path simulation will be built on top of standard
    components for an OU process and a Poisson jump-diffusion process [3]. The dynamic
    programming approach can either be carried out using least squares Monte-Carlo
    *ansatz* (Longstaff Schwartz algorithm) or using finite difference methods. We
    prefer finite difference methods to avoid e.g. the problem of choosing an appropriate
    basis function set. The Feynman-Kac theorem leads to the corresponding partial
    integro differential equation (PIDE):'
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rcl} rV =&&\frac{\partial V}{\partial t}+\frac{\sigma^2}{2}\frac{\partial^2
    V}{\partial x^2} + \alpha(\mu(t)-x)\frac{\partial V}{\partial x}-\beta y\frac{\partial
    V}{\partial y}\\&+&\lambda \int_\mathbb{R} \left( V(x,y+z,t)-V(x,y,t)\right )\omega(z)
    dz \end{array}](img/a3a73ff1959163c672753674462aa215.png)'
  prefs: []
  type: TYPE_IMG
- en: A Gauss-Laguerre quadrature is appropriate to calculate the integral part of
    the PIDE. Beside this two-dimensional PIDE an additional dimension is needed to
    keep track of the already consumed exercise rights. The three-dimensional formulation
    together with Bellman’s principle of optimality transforms the global optimization
    problem into a local optimization problem.
  prefs: []
  type: TYPE_NORMAL
- en: Target of the linear programming approach is the upper bound
  prefs: []
  type: TYPE_NORMAL
- en: '![\text{npv} \le \mathbb{E}^\mathbb{Q}\left[ \max_{\beta} \sum_{i=1}^N \beta_i\left(P(t_i)
    - K \right) e^{rt_i}\right]](img/d3323d572751de6a4fb5675e5291b5cd.png)'
  prefs: []
  type: TYPE_IMG
- en: The linear programming algorithm will calculate the optimal exercise strategy
    ![\left\{ \beta \right\}](img/4f009d2460fee1e8452a41c85c6921d4.png) on each Monte-Carlo
    path separately (*perfect foresight*) with respect to the given constraints. For
    this basic type of swing option linear programming is sort of over-engineering
    because a simple sort algorithm will also reproduce the optimal exercise strategy.
    But introducing linear programming and mixed integer programming now will enable
    us later on to deal with more complicated time-integral constraints. Libraries
    for this task are freely available, e.g. the [GNU Linear Programming Kit](http://www.gnu.org/software/glpk/).
  prefs: []
  type: TYPE_NORMAL
- en: The test parameterization of the model is
  prefs: []
  type: TYPE_NORMAL
- en: '![\alpha=1.0, \sigma=200\%, \mu(t)=3.0,\beta=5.0, \eta=2.0, \lambda=1.0, X_0=3.0,
    Y_0=0.0](img/6b6620506cbf541f1e2da30a6ec4b724.png),'
  prefs: []
  type: TYPE_NORMAL
- en: the example swing call option has maturity of one year, strike price is equal
    40, one exercise opportunity per month and the minimum number of exercise rights
    is equal to the maximum number of exercise rights, ![E_{min} = E_{max}](img/499cc638eb418659cf82efd80b3cb754.png).
    Interest rates are at ![r=10\%](img/fb7aa0e0aa181469fc7643400a87d281.png).
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/7c5b650cd5158acb69c1aab71e776dbf.png "plot")](https://hpcquantlib.wordpress.com/wp-content/uploads/2011/05/plot8.png)'
  prefs: []
  type: TYPE_NORMAL
- en: As the diagram above shows for this set-up the upper bound for the swing option
    price calculated using linear programming differs significantly from the correct
    price calculated based on dynamic programming on a lattice. For twelve exercise
    rights both algorithms have to provide the same results because the constraint
    forces to always exercise on each exercise date. Next to come is to rerun the
    simulation with a more realistic forward curve and process parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The code is available [here](http://hpc-quantlib.de/src/simpleswing.zip). It
    depends on the [GNU Linear Programming Kit](http://www.gnu.org/software/glpk/),
    the [Boost Thread](http://www.boost.org) library for parallelization and at the
    time of writing on the latest [QuantLib](http://www.quantlib.org) version from
    the [SVN trunk](http://sourceforge.net/p/quantlib/code/HEAD/tree/). If you want
    to generate the plot directly out of the C++ program you also need [R](http://www.r-project.org/),
    [RCPP](http://cran.r-project.org/web/packages/Rcpp/index.html) and [RInside](http://cran.r-project.org/web/packages/RInside/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[1] M. Burger, B. Graeber, G. Schindlmayr, Managing Energy Risk, ISDN 978-0-470-ß2962-6'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] T. Kluge, [Pricing Swing Options and other Electricity Derivatives](http://eprints.maths.ox.ac.uk/246/1/kluge.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] P. Glasserman, Monte Carlo Methods in Financial Engineering.  ISBN-0387004513'
  prefs: []
  type: TYPE_NORMAL
