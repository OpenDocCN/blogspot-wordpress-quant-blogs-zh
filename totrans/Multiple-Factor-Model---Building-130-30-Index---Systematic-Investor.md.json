["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\n\n\t# Load CSFB factor data that we saved at the end of the fm.all.factor.test function\n\tload(file='data.factors.Rdata')\n\t\tnperiods = nrow(next.month.ret)\n\t\ttickers = colnames(next.month.ret)\n\t\tn = len(tickers)\n\n\t# Load multiple factor risk model data that we saved at the end of the fm.risk.model.test function\t\n\tload(file='risk.model.Rdata')\n\t\tfactor.exposures = all.data[,,-1]\t\n\t\tfactor.names = dimnames(factor.exposures)[[3]]\n\t\tnfactors = len(factor.names)\n\n\t#*****************************************************************\n\t# Compute Betas: b = cov(r,m) / var(m)\n\t# The betas are measured on a two-year rolling window\n\t# http://en.wikipedia.org/wiki/Beta_(finance)\n\t#****************************************************************** \n\tret = mlag(next.month.ret)\n\tbeta = ret * NA\n\n\t# 1/n benchmark portfolio\n\tbenchmark = ntop(ret, n)\t\n\tbenchmark.ret = rowSums(benchmark * ret, na.rm=T)\n\n\t# estimate betas\n\tfor(t in 24:nperiods) {\n\t\tt.index = (t-23):t\n\t\tbenchmark.var = var( benchmark.ret[t.index], na.rm=T )\n\n\t\tt.count = count(ret[t.index, ])\n\t\tt.cov = cov( ifna(ret[t.index,], 0), benchmark.ret[t.index], use='complete.obs' )\n\n\t\t# require at least 20 months of history\n\t\tbeta[t,] = iif(t.count > 20, t.cov/benchmark.var, NA)\n\t}\n\n```", "```\nMax weight * return - risk.aversion * weight * Covariance * weight \nSum weight = 1\nSum weight * beta = 1\n0 <= weight <= 0.1\n```", "```\n\n\t#*****************************************************************\n\t# Construct LONG ONLY portfolio using the multiple factor risk model\n\t#****************************************************************** \n\tload.packages('quadprog,corpcor,kernlab')\n\n\tweight = NA * next.month.ret\n\tweights = list()\n\t\tweights$benchmark = ntop(beta, n)\t\t\n\t\tweights$long.alpha = weight\n\n\tfor(t in 36:nperiods) {\t\n\t\t#--------------------------------------------------------------------------\n\t\t# Create constraints\n\t\t#--------------------------------------------------------------------------\n\t\t# set min/max wgts for individual stocks: 0 =< x <= 10/100\n\t\tconstraints = new.constraints(n, lb = 0, ub = 10/100)\n\n\t\t# wgts must sum to 1 (fully invested)\n\t\tconstraints = add.constraints(rep(1,n), type = '=', b = 1, constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# beta of portfolio is the weighted average of the individual asset betas\t\t\n\t\t# http://www.duke.edu/~charvey/Classes/ba350/riskman/riskman.htm\n\t\t#--------------------------------------------------------------------------\n\t\tconstraints = add.constraints(ifna(as.vector(beta[t,]),0), type = '=', b = 1, constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create factor exposures constraints\n\t\t#--------------------------------------------------------------------------\t\n\t\t# adjust prior constraints, add factor exposures\n\t\tconstraints = add.variables(nfactors, constraints)\n\n\t\t# BX - X1 = 0\n\t\tconstraints = add.constraints(rbind(ifna(factor.exposures[t,,], 0), -diag(nfactors)), rep(0, nfactors), type = '=', constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create Covariance matrix\n\t\t# [Qu  0]\n\t\t# [ 0 Qf]\n\t\t#--------------------------------------------------------------------------\n\t\ttemp = diag(n)\n\t\t\tdiag(temp) = ifna(specific.variance[t,], mean(coredata(specific.variance[t,]), na.rm=T))^2\n\t\tcov.temp = diag(n + nfactors)\n\t\t\tcov.temp[1:n,1:n] = temp\n\t\tcov.temp[(n+1):(n+nfactors),(n+1):(n+nfactors)] = factor.covariance[t,,]\n\n\t\t#--------------------------------------------------------------------------\n\t\t# create input assumptions\n\t\t#--------------------------------------------------------------------------\n\t\tia = list()\t\n\t\tia$n = nrow(cov.temp)\n\t\tia$annual.factor = 12\n\n\t\tia$symbols = c(tickers, factor.names)\n\n\t\tia$cov = cov.temp\t\n\n\t\t#--------------------------------------------------------------------------\n\t\t# page 9, Risk: We use the Barra default setting, risk aversion value of 0.0075, and\n\t\t# AS-CF risk aversion ratio of 1.\n\t\t#\n\t\t# The Effects of Risk Aversion on Optimization (2010) by S. Liu, R. Xu\n\t\t# page 4/5\n\t\t#--------------------------------------------------------------------------\n\t\trisk.aversion = 0.0075\n\t\tia$cov.temp = ia$cov\t\n\n\t\t# set expected return\n\t\talpha = factors.avg$AVG[t,] / 5\n\t\tia$expected.return = c(ifna(coredata(alpha),0), rep(0, nfactors))\n\n\t\t# remove companies that have no beta from optimization\n\t\tindex = which(is.na(beta[t,]))\n\t\tif( len(index) > 0) {\n\t\t\tconstraints$ub[index] = 0\n\t\t\tconstraints$lb[index] = 0\n\t\t}\n\n\t\t# find solution\n\t\tsol = solve.QP.bounds(Dmat = 2* risk.aversion * ia$cov.temp, dvec = ia$expected.return, \n\t\t\t\t\tAmat = constraints$A, bvec = constraints$b, \n\t\t\t\t\tmeq = constraints$meq, lb = constraints$lb, ub = constraints$ub)\n\n\t\tweights$long.alpha[t,] = sol$solution[1:n]\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Construct Long/Short 130:30 portfolio using the multiple factor risk model\n\t# based on the examples in the aa.long.short.test functions\n\t#****************************************************************** \n\tweights$long.short.alpha = weight\n\n\tfor(t in 36:nperiods) {\t\n\t\t#--------------------------------------------------------------------------\n\t\t# Create constraints\n\t\t#--------------------------------------------------------------------------\n\t\t# set min/max wgts for individual stocks: -10/100 =< x <= 10/100\n\t\tconstraints = new.constraints(n, lb = -10/100, ub = 10/100)\n\n\t\t# wgts must sum to 1 (fully invested)\n\t\tconstraints = add.constraints(rep(1,n), type = '=', b = 1, constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# beta of portfolio is the weighted average of the individual asset betas\t\t\n\t\t# http://www.duke.edu/~charvey/Classes/ba350/riskman/riskman.htm\n\t\t#--------------------------------------------------------------------------\n\t\tconstraints = add.constraints(ifna(as.vector(beta[t,]),0), type = '=', b = 1, constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create factor exposures constraints\n\t\t#--------------------------------------------------------------------------\t\n\t\t# adjust prior constraints, add factor exposures\n\t\tconstraints = add.variables(nfactors, constraints)\n\n\t\t# BX - X1 = 0\n\t\tconstraints = add.constraints(rbind(ifna(factor.exposures[t,,], 0), -diag(nfactors)), rep(0, nfactors), type = '=', constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create 130:30\n\t\t# -v.i <= x.i <= v.i, v.i>0, SUM(v.i) = 1.6\n\t\t#--------------------------------------------------------------------------\t\t\n\t\t# adjust prior constraints, add v.i\n\t\tconstraints = add.variables(n, constraints)\n\n\t\t# -v.i <= x.i <= v.i\n\t\t#   x.i + v.i >= 0\n\t\tconstraints = add.constraints(rbind(diag(n), matrix(0,nfactors,n)  ,diag(n)), rep(0, n), type = '>=', constraints)\n\t\t#   x.i - v.i <= 0\n\t\tconstraints = add.constraints(rbind(diag(n), matrix(0,nfactors,n), -diag(n)), rep(0, n), type = '<=', constraints)\n\n\t\t# SUM(v.i) = 1.6\n\t\tconstraints = add.constraints(c(rep(0, n), rep(0, nfactors), rep(1, n)), 1.6, type = '=', constraints)\n\n\t\t#--------------------------------------------------------------------------\n\t\t# Create Covariance matrix\n\t\t# [Qu  0]\n\t\t# [ 0 Qf]\n\t\t#--------------------------------------------------------------------------\n\t\ttemp = diag(n)\n\t\t\tdiag(temp) = ifna(specific.variance[t,], mean(coredata(specific.variance[t,]), na.rm=T))^2\n\t\tcov.temp = 0*diag(n + nfactors + n)\n\t\t\tcov.temp[1:n,1:n] = temp\n\t\tcov.temp[(n+1):(n+nfactors),(n+1):(n+nfactors)] = factor.covariance[t,,]\n\n\t\t#--------------------------------------------------------------------------\n\t\t# create input assumptions\n\t\t#--------------------------------------------------------------------------\n\t\tia = list()\t\n\t\tia$n = nrow(cov.temp)\n\t\tia$annual.factor = 12\n\n\t\tia$symbols = c(tickers, factor.names, tickers)\n\n\t\tia$cov = cov.temp\t\n\n\t\t#--------------------------------------------------------------------------\n\t\t# page 9, Risk: We use the Barra default setting, risk aversion value of 0.0075, and\n\t\t# AS-CF risk aversion ratio of 1.\n\t\t#\n\t\t# The Effects of Risk Aversion on Optimization (2010) by S. Liu, R. Xu\n\t\t# page 4/5\n\t\t#--------------------------------------------------------------------------\n\t\trisk.aversion = 0.0075\n\t\tia$cov.temp = ia$cov\n\n\t\t# set expected return\n\t\talpha = factors.avg$AVG[t,] / 5\n\t\tia$expected.return = c(ifna(coredata(alpha),0), rep(0, nfactors), rep(0, n))\n\n\t\t# remove companies that have no beta from optimization\n\t\tindex = which(is.na(beta[t,]))\n\t\tif( len(index) > 0) {\n\t\t\tconstraints$ub[index] = 0\n\t\t\tconstraints$lb[index] = 0\n\t\t}\n\n\t\t# find solution\n\t\tsol = solve.QP.bounds(Dmat = 2* risk.aversion * ia$cov.temp, dvec = ia$expected.return, \n\t\t\t\t\tAmat = constraints$A, bvec = constraints$b, \n\t\t\t\t\tmeq = constraints$meq, lb = constraints$lb, ub = constraints$ub)\n\n\t\tweights$long.short.alpha[t,] = sol$solution[1:n]\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Plot Transition Maps\n\t#****************************************************************** \t\n\tlayout(1:3)\n\tfor(i in names(weights)) plotbt.transition.map(weights[[i]], i)\n\n```", "```\n\n\t#*****************************************************************\n\t# Create strategies\n\t#****************************************************************** \t\n\tprices = data$prices\n\t\tprices = bt.apply.matrix(prices, function(x) ifna.prev(x))\n\n\t# find month ends\n\tmonth.ends = endpoints(prices, 'months')\n\n\t# create strategies that invest in each qutile\n\tmodels = list()\n\n\tfor(i in names(weights)) {\n\t\tdata$weight[] = NA\n\t\t\tdata$weight[month.ends,] = weights[[i]]\n\t\t\tcapital = 100000\n\t\t\tdata$weight[] = (capital / prices) * (data$weight)\t\n\t\tmodels[[i]] = bt.run(data, type='share', capital=capital)\n\t}\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \t\n\tmodels = rev(models)\n\n\tplotbt.custom.report.part1(models, dates='1998::')\n\tplotbt.custom.report.part2(models)\n\n```", "```\n\n\t# Plot Portfolio Turnover for each strategy\n\tlayout(1)\n\tbarplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover')\n\n```"]