- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:41:07'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Roslyn, LLILC and WebAssembly? | Tales from a Trading Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mdavey.wordpress.com/2015/06/29/roslyn-llilc-and-webassembly/#0001-01-01](https://mdavey.wordpress.com/2015/06/29/roslyn-llilc-and-webassembly/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Given Joe Duffy’s [blog](http://joeduffyblog.com/) is so quite these days, its
    time to speculate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The LLILC [announcement](http://www.dotnetfoundation.org/blog/announcing-llilc-llvm-for-dotnet)
    some months ago is interesting – a continued openness from Microsoft.  The main
    difference between Roslyn and LLILC, as provided by LLILC [github](https://github.com/dotnet/llilc/wiki/LLILC-FAQ)
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Roslyn provides frontend support, whilst LLILC (via LLVM) provides backend
    support:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Roslyn exposes the data structures of a frontend – so it’s ideal for building
    tools such as IDEs, with syntax coloring, warning squiggles, use/definition lookup,
    refactoring, etc; or translators that convert C# to some other language; or pretty-print
    formatters; or analyzers that check conformance with coding guidelines (think
    FxCop).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'LLILC, via LLVM, exposes the data structures of a backend – so it’s ideal for
    building tools that inject extra code (eg: performance profiler, code tracer,
    debugger, parallelism analyzer, race detector); or super-optimizing code (eg:
    auto-vectorizer, auto-parallelizer); or test-case reduction.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The key in the above is the reference to [LLVM](http://blog.llvm.org/2015/04/llilc-llvm-based-compiler-for-dotnet.html),
    especially if you read “From ASM.JS to [WebAssembly](https://brendaneich.com/2015/06/from-asm-js-to-webassembly/)“,
    and then you read “WebAssembly LLVM [Backend](https://www.phoronix.com/scan.php?page=news_item&px=LLVM-WebAssembly-RFC)
    Being Discussed”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, Brendan Eich’s recent interview on WebAssembly provides us with this:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has their own compiler so they’ll be doing wasm from a different compiler
    framework, but that’s great.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Given the LLILC work, it would be logically to leverage the LLVM to generate
    wasm
  prefs: []
  type: TYPE_NORMAL
- en: Interesting times.
  prefs: []
  type: TYPE_NORMAL
- en: ~ by mdavey on June 29, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [.NET](https://mdavey.wordpress.com/category/languages/net/), [Languages](https://mdavey.wordpress.com/category/languages/)
  prefs: []
  type: TYPE_NORMAL
