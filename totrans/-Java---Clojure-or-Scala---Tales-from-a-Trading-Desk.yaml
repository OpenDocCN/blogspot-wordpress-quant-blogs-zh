- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-18 06:24:39'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-18 06:24:39'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '!Java = Clojure or Scala | Tales from a Trading Desk'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '!Java = Clojure 或 Scala | 来自交易桌的故事'
- en: 来源：[https://mdavey.wordpress.com/2013/05/30/java-clojure-or-scala/#0001-01-01](https://mdavey.wordpress.com/2013/05/30/java-clojure-or-scala/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2013/05/30/java-clojure-or-scala/#0001-01-01](https://mdavey.wordpress.com/2013/05/30/java-clojure-or-scala/#0001-01-01)
- en: '!Java = Clojure or Scala'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '!Java = Clojure 或 Scala'
- en: Another day with some travel, and time to read the latest ThoughWorks Technology
    [Radar](http://www.thoughtworks.com/radar).  I see both Clojure and Scala are
    in the adopt Languages & Frameworks.  The problem I see for both languages in
    the financial space is that there is still some considerable bias to the Java
    stack from a historical “architecture governance board” perspective, which is
    sometimes a blocker in the worst case, and in other just a speed bump 😦  If you
    can get access to these languages, then clearly the best scenario is to understand
    the language ROI, and leverage the languages as appropriate on an initial project. 
    Then use this project to “market” the benefits within the organisation and gain
    traction.  A quick Google will show that in London alone there are a number (although
    small) of opportunities for [Scala](http://wikimatze.de/benefits-of-scala.html)/[Clojure](http://corfield.org/blog/post.cfm/clojure-in-the-enterprise)
    work within finance, often around “highly distributed, risk and pricing platform”
    projects.  Hopefully the financial communicate will continue to realise that the
    one size fits all language rule that has historically been set within corporations
    for the last n years needs a more frequent review, and that in some cases a revised
    rule partially tied to problem/solution is required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 又是一个旅行的日子，有时间阅读最新的 ThoughtWorks 技术[雷达](http://www.thoughtworks.com/radar)。我发现
    Clojure 和 Scala 都在采用语言与框架之列。在金融领域，这两种语言面临的问题是，从历史上的“架构治理委员会”角度来看，对 Java 栈仍存在相当大的偏见，这在最坏情况下可能成为障碍，而在其他情况下则只是减速带
    😦 如果能接触到这些语言，显然最佳情况是理解语言的投资回报率，并在初始项目中适当利用这些语言。然后利用这个项目在组织内部“推广”其好处，并获得动力。快速谷歌一下就会发现，仅在伦敦就有一些（尽管数量不多）金融领域的[Scala](http://wikimatze.de/benefits-of-scala.html)/[Clojure](http://corfield.org/blog/post.cfm/clojure-in-the-enterprise)工作机会，通常围绕“高度分布式、风险和定价平台”项目。希望金融界能继续意识到，过去
    n 年来在企业内部一直沿用的“一刀切”语言规则需要更频繁地审查，并且在某些情况下，需要根据问题/解决方案修订规则。
- en: ~ by mdavey on May 30, 2013.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ~ 由 mdavey 于 2013 年 5 月 30 日发表。
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Posted in [语言](https://mdavey.wordpress.com/category/languages/)
- en: 'Tags: [Clojure](https://mdavey.wordpress.com/tag/clojure/), [Scala](https://mdavey.wordpress.com/tag/scala/)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'Tags: [Clojure](https://mdavey.wordpress.com/tag/clojure/), [Scala](https://mdavey.wordpress.com/tag/scala/)'
