["```\nfor (i in 1:3) {\n  squared <- i ^ 2\n  print(squared)\n}\n#> [1] 1\n#> [1] 4\n#> [1] 9\n```", "```\nresult <- vector(\"numeric\", 3) # prepare a container\nfor (i in 1:3) {\n  squared <- i ^ 2\n  result[i] <- squared         # change to assignment\n}\nresult\n#> [1] 1 4 9\n```", "```\nresult <- data.frame(matrix(nrow = 3, ncol = 2))\ncolnames(result) <- c(\"i\", \"squared\")\nfor (i in 1:3) {\n  squared <- i ^ 2\n  result[i, 1] <- i\n  result[i, 2] <- squared\n}\nresult\n#>   i squared\n#> 1 1       1\n#> 2 2       4\n#> 3 3       9\n```", "```\nlibrary(magicfor)  # Load library\nmagic_for(print)   # Call magic_for()\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  print(squared)\n}\n#> The loop is magicalized with print().\n#> [1] 1\n#> [1] 4\n#> [1] 9\n```", "```\nmagic_result_as_vector()  # Get the result\n#> [1] 1 4 9\n```", "```\nmagic_for(silent = TRUE)\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  cubed <- i ^ 3\n  put(squared, cubed)\n}\n\nmagic_result_as_dataframe()\n#>   i squared cubed\n#> 1 1       1     1\n#> 2 2       4     8\n#> 3 3       9    27\n```", "```\ninstall.packages(\"magicfor\")\n```", "```\nlibrary(magicfor)\n```", "```\nmagic_for()\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  put(squared)\n}\n#> The loop is magicalized with put().\n#> squared: 1\n#> squared: 4\n#> squared: 9\n```", "```\nx <- 1\nput(x)\n#> x: 1\n```", "```\nmagic_result_as_vector()\n#> [1] 1 4 9\n```", "```\nmagic_for(cat)\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  cat(squared, \" \")\n}\n#> The loop is magicalized with cat().\n#> 1  4  9\n```", "```\nmagic_for(progress = TRUE)\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  put(squared)\n}\n```", "```\n#> |=================================================================| 100%\n```", "```\nmagic_for(test = 2)\n\nfor (i in 1:100) {\n  squared <- i ^ 2\n  put(squared)\n}\n#> The loop is magicalized with put().\n#> squared: 1\n#> squared: 4\n```", "```\nmagic_for(temp = TRUE)\nis_magicalized()\n#> [1] TRUE\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  put(squared)\n}\n#> The loop is temporary magicalized with put().\n#> squared: 1\n#> squared: 4\n#> squared: 9\n\nis_magicalized()\n#> [1] FALSE\n```", "```\nmagic_for()\nis_magicalized()\n#> [1] TRUE\n\nmagic_free()\nis_magicalized()\n#> [1] FALSE\n```", "```\nmagic_for(silent = TRUE)\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  put(squared)\n}\n\nmagic_result_as_vector()\n#> [1] 1 4 9\n\nmagic_free()\nmagic_result_as_vector()\n#> NULL\n```", "```\nmagic_for(silent = TRUE)\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  put(squared)\n}\n```", "```\nmagic_result()\n#> $squared\n#> $squared[[1]]\n#> [1] 1\n#> \n#> $squared[[2]]\n#> [1] 4\n#> \n#> $squared[[3]]\n#> [1] 9\n```", "```\nmagic_result_as_vector()\n#> [1] 1 4 9\n```", "```\nmagic_result_as_dataframe()\n#>   i squared\n#> 1 1       1\n#> 2 2       4\n#> 3 3       9\n```", "```\nx <- 2\ny <- 3\nput(x)\n#> x: 2\nput(x, y)\n#> x: 2, y: 3\nput(x, x ^ 2, x ^ 3)\n#> x: 2, x^2: 4, x^3: 8\nput(x, squared = x ^ 2, cubed = x ^ 3)\n#> x: 2, squared: 4, cubed: 8\n```", "```\nmagic_for()\n\nfor (i in 1:3) {\n  put(x = i, squared = i ^ 2, cubed = i ^ 3)\n}\n#> The loop is magicalized with put().\n#> x: 1, squared: 1, cubed: 1\n#> x: 2, squared: 4, cubed: 8\n#> x: 3, squared: 9, cubed: 27\n\nmagic_result_as_dataframe(F)\n#>   x squared cubed\n#> 1 1       1     1\n#> 2 2       4     8\n#> 3 3       9    27\n```", "```\nmagic_for()\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  squared\n}\n#> The loop is magicalized with put().\n\nmagic_result_as_vector()\n#> [1] 1 4 9\n```", "```\nmagic_for()\n\nfor (i in 1:3) {\n  squared <- i ^ 2\n  if(i == 3) put(squared)\n}\n#> The loop is magicalized with put().\n#> squared: 9\n\nmagic_result_as_vector()\n#> [1] NA NA  9\n```", "```\nmagic_for()\n\nfor (i in 1:2) {\n  for (j in 1:2) {\n    put(i, j, i * j)\n  }\n}\n#> The loop is magicalized with put().\n#> i: 1, j: 1, i*j: 1\n#> i: 1, j: 2, i*j: 2\n#> i: 2, j: 1, i*j: 2\n#> i: 2, j: 2, i*j: 4\n\nmagic_result_as_vector()\n#> list()\n```"]