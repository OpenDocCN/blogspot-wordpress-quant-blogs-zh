["```\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct Tree\n{\n    char data;\n    Tree *left, *right, *parent;\n\n    Tree(char a){\n        data = a;\n        left = NULL; right = NULL; parent = NULL;\n    }\n};\n\nTree* insertTreeNode(Tree* node, char data){\n    if(node == NULL){\n        Tree* newNode = new Tree(data);\n        return newNode;        \n    }\n    else if(data <= node->data){\n        node->left = insertTreeNode(node->left, data);\n        node->left->parent = node;\n    }\n    else{\n        node->right = insertTreeNode(node->right, data);\n        node->right->parent = node;\n    }\n    return node;\n}\n\nbool isBST(Tree* root){\n    if (root == NULL)\n        return 1;\n    else if (!isBST(root->left) || !isBST(root->right))\n        return 0;\n    else if(root->left){\n        if(root->left->data > root->data)\n            return 0;\n    }\n    else if(root->right){\n        if(root->data >= root->right->data)\n            return 0;    \n    }\n        return 1;\n}\n\nint main ()\n{\n    char ch, ch1, ch2;\n    Tree *found=NULL, *succ=NULL, *pred=NULL, *ancestor=NULL;\n    char charArr[9] = {'A','B','C','D','E','F','G','H','I'};\n\n    Tree* root=NULL;\n//    for (int i=0;i<sizeof(charArr)/sizeof(char);++i)\n//        insertTreeNode(root,charArr[i]);\n    root = insertTreeNode(root,'B');\n    root->left = insertTreeNode(root->left,'A');\n\n    /* is the tree BST? */\n    cout<< \"Binary Search Tree?: \"<< ( isBST(root) ? 'Y':'N') <<endl;\n\n    return 0;\n}\n\n//Highlighted at http://tohtml.com/cpp/\n//Bred 3 + C++\n//http://www.bogotobogo.com/cplusplus/cpptut.php\n```"]