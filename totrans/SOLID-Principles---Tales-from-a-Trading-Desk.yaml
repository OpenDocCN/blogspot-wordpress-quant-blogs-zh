- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:52:00'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: SOLID Principles | Tales from a Trading Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mdavey.wordpress.com/2014/03/25/solid-principles/#0001-01-01](https://mdavey.wordpress.com/2014/03/25/solid-principles/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SOLID Principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you take the SOLID [principles](http://www.infoq.com/news/2014/03/oo-functional-programming)
    to their extremes, you arrive at something that makes Functional Programming look
    quite attractive
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[SOLID](http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/),
    particularly the SRP and ISP, leads you towards code bases with many fine-grained
    classes with a single method. Such objects represent data with behaviour, but
    can also be modelled as behaviour with data: Closures. When that happens repeatedly,
    it’s time to make the switch to a Functional Programming Language like F#.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ~ by mdavey on March 25, 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  prefs: []
  type: TYPE_NORMAL
