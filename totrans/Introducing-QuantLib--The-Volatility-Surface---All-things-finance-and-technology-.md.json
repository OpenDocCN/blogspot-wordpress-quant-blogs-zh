["```\n #include <cstdlib>\n#include <iostream>\n#define BOOST_AUTO_TEST_MAIN\n#include <boost/test/unit_test.hpp>\n#include <ql/quantlib.hpp>\n#include <vector>\n#include <boost/assign/std/vector.hpp>\n\n BOOST_AUTO_TEST_CASE(testVolatilitySurface) {\n\n   using namespace boost::assign;\n   std::vector strikes;\n   strikes += 1650.0, 1660.0, 1670.0, 1675.0, 1680.0;\n\n   std::vector expirations;\n   expirations += Date(20, Month::Dec, 2013), Date(17, \n        Month::Jan, 2014), Date(21, Month::Mar, 2014),\n        Date(20, Month::Jun, 2014), Date(19, Month::Sep, 2014);\n\n   Matrix volMatrix(strikes.size(), expirations.size());\n\n   //1650 - Dec, Jan, Mar, Jun, Sep\n   volMatrix[0][0] = .15640;\n   volMatrix[0][1] = .15433;\n   volMatrix[0][2] = .16079;\n   volMatrix[0][3] = .16394;\n   volMatrix[0][4] = .17383;\n\n   //1660 - Dec, Jan, Mar, Jun, Sep\n   volMatrix[1][0] = .15343;\n   volMatrix[1][1] = .15240;\n   volMatrix[1][2] = .15804;\n   volMatrix[1][3] = .16255;\n   volMatrix[1][4] = .17303;\n\n   //1670 - Dec, Jan, Mar, Jun, Sep\n   volMatrix[2][0] = .15128;\n   volMatrix[2][1] = .14888;\n   volMatrix[2][2] = .15512;\n   volMatrix[2][3] = .15944;\n   volMatrix[2][4] = .17038;\n\n   //1675 - Dec, Jan, Mar, Jun, Sep\n   volMatrix[3][0] = .14798;\n   volMatrix[3][1] = .14906;\n   volMatrix[3][2] = .15522;\n   volMatrix[3][3] = .16171;\n   volMatrix[3][4] = .16156;\n\n   //1680 - Dec, Jan, Mar, Jun, Sep\n   volMatrix[4][0] = .14580;\n   volMatrix[4][1] = .14576;\n   volMatrix[4][2] = .15364;\n   volMatrix[4][3] = .16037;\n   volMatrix[4][4] = .16042;\n\n   Date evaluationDate(30, Month::Sep, 2013);\n   Settings::instance().evaluationDate() = evaluationDate;\n   Calendar calendar = UnitedStates(UnitedStates::NYSE);\n   DayCounter dayCounter = ActualActual(); \n   BlackVarianceSurface volatilitySurface(Settings::instance().evaluationDate(), \n        calendar, expirations, strikes,     volMatrix, dayCounter);\t\t\n   volatilitySurface.enableExtrapolation(true);\n\n   std::cout << \"Using standard bilinear interpolation...\" << std::endl;\t\t\n   Real dec1650Vol = volatilitySurface.blackVol(expirations[0], 1650.0, true);\n   std::cout << boost::format(\"Dec13 1650.0 volatility: %f\") % dec1650Vol << std::endl;\n\n   Real dec1655Vol = volatilitySurface.blackVol(expirations[0], 1655.0, true);\n   std::cout << boost::format(\"Dec13 1655.0 volatility (interpolated): %f\") % dec1655Vol << std::endl;\n\n   Real dec1685Vol = volatilitySurface.blackVol(expirations[0], 1685.0, true);\n   std::cout << boost::format(\"Dec13 1685.0 volatility (interpolated): %f\") % dec1685Vol << std::endl;\n\n   Real jun1655Vol = volatilitySurface.blackVol(expirations[3], 1655.0, true);\n   std::cout << boost::format(\"Jun14 1655.0 volatility (interpolated): %f\") % jun1655Vol << std::endl;\n\n   Real sep1680Vol = volatilitySurface.blackVol(expirations[4], 1680.0, true);\n   std::cout << boost::format(\"Sep14 1680.0 volatility: %f\") % sep1680Vol << std::endl;\n\n   //change interpolator to bicubic splines\n   volatilitySurface.setInterpolation<Bicubic>();\n\n   std::cout << \"Using bicubic spline interpolation...\" << std::endl;\n   dec1650Vol = volatilitySurface.blackVol(expirations[0], 1650.0, true);\n   std::cout << boost::format(\"Dec13 1650.0 volatility: %f\") % dec1650Vol << std::endl;\n\n   dec1655Vol = volatilitySurface.blackVol(expirations[0], 1655.0, true);\n   std::cout << boost::format(\"Dec13 1655.0 volatility (interpolated): %f\") % dec1655Vol << std::endl;\n\n   dec1685Vol = volatilitySurface.blackVol(expirations[0], 1685.0, true);\n   std::cout << boost::format(\"Dec13 1685.0 volatility (interpolated): %f\") % dec1685Vol << std::endl;\n\n   jun1655Vol = volatilitySurface.blackVol(expirations[3], 1655.0, true);\n   std::cout << boost::format(\"Jun14 1655.0 volatility (interpolated): %f\") % jun1655Vol << std::endl;\n\n   sep1680Vol = volatilitySurface.blackVol(expirations[4], 1680.0, true);\n   std::cout << boost::format(\"Sep14 1680.0 volatility: %f\") % sep1680Vol << std::endl; \n\n   //write out data points for gnuplot surface plot (using last interpolator - bicubic splines)\n   std::ofstream volSurfaceFile;\n   volSurfaceFile.open(\"/tmp/volsurface.dat\", std::ios::out);\n\n   for (Date expiration: expirations) {\n      for (Real strike = strikes[0] - 5.0; strike <= strikes[4] + 5.0; ++strike) {\n         Real volatility = volatilitySurface.blackVol(expiration, strike, true);\n         volSurfaceFile << boost::format(\"%f %f %f\") % strike % \n            dayCounter.dayCount(Settings::instance().evaluationDate(), \n            expiration) % volatility << std::endl;\n      }\n   }\n\n   volSurfaceFile.close();\n\n}\n\n/* gnuplot script to generate 3D surface plot\n\nset key top center\nset xlabel \"Strike\"\nset ylabel \"Time to maturity (days)\"\nset border 4095\nset ticslevel 0\nset dgrid3d 41,41\nset pm3d \nsplot \"volsurface.dat\" u 1:2:3 with lines title \"ES Volatility Surface\"\n\n*/ \n```"]