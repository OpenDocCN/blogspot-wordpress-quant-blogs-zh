["```\n(ns ^:figwheel-always clojurefxtitle.core\n    (:require\n              [reagent.core :as reagent :refer [atom]]\n              [clojurefxtitle.pricecomponent :as t]\n    ))\n\n(enable-console-print!)\n\n(defonce app-state (atom {:text \"FX Dashboard\"\n                        :counters {\"USDGBP\" {:id 1\n                                             :name \"USDGBP\"}\n                                   \"USDEUR\" {:id 2\n                                             :name \"USDEUR\"}\n                                   \"USDJPY\" {:id 3\n                                             :name \"USDJPY\"}\n                                  }\n                          }))\n\n(defn pricetitle-component []\n  [:div\n    ])\n\n(defn fxtile [c]\n  [:div {:style {:background \"green\" :width \"300\" :float \"left\" :border-style \"solid\"} }\n    [:h1 {:style {:text-align \"center\" :margin \"0\" }} (:name c) ]\n      [pricetitle-component]\n        [:div\n          [t/price-component (:name c)  \"Buy\"]\n          [t/price-component (:name c)  \"Sell\"]\n        ]\n      ])\n\n(defn dashboard []\n  [:div {:style {:width \"100%\"} }\n    (for [counter (vals (:counters @app-state))]\n      ^{:key (:name counter)} [fxtile counter]\n    )\n  ]\n)\n\n(reagent/render-component [dashboard]\n                          (. js/document (getElementById \"app\")))\n\n(defn on-js-reload []\n)\n\n```", "```\n(defn handler [response]\n  (println \"handler: \" (str response))\n)\n\n(defn error-handler  [{:keys [status status-text]}]\n  (println \"error handler: \" (str \"something bad happened: \" status \" \" status-text))\n)\n\n(defn my-click-handler [ccypair side price]\n  (println (str \"order \" ccypair \" \" side \" \" price))\n  (POST \"/order\"\n          {:params {:price price\n                    :side side\n                    :ccypair ccypair}\n           :handler handler\n           :format :json\n           :error-handler error-handler})    \n  )\n\n(defn rand-price [val]\n  (rand-nth val))\n\n(defn price-component [ccypair side]\n  (let [seconds-elapsed (atom 0)\n       whole_number (range 95000 100000)]\n    (fn []\n      (js/setTimeout #(reset! seconds-elapsed (rand-price whole_number)) 1000)\n;;      (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n      (let [price (/ @seconds-elapsed 1000)]\n        [:button {:style {:background \"red\" :width \"150\" :float \"left\" :text-align \"center\"}\n           :on-click #(my-click-handler ccypair side price)}\n         side (gstring/format \" %0.3f\" price )])))\n       )\n\n```", "```\n(ns server\n  (:require\n   [ring.middleware.resource :refer [wrap-resource]]\n   [ring.middleware.json :as middleware]\n   [ring.middleware.file-info :refer [wrap-file-info]]\n   [ring.util.response :refer [redirect]]\n   [compojure.handler :as handler]\n   [compojure.core :refer :all]\n   [compojure.route :as route]\n   ))\n\n(defn handler [request]\n  (case (request :uri)\n    \"/\" (redirect \"index.html\")\n  )\n)\n\n(defn order-handler [req]\n;;  (let [body (-> req :body)]\n;;    (println \"Request: \" req \" Body: \" body)\n;;  )\n  (let [price (-> req :params :price)\n    ccypair (-> req :params :ccypair)\n    side (-> req :params :side)]\n      (println (str \"Order: \" price side ccypair)) \n  )\n\n  {:status 200 }\n)  \n\n(defroutes app-routes\n  (GET \"/\" [] (redirect \"index.html\"))\n  (POST \"/order\" [] order-handler) \n  (route/not-found \"<h1>Custom - Page not found</h1>\"))\n\n(def app\n  (-> (handler/api app-routes)\n      (middleware/wrap-json-params)\n      (middleware/wrap-json-response)))\n\n```"]