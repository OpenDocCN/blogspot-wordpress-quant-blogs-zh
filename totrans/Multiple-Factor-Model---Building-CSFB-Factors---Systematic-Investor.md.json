["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Find Sectors for each company in DOW 30\n\t#****************************************************************** \n\ttickers = spl('XLY,XLP,XLE,XLF,XLV,XLI,XLB,XLK,XLU')\n\ttickers.desc = spl('ConsumerCyclicals,ConsumerStaples,Energy,Financials,HealthCare,Industrials,Materials,Technology,Utilities')\n\n\tsector.map = c()\n\tfor(i in 1:len(tickers)) {\n\t\tsector.map = rbind(sector.map, \n\t\t\t\tcbind(sector.spdr.components(tickers[i]), tickers.desc[i])\n\t\t\t)\n\t}\n\tcolnames(sector.map) = spl('ticker,sector')\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod,abind')\t\t\n\ttickers = dow.jones.components()\n\n\tsectors = factor(sector.map[ match(tickers, sector.map[,'ticker']), 'sector'])\n\t\tnames(sectors) = tickers\n\n\t# get fundamental data\n\tload(file='data.fund.Rdata')\n\n\t# get pricing data\n\tload(file='data.Rdata')\n\n\t#*****************************************************************\n\t# Combine fundamental and pricing data\n\t#****************************************************************** \t\n\tfor(i in tickers) {\n\t\tfund = data.fund[[i]]\n\t\tfund.date = date.fund.data(fund)\n\t\t\tnperiods = ncol(fund)\n\n\t\t# D - holds all data to be merged with pricing data\n\t\tD = list()\n\n\t\t#--------------------------------------------------------------\n\t\t# Data for Traditional and Relative Value\t\n\t\t#--------------------------------------------------------------\n\n\t\t# Earnings per Share\t\t\n\t\tD$EPS = get.fund.data('Diluted EPS from Total Operations', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Sales, exception not available for financial service firms\n\t\tD$SALE = get.fund.data('total revenue', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Common Shares Outstanding\n\t\tD$CSHO = get.fund.data('total common shares out', fund, fund.date)\n\n\t\t# Common Equity\n\t\tD$CEQ = get.fund.data('total equity', fund, fund.date)\n\n\t\t# Dividends\n\t\tD$DV.PS = get.fund.data('dividends paid per share', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Cash Flow\n\t\tD$CFL = get.fund.data('net cash from operating activities', fund, fund.date, cash.flow=T, is.12m.rolling=T)\n\n\t\t#--------------------------------------------------------------\n\t\t# Data for Historical Growth\t\n\t\t#--------------------------------------------------------------\n\n\t\t# Consecutive Quarters of Positive Changes in Trailing 12 Month Cash Flow\n\t\tD$CFL.CON.CHG = consecutive.changes(D$CFL)\t\t\n\t\t\t# check\n\t\t\t#merge(D$CFL, sign(diff(D$CFL)), consecutive.changes(D$CFL), consecutive.changes(D$CFL,F))\n\n\t\t# Consecutive Quarters of Positive Change in Quarterly Earnings\n\t\tD$EPS.CON.CHG = consecutive.changes(D$EPS)\n\n\t\t# 12 Month Change in Quarterly Cash Flow\n\t\ttemp = get.fund.data('net cash from operating activities', fund, fund.date, cash.flow=T)\n\t\tD$CFL.CHG = temp / mlag(temp,4)\n\n\t\t# 3 Year Average Annual Sales Growth\n\t\tD$SALE.3YR.GR = D$SALE\n\t\tif(!all(is.na(D$SALE))) D$SALE.3YR.GR = SMA(ifna(D$SALE / mlag(D$SALE,4) - 1,NA), 3*4)\n\n\t\t# 3 Year Average Annual Earnings Growth\n\t\tD$EPS.3YR.GR = SMA(D$EPS / mlag(D$EPS,4) - 1, 3*4)\n\n\t\t# 12 Quarter Trendline in Trailing 12 Month Earnings\t\t\n\t\tD$EPS.TREND = D$EPS * NA\n\t\t\tD$EPS.TREND[12:nperiods] = sapply(12:nperiods, function(i) beta.degree(ols(cbind(1,1:12), D$EPS[(i-12+1):i])$coefficients[2]))\n\n\t\t# Slope of Trend Line Through Last 4 Quarters of Trailing 12M Cash Flows\t\t\n\t\tD$CFL.TREND = D$CFL * NA\n\t\t\tD$CFL.TREND[4:nperiods] = sapply(4:nperiods, function(i) beta.degree(ols(cbind(1,1:4), D$CFL[(i-4+1):i])$coefficients[2]))\n\n\t\t#--------------------------------------------------------------\n\t\t# Data for Profit Trends\t\n\t\t#--------------------------------------------------------------\n\t\tRECT = get.fund.data('receivables', fund, fund.date)\n\t\tINVT = get.fund.data('inventories', fund, fund.date)\n\n\t\tD$AT = get.fund.data('total assets', fund, fund.date)\n\t\tXSGA = get.fund.data('Selling, General & Administrative (SG&A) Expense', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Consecutive Quarters of Declines in (Receivables+Inventories) / Sales\n\t\tD$RS.CON.CHG = consecutive.changes((RECT + INVT) / D$SALE, F)\n\n\t\t# Consecutive Qtrs of Positive Change in Trailing 12M Cash Flow / Sales\n\t\tD$CS.CON.CHG = consecutive.changes(D$CFL/D$SALE)\n\n\t\t# Overhead = sales, general and administrative costs\n\t\t# Consecutive Quarters of Declines in Trailing 12 Month Overhead / Sales\n\t\tD$OS.CON.CHG = consecutive.changes(XSGA/D$SALE, F)\n\n\t\t# (Industry Relative) Trailing 12 Month (Receivables+Inventories) / Sales\n\t\tD$RS = (RECT + INVT) / D$SALE\n\n\t\t# (Industry Relative) Trailing 12 Month Sales / Assets\n\t\tD$SA = D$SALE / D$AT\n\n\t\t# Trailing 12 Month Overhead / Sales\n\t\tD$OS = XSGA / D$SALE\n\n\t\t# Trailing 12 Month Earnings / Sales\n\t\tD$ES = D$EPS / D$SALE\t\t\t\t\t\t\n\n\t\t#--------------------------------------------------------------\n\t\t# Merge Fundamental and Pricing data\n\t\t#--------------------------------------------------------------\n\n\t\t# merge\t\n\t\tdata[[i]] = merge(data[[i]], as.xts(abind(D,along=2), fund.date))\t\t\t\t\t\t\n\t}\n\n\tbt.prep(data, align='keep.all', dates='1995::2011')\n\n\t#*****************************************************************\n\t# Create Factors\n\t#****************************************************************** \n\tprices = data$prices\t\n\t\tprices = bt.apply.matrix(prices, function(x) ifna.prev(x))\n\n\t# re-map sectors\n\tsectors\t= sectors[colnames(prices)]\t\n\n\t# create factors\n\tfactors = list()\n\tfactor.names = list()\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Create Traditional Value\n\t#****************************************************************** \n\tfactors$TV = list()\n\tfactor.names$TV = 'Traditional Value'\n\n\t# Market Value - capitalization\n\tCSHO =  bt.apply(data, function(x) ifna.prev(x[, 'CSHO']))\n\tMKVAL = prices * CSHO\n\n\t# Price / Earnings\n\tEPS = bt.apply(data, function(x) ifna.prev(x[, 'EPS']))\n\tfactors$TV$EP = EPS / prices\n\n\t# Price / Trailing Sales\n\tSALE = bt.apply(data, function(x) ifna.prev(x[, 'SALE']))\t\n\tfactors$TV$SP = SALE / MKVAL\n\n\t# Price / Trailing Cash Flow\n\tCFL = bt.apply(data, function(x) ifna.prev(x[, 'CFL']))\n\tfactors$TV$CFP = CFL / MKVAL\n\n\t# Dividend Yield\n\tDV.PS = bt.apply(data, function(x) ifna.prev(x[, 'DV.PS']))\n\tfactors$TV$DY = DV.PS / prices\n\n\t# Price / Book Value\t\t\n\tCEQ = bt.apply(data, function(x) ifna.prev(x[, 'CEQ']))\n\tfactors$TV$BP = CEQ\t/ MKVAL\n\n\t# Eliminate Price/Sales and Price/Cash Flow for financial firms\n\tfactors$TV$SP[, sectors == 'Financials'] = NA\n\tfactors$TV$CFP[, sectors == 'Financials'] = NA\n\n\t#*****************************************************************\n\t# Create Historical Growth\n\t#****************************************************************** \n\tfactors$HG = list()\n\tfactor.names$HG = 'Historical Growth'\n\n\tfor(i in spl('CFL.CON.CHG,EPS.CON.CHG,CFL.CHG,SALE.3YR.GR,EPS.3YR.GR,EPS.TREND,CFL.TREND')) {\n\t\tfactors$HG[[i]] = bt.apply(data, function(x) ifna.prev(x[, i]))\n\t}\n\n\t#*****************************************************************\n\t# Create Profit Trends\n\t#****************************************************************** \n\tfactors$PT = list()\t\t\n\tfactor.names$PT = 'Profit Trends'\t\n\n\tfor(i in spl('RS.CON.CHG,CS.CON.CHG,OS.CON.CHG,RS,SA,OS,ES')) {\n\t\tfactors$PT[[i]] = bt.apply(data, function(x) ifna.prev(x[, i]))\n\t}\n\n\t#*****************************************************************\n\t# Create Price Momentum\n\t#****************************************************************** \n\tfactors$PM = list()\n\tfactor.names$PM = 'Price Momentum'\t\n\n\t# find week ends\n\tweek.ends = endpoints(prices, 'weeks')\n\t\tweek.prices = prices[week.ends,]\n\t\tweek.nperiods = nrow(week.prices)\n\n\t#Slope of 52 Week Trend Line\n\tfactors$PM$S52W.TREND = bt.apply.matrix(week.prices, function(x) {\n\t\tc(rep(NA,51),\n\t\tsapply(52:week.nperiods, function(i) beta.degree(ols(cbind(1,1:52), x[(i - 52 + 1):i])$coefficients[2]))\n\t\t)})\n\n\t#4/52 Week Price Oscillator\n\tfactors$PM$PP04.52W = bt.apply.matrix(week.prices, EMA, 4) / bt.apply.matrix(week.prices, EMA, 52)\n\n\t#39 Week Return\n\tfactors$PM$R39W = week.prices / mlag(week.prices, 39)\n\n\t#51 Week Volume Price Trend\n\t# compute weekly volume\n\ttemp = bt.apply(data, function(x) cumsum(ifna(Vo(x),0)))\n\ttemp = temp[week.ends,]\n\t\tweek.volume = temp - mlag(temp)\t\t\n\ttemp = (week.prices - mlag(week.prices)) * week.volume\n\tfactors$PM$VPT51W = bt.apply.matrix(temp, runSum, 51)\n\n\t# Convert weekly to daily\n\tfor(i in 1:len(factors$PM)) {\n\t\ttemp = prices * NA\n\t\ttemp[week.ends,] = factors$PM[[i]]\n\t\tfactors$PM[[i]] = bt.apply.matrix(temp, function(x) ifna.prev(x))\n\t}\n\n\t#Percent Above 260 Day Low\n\tfactors$PM$P260LOW = prices / bt.apply.matrix(prices, runMin, 260)\n\n\t# Flip sign\n\tfor(i in names(factors$PM)) factors$PM[[i]] = -factors$PM[[i]]\n\n\t#*****************************************************************\n\t# Create Price Reversal\n\t#****************************************************************** \n\tfactors$PR = list()\n\tfactor.names$PR = 'Price Reversal'\t\n\n\t#5 Day Industry Relative Return\n\tfactors$PR$r5DR = prices/mlag(prices, 5)\n\t\tfactors$PR$r5DR = factors$PR$r5DR / sector.mean(factors$PR$r5DR, sectors)\n\n\t#5 Day Money Flow / Volume\n\tfactors$PR$MFV = bt.apply(data, function(x) {\n\t\tMFI(cbind(ifna.prev(Hi(x)),ifna.prev(Lo(x)),ifna.prev(Cl(x))), 5) / ifna.prev(Vo(x))\n\t})\n\n\t#10 Day MACD - Signal Line\n\tfactors$PR$MACD = bt.apply.matrix(prices, function(x) {\n\t\ttemp=MACD(x, 10)\n\t\ttemp[, 'macd'] - temp[, 'signal']\n\t\t})\t\t\n\n\t#14 Day RSI (Relative Strength Indicator)\n\tfactors$PR$RSI = bt.apply.matrix(prices, RSI, 14)\n\n\t#14 Day Stochastic\n\tfactors$PR$STOCH = bt.apply(data, function(x) {\n\t\tstoch(cbind(ifna.prev(Hi(x)),ifna.prev(Lo(x)),ifna.prev(Cl(x))),14)[,'slowD']\n\t})\n\n\t#4 Week Industry Relative Return\n\tfactors$PR$rR4W = week.prices / mlag(week.prices,4)\n\t\tfactors$PR$rR4W = factors$PR$rR4W / sector.mean(factors$PR$rR4W, sectors)\n\n\t\t# Convert weekly to daily\n\t\ttemp = prices * NA\n\t\ttemp[week.ends,] = factors$PR$rR4W\n\t\tfactors$PR$rR4W = bt.apply.matrix(temp, function(x) ifna.prev(x))\n\n\t# VOMO - Volume x Momentum\n\tvolume = bt.apply(data, function(x) ifna.prev(Vo(x)))\n\tfactors$PR$VOMO = (prices / mlag(prices,10) - 1) * bt.apply.matrix(volume, runMean, 22) / bt.apply.matrix(volume, runMean, 66)\n\n\t# Flip sign\n\tfor(i in names(factors$PR)) factors$PR[[i]] = -factors$PR[[i]]\n\n\t#*****************************************************************\n\t# Create Small Size\n\t#****************************************************************** \t\t\n\tfactors$SS = list()\n\tfactor.names$SS = 'Small Size'\t\t\n\n\t#Log of Market Capitalization\n\tfactors$SS$MC = log(MKVAL)\n\n\t#Log of Market Capitalization Cubed\n\tfactors$SS$MC3 = log(MKVAL)^3\n\n\t#Log of Stock Price\n\tfactors$SS$P = log(prices)\n\n\t#Log of Total Assets\n\tfactors$SS$AT = log(bt.apply(data, function(x) ifna.prev(x[, 'AT'])))\n\n\t#Log of Trailing-12-Month Sales\n\tfactors$SS$SALE = log(bt.apply(data, function(x) ifna.prev(x[, 'SALE'])))\n\n\t# Flip sign\n\tfor(i in names(factors$SS)) factors$SS[[i]] = -factors$SS[[i]]\n\n\t#*****************************************************************\n\t# Convert to monthly\n\t#****************************************************************** \n\t# find month ends\n\tmonth.ends = endpoints(prices, 'months')\n\n\tprices = prices[month.ends,]\n\t\tn = ncol(prices)\n\t\tnperiods = nrow(prices)\n\n\tret = prices / mlag(prices) - 1\n\t\tnext.month.ret = mlag(ret, -1)\n\n\tMKVAL = MKVAL[month.ends,]\n\n\tfor(j in 1:len(factors)) {\t\n\t\tfor(i in 1:len(factors[[j]])) {\n\t\t\tfactors[[j]][[i]] = factors[[j]][[i]][month.ends,]\t\n\t\t\tfactors[[j]][[i]][] = ifna(factors[[j]][[i]],NA)\n\t\t}\n\t}\n\n\t#*****************************************************************\n\t# Create Relative Value\n\t#****************************************************************** \n\tfactors$RV = list()\n\tfactor.names$RV = 'Relative Value'\t\t\n\n\t# relative \n\tfor(i in spl('EP,SP,CFP')) {\n\t\tfactors$RV[[paste('r',i,sep='')]] = factors$TV[[i]] / sector.mean(factors$TV[[i]], sectors) \t\t\n\t}\n\n\t# spreads, 5 Year Avg = 60 months\n\tfor(i in spl('rEP,rSP,rCFP')) {\n\t\tfactors$RV[[paste('s',i,sep='')]] = factors$RV[[i]] - \n\t\tapply(factors$RV[[i]], 2, function(x) if(all(is.na(x))) x else SMA(x,60) )\n\t}\n\n\t#*****************************************************************\n\t# Profit Trends (Relative)\n\t#****************************************************************** \t\n\t# relative \n\tfor(i in spl('RS,SA')) {\n\t\tfactors$PT[[paste('r',i,sep='')]] = factors$PT[[i]] / sector.mean(factors$PT[[i]], sectors)\n\t}\t\t\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Normalize and add Average factor\n\t#****************************************************************** \n\tfor(j in names(factors)) {\n\t\tfactors[[j]] = normalize.normal(factors[[j]])\n\t\tfactors[[j]] = add.avg.factor(factors[[j]])\n\t}\n\n\t#*****************************************************************\n\t# Create Composite Average factor\n\t#****************************************************************** \t\n\tfactors.avg = list()\n\tfor(j in names(factors)) factors.avg[[j]] = factors[[j]]$AVG\n\n\tfactors.avg = add.avg.factor(factors.avg)\n\n\t#*****************************************************************\n\t# Backtest qutiles and qutile spread\n\t#****************************************************************** \n\tplot.quantiles(factors.avg, next.month.ret, 'Average')\n\n\tplot.bt.quantiles(factors.avg$AVG, next.month.ret, 'Composite Average', data)\n\n```", "```\n\n\t#*****************************************************************\n\t# Save CSFB factors to be used later to create multiple factor Risk Model\n\t#****************************************************************** \n\tsave(data, sectors, factors.avg, next.month.ret, file='data.factors.Rdata')\n\t\t# remove Composite Average factor\n\t\tfactors.avg = factors.avg[which(names(factors.avg) != 'AVG')]\n\n\t#*****************************************************************\n\t# Run cross sectional regression and create Alpha model\n\t#****************************************************************** \n\tnperiods = nrow(next.month.ret)\n\tn = ncol(next.month.ret)\n\n\t# create matrix for each factor\n\tfactors.matrix = abind(factors.avg, along = 3)\t\n\tall.data = factors.matrix\n\n\t# betas\n\tbeta = all.data[,1,] * NA\n\n\t# append next.month.ret to all.data\t\t\t\n\tall.data = abind(next.month.ret, all.data, along = 3)\n\t\tdimnames(all.data)[[3]][1] = 'Ret'\n\n\t# estimate betas (factor returns)\n\tfor(t in 12:(nperiods-1)) {\n\t\ttemp = all.data[t:t,,]\n\t\tx = temp[,-1]\n\t\ty = temp[,1]\n\t\tbeta[(t+1),] = lm(y~x-1)$coefficients\n\t}\n\n\t# create Alpha return forecasts\n\talpha = next.month.ret * NA\n\n\tfor(t in 18:(nperiods-1)) {\n\t\t# average betas over the last 6 months\n\t\tcoef = colMeans(beta[(t-5):t,],na.rm=T)\n\t\talpha[t,] = rowSums(all.data[t,,-1] * t(repmat(coef, 1,n)), na.rm=T)\t\n\t}\n\n\t#*****************************************************************\n\t# Backtest qutiles and qutile spread\n\t#****************************************************************** \n\tlayout(1:2)\n\ttemp = compute.quantiles(alpha, next.month.ret, plot=T)\n\tplot.bt.quantiles(alpha, next.month.ret, 'Alpha', data)\n\n```", "```\n\n\tfor(t in 18:(nperiods-1)) {\n\t\t# average betas over the last 6 months\n\t\tcoef = colMeans(beta[(t-5):t,],na.rm=T)\n\n\t\tcoef = iif(coef > 0, coef, 0)\n\n\t\talpha[t,] = rowSums(all.data[t,,-1] * t(repmat(coef, 1,n)), na.rm=T)\t\n\t}\n\n```"]