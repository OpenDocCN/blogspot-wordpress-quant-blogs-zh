["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\n\n\ttickers = spl('SPY,EFA,EWJ,EEM,IYR,RWX,IEF,TLT,DBC,GLD')\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\t\t\t\t\t\n\tbt.prep(data, align='keep.all', dates='2004:12::')\n\n    #*****************************************************************\n    # Code Strategies\n    #******************************************************************\n    prices = data$prices  \n    n = ncol(prices)\n\n    models = list()\n\n    # find period ends\n    period.ends = endpoints(prices, 'months')\n        period.ends = period.ends[period.ends > 0]\n\n\t# Adaptive Asset Allocation parameters\n\tn.top = 5\t\t# number of momentum positions\n\tn.mom = 6*22\t# length of momentum look back\n\tn.vol = 1*22 \t# length of volatility look back   \n\n```", "```\n\n    #*****************************************************************\n    # Equal Weight\n    #******************************************************************\n    data$weight[] = NA\n        data$weight[period.ends,] = ntop(prices[period.ends,], n)   \n    models$equal.weight = bt.run.share(data, clean.signal=F)\n\n    #*****************************************************************\n    # Volatliliy Position Sizing\n    #******************************************************************\n    ret.log = bt.apply.matrix(prices, ROC, type='continuous')\n    hist.vol = bt.apply.matrix(ret.log, runSD, n = n.vol)\n\n    adj.vol = 1/hist.vol[period.ends,]\n\n    data$weight[] = NA\n        data$weight[period.ends,] = adj.vol / rowSums(adj.vol, na.rm=T)    \n    models$volatility.weighted = bt.run.share(data, clean.signal=F)\n\n    #*****************************************************************\n    # Momentum Portfolio\n    #*****************************************************************\n    momentum = prices / mlag(prices, n.mom)\n\n    data$weight[] = NA\n        data$weight[period.ends,] = ntop(momentum[period.ends,], n.top)   \n    models$momentum = bt.run.share(data, clean.signal=F)\n\n    #*****************************************************************\n    # Combo: weight positions in the Momentum Portfolio according to Volatliliy\n    #*****************************************************************\n    weight = ntop(momentum[period.ends,], n.top) * adj.vol\n\n    data$weight[] = NA\n        data$weight[period.ends,] = weight / rowSums(weight, na.rm=T)   \n    models$combo = bt.run.share(data, clean.signal=F,trade.summary = TRUE)\n\n```", "```\n\n    #*****************************************************************   \n    # Adaptive Asset Allocation (AAA)\n    # weight positions in the Momentum Portfolio according to \n    # the minimum variance algorithm\n    #*****************************************************************   \n    weight = NA * prices\n        weight[period.ends,] = ntop(momentum[period.ends,], n.top)\n\n    for( i in period.ends[period.ends >= n.mom] ) {\n    \thist = ret.log[ (i - n.vol + 1):i, ]\n\n\t\t# require all assets to have full price history\n\t\tinclude.index = count(hist)== n.vol      \n\n\t\t# also only consider assets in the Momentum Portfolio\n        index = ( weight[i,] > 0 ) & include.index\n        n = sum(index)\n\n\t\tif(n > 0) {\t\t\t\t\t\n\t\t\thist = hist[ , index]\n\n\t        # create historical input assumptions\n\t        ia = create.historical.ia(hist, 252)\n\t            s0 = apply(coredata(hist),2,sd)       \n\t            ia$cov = cor(coredata(hist), use='complete.obs',method='pearson') * (s0 %*% t(s0))\n\n\t\t\t# create constraints: 0<=x<=1, sum(x) = 1\n\t\t\tconstraints = new.constraints(n, lb = 0, ub = 1)\n\t\t\tconstraints = add.constraints(rep(1, n), 1, type = '=', constraints)       \n\n\t\t\t# compute minimum variance weights\t\t\t\t            \n\t        weight[i,] = 0        \n\t        weight[i,index] = min.risk.portfolio(ia, constraints)\n        }\n    }\n\n    # Adaptive Asset Allocation (AAA)\n    data$weight[] = NA\n        data$weight[period.ends,] = weight[period.ends,]   \n    models$aaa = bt.run.share(data, clean.signal=F,trade.summary = TRUE)\n\n```", "```\n\n    #*****************************************************************\n    # Create Report\n    #******************************************************************    \n    models = rev(models)\n\n    plotbt.custom.report.part1(models)       \n    plotbt.custom.report.part2(models)       \n    plotbt.custom.report.part3(models$combo, trade.summary = TRUE)       \n    plotbt.custom.report.part3(models$aaa, trade.summary = TRUE)       \n\n```"]