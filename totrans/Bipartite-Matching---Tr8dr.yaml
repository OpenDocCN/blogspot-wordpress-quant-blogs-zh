- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-18 15:30:19'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月18日15点30分19秒
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Bipartite Matching | Tr8dr
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二分图匹配 | Tr8dr
- en: 来源：[https://tr8dr.wordpress.com/2011/02/17/bipartite-matching/#0001-01-01](https://tr8dr.wordpress.com/2011/02/17/bipartite-matching/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tr8dr.wordpress.com/2011/02/17/bipartite-matching/#0001-01-01](https://tr8dr.wordpress.com/2011/02/17/bipartite-matching/#0001-01-01)
- en: February 17, 2011 · 6:02 pm
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2011年2月17日，下午6点02分
- en: For very low-level order analysis we try to determine continuity from one order
    to the next as a stream of orders across a period.   This is applicable for orders
    generated by a given trader (algo) that are more-or-less continually in the market.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常低级别的订单分析，我们试图确定从一个订单到下一个订单的连续性，作为一段时间内的订单流。这适用于由给定交易者（算法）生成的几乎连续存在于市场上的订单。
- en: In most cases an order near the top of book has a short lifetime, but an algo
    will maintain continuity through resubmission into the order book at a different
    price level.   This stream of orders is often masked in various ways, but often
    has discernable patterns, depending on the sophistication or consideration towards
    masking this in the algo.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，书籍顶部附近的订单生命周期短，但是算法将通过以不同价格水平重新提交到订单簿中来维持连续性。这一订单流通常以各种方式掩盖，但通常具有可辨别的模式，这取决于算法对掩盖这一情况的复杂程度或考虑。
- en: 'Going from order deletions to new order insertions we want to attempt to match
    up the old and new orders (where applicable), to determine the continuity of an
    order stream.   We therefore want to map from an old-set to a new-set:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从订单删除到新订单插入，我们希望尝试将旧订单和新订单（适用的情况下）进行匹配，以确定订单流的连续性。因此，我们希望从旧集映射到新集：
- en: '[![](img/67eebe4ddeff54636a975fa199e0a88c.png "Screen shot 2011-02-17 at 5.10.30
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-10-30-pm.png)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/67eebe4ddeff54636a975fa199e0a88c.png "2011年2月17日下午5点10分30秒的屏幕截图")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-10-30-pm.png)'
- en: 'However, in order to determine, we have to explore all possible mappings with
    weights between these edges:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了确定，我们必须探索这些边之间的所有可能的带权映射：
- en: '[![](img/5ad0216c28da2d83af8ddaaf07d5ae8f.png "Screen shot 2011-02-17 at 5.15.26
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-15-26-pm.png)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/5ad0216c28da2d83af8ddaaf07d5ae8f.png "2011年2月17日下午5点15分26秒的屏幕截图")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-15-26-pm.png)'
- en: 'The optimal mapping will be one that finds the set of one-to-one edges that
    has maximal weight.   This is a problem in graph theory and optimisation theory.
      This can be expressed rather neatly as a linear constraints problem where we
    have:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最优映射将是找到具有最大权重的一对一边集合。这是一个关于图论和优化理论的问题。这可以相当简洁地表达为一个线性约束问题，我们有：
- en: '[![](img/7772ea8f7e627072781b0992483a0bfe.png "Screen shot 2011-02-17 at 5.42.30
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-42-30-pm.png)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/7772ea8f7e627072781b0992483a0bfe.png "2011年2月17日下午5点42分30秒的屏幕截图")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-42-30-pm.png)'
- en: 'Where Xij is a matrix of 0 or 1, 1 indicating an edge and 0 no edge.  Wij is
    a corresponding matrix of weights for each edge.   Integer (or integral) linear
    programming solutions are classified as NP-hard and do not have an efficient algorithm.
       We will be evaluating these on a relatively small # of orders each time, so
    the cost of a brute force solution is not bad.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其中Xij是一个0或1的矩阵，1表示有边，0表示无边。Wij是每条边的相应权重矩阵。整数（或整体）线性编程解决方案被归类为NP难问题，并且没有有效的算法。我们每次将在相对较小的订单数量上进行评估，因此蛮力解决方案的成本不算太高。
- en: The real trick is in determining the weights, representing the degree of similarity.
     Going further, one may generate a tree of these (that spans out exponentially,
    but is trimmed regularly).   Some decisions on prior matches will be wrong and
    should be reevaluated holistically.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的技巧在于确定权重，代表相似度的程度。进一步地，可以生成这些的树（呈指数扩展，但定期修剪）。一些先前匹配的决策可能是错误的，应该进行全面重新评估。
- en: '[![](img/2d12a624f07102272f6025bba4e524ff.png "Screen shot 2011-02-17 at 5.59.50
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-59-50-pm.png)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/2d12a624f07102272f6025bba4e524ff.png "2011年2月17日下午5点59分50秒的屏幕截图")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-59-50-pm.png)'
- en: Is it worth the effort?   Depends on what information you are interested in
    and what your game is.   We do a mixture range ultra-high frequency to medium
    frequency.   This is one sub-problem of a bigger picture.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这值得付出努力吗？取决于你对什么信息感兴趣以及你的目标是什么。我们做的是从超高频到中频的混合范围。这是一个更大局的子问题。
- en: Addendum
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 补充说明
- en: I should mention that the worst case brute-force approach involves examining
    combined weights for each permutation of edges.  This is a O(n!) algorithm that
    quickly becomes uncomputable.   For the specific bipartite matching problem, rather
    than the general Integral Linear Programming problem there are much more efficient
    solutions.   One of the simplest (though not the most efficient) is the “[Hungarian
    algorithm](http://en.wikipedia.org/wiki/Hungarian_algorithm)“.   A reader pointed
    out a paper for an “[online” approach](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.64.1078&rep=rep1&type=pdf)
    to matching as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该提到，最坏情况下的暴力算法涉及检查边的每个排列的组合权重。这是一个O(n!)算法，很快变得不可计算。对于特定的二分图匹配问题，与一般的整数线性规划问题相比，有更高效的解决方案。其中一个最简单的（尽管不是最有效的）是“[匈牙利算法](http://en.wikipedia.org/wiki/Hungarian_algorithm)”。一位读者还指出了一篇关于匹配的“[在线方法](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.64.1078&rep=rep1&type=pdf)”的论文。
