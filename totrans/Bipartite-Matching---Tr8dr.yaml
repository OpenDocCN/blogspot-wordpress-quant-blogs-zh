- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 15:30:19'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Bipartite Matching | Tr8dr
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tr8dr.wordpress.com/2011/02/17/bipartite-matching/#0001-01-01](https://tr8dr.wordpress.com/2011/02/17/bipartite-matching/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: February 17, 2011 · 6:02 pm
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: For very low-level order analysis we try to determine continuity from one order
    to the next as a stream of orders across a period.   This is applicable for orders
    generated by a given trader (algo) that are more-or-less continually in the market.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In most cases an order near the top of book has a short lifetime, but an algo
    will maintain continuity through resubmission into the order book at a different
    price level.   This stream of orders is often masked in various ways, but often
    has discernable patterns, depending on the sophistication or consideration towards
    masking this in the algo.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Going from order deletions to new order insertions we want to attempt to match
    up the old and new orders (where applicable), to determine the continuity of an
    order stream.   We therefore want to map from an old-set to a new-set:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/67eebe4ddeff54636a975fa199e0a88c.png "Screen shot 2011-02-17 at 5.10.30
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-10-30-pm.png)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in order to determine, we have to explore all possible mappings with
    weights between these edges:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/5ad0216c28da2d83af8ddaaf07d5ae8f.png "Screen shot 2011-02-17 at 5.15.26
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-15-26-pm.png)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The optimal mapping will be one that finds the set of one-to-one edges that
    has maximal weight.   This is a problem in graph theory and optimisation theory.
      This can be expressed rather neatly as a linear constraints problem where we
    have:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/7772ea8f7e627072781b0992483a0bfe.png "Screen shot 2011-02-17 at 5.42.30
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-42-30-pm.png)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Where Xij is a matrix of 0 or 1, 1 indicating an edge and 0 no edge.  Wij is
    a corresponding matrix of weights for each edge.   Integer (or integral) linear
    programming solutions are classified as NP-hard and do not have an efficient algorithm.
       We will be evaluating these on a relatively small # of orders each time, so
    the cost of a brute force solution is not bad.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The real trick is in determining the weights, representing the degree of similarity.
     Going further, one may generate a tree of these (that spans out exponentially,
    but is trimmed regularly).   Some decisions on prior matches will be wrong and
    should be reevaluated holistically.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/2d12a624f07102272f6025bba4e524ff.png "Screen shot 2011-02-17 at 5.59.50
    PM")](https://tr8dr.wordpress.com/wp-content/uploads/2011/02/screen-shot-2011-02-17-at-5-59-50-pm.png)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Is it worth the effort?   Depends on what information you are interested in
    and what your game is.   We do a mixture range ultra-high frequency to medium
    frequency.   This is one sub-problem of a bigger picture.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这值得付出努力吗？取决于你对什么信息感兴趣以及你的目标是什么。我们做的是从超高频到中频的混合范围。这是一个更大局的子问题。
- en: Addendum
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 补充说明
- en: I should mention that the worst case brute-force approach involves examining
    combined weights for each permutation of edges.  This is a O(n!) algorithm that
    quickly becomes uncomputable.   For the specific bipartite matching problem, rather
    than the general Integral Linear Programming problem there are much more efficient
    solutions.   One of the simplest (though not the most efficient) is the “[Hungarian
    algorithm](http://en.wikipedia.org/wiki/Hungarian_algorithm)“.   A reader pointed
    out a paper for an “[online” approach](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.64.1078&rep=rep1&type=pdf)
    to matching as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该提到，最坏情况下的暴力算法涉及检查边的每个排列的组合权重。这是一个O(n!)算法，很快变得不可计算。对于特定的二分图匹配问题，与一般的整数线性规划问题相比，有更高效的解决方案。其中一个最简单的（尽管不是最有效的）是“[匈牙利算法](http://en.wikipedia.org/wiki/Hungarian_algorithm)”。一位读者还指出了一篇关于匹配的“[在线方法](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.64.1078&rep=rep1&type=pdf)”的论文。
