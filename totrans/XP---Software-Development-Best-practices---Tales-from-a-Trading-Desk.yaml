- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-18 05:48:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-18 05:48:06'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: XP – Software Development Best practices | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XP – 软件开发最佳实践 | 一个交易台的故事
- en: 来源：[https://mdavey.wordpress.com/2014/07/20/xp-software-development-best-practices/#0001-01-01](https://mdavey.wordpress.com/2014/07/20/xp-software-development-best-practices/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2014/07/20/xp-software-development-best-practices/#0001-01-01](https://mdavey.wordpress.com/2014/07/20/xp-software-development-best-practices/#0001-01-01)
- en: XP – Software Development Best practices
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XP – 软件开发最佳实践
- en: iMogital [states](http://www.imogital.com/agile/when-to-use-extreme-programming-xp/)
    quite simply that Scrum/Kanban will not tell your developers how to develop. 
    XP has 12 practices derived from software [engineering](http://agilecoach.typepad.com/agile-coaching/2014/02/evolving-extreme-programming-practice.html)
    best practices – TDD, Paired Programming, Coding Standards being a few.  CodeCentric
    touch on the [same](https://blog.codecentric.de/en/2014/05/agile-engineering-practices-short-overview/)
    issue.  I suspect continuous integration, should really be continuous [delivery](http://www.thoughtworks.com/continuous-delivery)
    these days.  Net out, if your development teams are not familiar with XP, maybe
    its finally time to help them get educated, and move down the XP road.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: iMogital [指出](http://www.imogital.com/agile/when-to-use-extreme-programming-xp/)，简单地说，Scrum/Kanban
    不会告诉你的开发人员如何开发。 XP 源自软件[工程](http://agilecoach.typepad.com/agile-coaching/2014/02/evolving-extreme-programming-practice.html)
    最佳实践的 12 项实践 - TDD、配对编程、编码标准等等。 CodeCentric 也提到了[同样](https://blog.codecentric.de/en/2014/05/agile-engineering-practices-short-overview/)的问题。
    我怀疑，持续集成如今应该真的是持续[交付](http://www.thoughtworks.com/continuous-delivery)。 总的来说，如果你的开发团队不熟悉
    XP，也许现在是帮助他们接受教育，并走上 XP 之路的时候了。
- en: 'InfoQ has a recent [article](http://www.infoq.com/articles/benefit-agile-engineering)
    on engineering practices, offering the following equation:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: InfoQ 最近有一篇关于工程实践的[文章](http://www.infoq.com/articles/benefit-agile-engineering)，提供以下方程式：
- en: Scrum + Extreme Programming (XP) = [Agile](http://www.infoq.com/articles/agile-architecture-applied)
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Scrum + Extreme Programming (XP) = [敏捷](http://www.infoq.com/articles/agile-architecture-applied)
- en: One of the key call-out’s from the InfoQ article is that good engineers don’t
    drop best practices in high stress situations.  Its unfortunate that often when
    there is a time crunch, testing is the first thing to get dropped.  Engineers
    often perceive that due to time pressure, feature complete at any cost is acceptable. 
    Unfortunately, often the team hasn’t asked the hard question back to management/stakeholders
    – you often can’t have your cake and eat it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: InfoQ 文章的一个关键观点是，优秀的工程师在高压情况下不会放弃最佳实践。 不幸的是，通常在时间紧迫时，测试是首先被放弃的。 工程师常常认为，由于时间紧迫，任何代价都可以接受。
    不幸的是，通常团队没有向管理层/利益相关者提出艰难的问题 - 你经常不能两全其美。
- en: ~ by mdavey on July 20, 2014.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ~ 由 mdavey 在 2014 年 7 月 20 日发布。
- en: Posted in [Agile](https://mdavey.wordpress.com/category/agile/)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Posted in [敏捷](https://mdavey.wordpress.com/category/agile/)
