- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '`<!--yml`'
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`category: 未分类`'
- en: 'date: 2024-05-18 06:47:03'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 06:47:03
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`-->`'
- en: 'Introducing QuantLib: The Term Structure of Interest Rates | All things finance
    and technology…'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍QuantLib：利率期限结构|金融与科技事务大全...
- en: 来源：[https://mhittesdorf.wordpress.com/2013/02/25/introducing-quantlib-the-term-structure-of-interest-rates/#0001-01-01](https://mhittesdorf.wordpress.com/2013/02/25/introducing-quantlib-the-term-structure-of-interest-rates/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mhittesdorf.wordpress.com/2013/02/25/introducing-quantlib-the-term-structure-of-interest-rates/#0001-01-01](https://mhittesdorf.wordpress.com/2013/02/25/introducing-quantlib-the-term-structure-of-interest-rates/#0001-01-01)
- en: In the last post of this series, I began talking about QuantLib’s support for
    representing the term structure of interest rates, which is typically referred
    to by finance practitioners as the ‘yield curve’.  Under normal economic conditions,
    the yield curve slopes upward – long term interest rates are higher than short-term
    interest rates.  The following chart graphically depicts the relationship between
    interest rates and time to maturity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列的最后一篇文章中，我开始谈论QuantLib对利率期限结构的支持，金融从业者通常将这称为“收益率曲线”。在正常经济条件下，收益率曲线呈上升趋势——长期利率高于短期利率。下面的图表图形地展示了利率与到期时间之间的关系。
- en: '[![yield_curve](img/b5092c34549fd4e858b517f0b2fdf6fd.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/02/yield_curve.jpeg)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[![yield_curve](img/b5092c34549fd4e858b517f0b2fdf6fd.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/02/yield_curve.jpeg)'
- en: The level, slope and shape of the yield curve are intrinsic to the pricing and
    risk management of bonds and bond portfolios.  To price a bond accurately, or,
    more generally, to compute the present value of future cash flows accurately,
    the interest rate at the time the cash flow occurs must be inferred from the yield
    curve.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 利率曲线的水平、斜率和形状是债券和债券组合定价和风险管理固有的。为了准确地定价债券，或者更一般地说，准确计算未来现金流的现值，必须从收益率曲线中推断出现金流发生时的利率。
- en: So let’s revisit our earlier bond pricing example to see how one would go about
    building a yield curve and pricing a bond with it using QuantLib’s [YieldTermStructure](http://quantlib.org/reference/class_quant_lib_1_1_yield_term_structure.html)
    class.  Consider a 3 year fixed rate bond with a face value of 100 and an interest
    rate of 3% with annual coupons that pay 5% compounded annually.  We’ve already
    seen that the bond’s price is 105.66.  The code below shows how to reproduce this
    price using an explicit yield curve rather than a single, constant rate.  One
    thing to note is that a constant interest rate is the same as a flat yield curve,
    one where the rate is the same at all maturities.  So that we calculate the same
    price as before, 105.66, the example uses QuantLib’s [FlatForward](http://quantlib.org/reference/class_quant_lib_1_1_flat_forward.html)
    class to represent the yield ‘curve’.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们重新审视一下我们之前的债券定价示例，看看如何使用QuantLib的[YieldTermStructure](http://quantlib.org/reference/class_quant_lib_1_1_yield_term_structure.html)类构建收益率曲线并定价债券。考虑一个面值为100的3年固定利率债券，利率为3%，每年支付5%的年息，且每年复利。我们已经知道债券的价格是105.66。下面的代码显示了如何使用显式收益率曲线而不是单一的恒定利率来复制这个价格。需要注意的是，恒定利率与平坦的收益率曲线相同，即所有到期时间的利率都相同。为了计算与之前相同的105.66的价格，示例使用了QuantLib的[FlatForward](http://quantlib.org/reference/class_quant_lib_1_1_flat_forward.html)类来表示收益率“曲线”。
- en: '`#include <cstdlib>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <cstdlib>`'
- en: '#include <iostream>'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <iostream>`'
- en: '#define BOOST_AUTO_TEST_MAIN'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`#define BOOST_AUTO_TEST_MAIN`'
- en: '#include <boost/test/unit_test.hpp>'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <boost/test/unit_test.hpp>`'
- en: '#include <boost/detail/lightweight_test.hpp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <boost/detail/lightweight_test.hpp>`'
- en: '#include <ql/quantlib.hpp>'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <ql/quantlib.hpp>`'
- en: '#include <vector>'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <vector>`'
- en: '#include <ql/instruments/bonds/fixedratebond.hpp>`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include <ql/instruments/bonds/fixedratebond.hpp>`'
- en: '`BOOST_AUTO_TEST_CASE(testPriceBondWithFlatTermStructure) {'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOST_AUTO_TEST_CASE(testPriceBondWithFlatTermStructure) {'
- en: Calendar calendar = UnitedStates(UnitedStates::GovernmentBond);
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Calendar calendar = UnitedStates(UnitedStates::GovernmentBond);`'
- en: const Natural settlementDays = 3;
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`const Natural settlementDays = 3;`'
- en: Date today = Date::todaysDate();
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date today = Date::todaysDate();`'
- en: Date issueDate = today;
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date issueDate = today;`'
- en: Date terminationDate = issueDate + Period(3, Years);
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date terminationDate = issueDate + Period(3, Years);`'
- en: Rate rate = .03;
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rate rate = .03;`'
- en: InterestRate couponRate(.05, ActualActual(ActualActual::Bond), Compounded, Annual);
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`InterestRate couponRate(.05, ActualActual(ActualActual::Bond), Compounded,
    Annual);`'
- en: Real faceValue = 100.0;
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Real faceValue = 100.0;`'
- en: std::vector<InterestRate> coupons(3, couponRate);
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::vector<InterestRate> coupons(3, couponRate);`'
- en: Schedule schedule(issueDate, terminationDate, Period(Annual), calendar,
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Schedule schedule(issueDate, terminationDate, Period(Annual), calendar,'
- en: Unadjusted, Unadjusted, DateGeneration::Backward, false);
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Unadjusted, Unadjusted, DateGeneration::Backward, false);
- en: FixedRateBond fixedRateBond(settlementDays, faceValue, schedule, coupons);
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: FixedRateBond fixedRateBond(settlementDays, faceValue, schedule, coupons);
- en: boost::shared_ptr<YieldTermStructure> flatForward(new FlatForward(issueDate,
    rate, ActualActual(ActualActual::Bond), Compounded, Annual));
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: boost::shared_ptr<YieldTermStructure> flatForward(new FlatForward(issueDate,
    rate, ActualActual(ActualActual::Bond), Compounded, Annual));
- en: Handle<YieldTermStructure> flatTermStructure(flatForward);
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Handle<YieldTermStructure> flatTermStructure(flatForward);
- en: boost::shared_ptr<PricingEngine> bondEngine(new DiscountingBondEngine(flatTermStructure));
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: boost::shared_ptr<PricingEngine> bondEngine(new DiscountingBondEngine(flatTermStructure));
- en: fixedRateBond.setPricingEngine(bondEngine);
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: fixedRateBond.setPricingEngine(bondEngine);
- en: Real npv = fixedRateBond.NPV();
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 真实NPV = fixedRateBond.NPV();
- en: 'std::cout << "NPV of bond is: " << npv << std::endl;'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: std::cout << "债券的NPV为： " << npv << std::endl;
- en: '}`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: A key feature of this code is the use of a pricing engine, DiscountingBondEngine.
    A pricing engine is a common QuantLib abstraction which effectively encapsulates
    instrument-specific valuation logic.  The constructor of the DiscountingBondEngine
    takes the yield curve as an argument, from which the engine extracts the interest
    rates required to discount the bond’s coupons.  Of note also is that the coupon
    payment dates are generated by QuantLib’s [Schedule](http://quantlib.org/reference/class_quant_lib_1_1_schedule.html)
    class, which takes into account a supplied calendar for determining business days
    and holidays.  Overall, this code illustrates what is required to price a bond
    in the real world, with the obvious caveat that the term structure is flat.  To
    redress this last remaining deficiency, the [FittedBondDiscountCurve](http://quantlib.org/reference/class_quant_lib_1_1_fitted_bond_discount_curve.html)
    class can be substituted for the FlatForward class.  On the QuantLib Web site
    you can find a complete example, [FittedBondCurve.cpp](http://quantlib.org/reference/_fitted_bond_curve_8cpp-example.html),
    that shows how to use the FittedBondDiscountCurve to ‘bootstrap’ a yield curve
    given market rate quotes.  I encourage you to check it out.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的一个关键特点是其使用了定价引擎，即DiscountingBondEngine。定价引擎是QuantLib中一个常见的抽象，有效地封装了特定于工具的估值逻辑。DiscountingBondEngine的构造函数接受收益率曲线作为参数，从中提取折现债券息票所需的利率。值得注意的是，QuantLib的[Schedule](http://quantlib.org/reference/class_quant_lib_1_1_schedule.html)类生成了债券的付息日，该类考虑了提供的日历以确定营业日和假日。总的来说，这段代码展示了在现实世界中定价债券所需的内容，明显的假设是收益率结构是平坦的。为了纠正这一最后的不足，可以用[FittedBondDiscountCurve](http://quantlib.org/reference/class_quant_lib_1_1_fitted_bond_discount_curve.html)类替换FlatForward类。在QuantLib网站上，你可以找到一个完整的示例，[FittedBondCurve.cpp](http://quantlib.org/reference/_fitted_bond_curve_8cpp-example.html)，它展示了如何使用FittedBondDiscountCurve“引导”一个给定市场利率报价的收益率曲线。我鼓励你查看一下。
- en: That’s it for now.  In my next post, I’ll back out the interest rate for a sequence
    of cash flows using a QuantLib solver. See you then!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这就到这里。在我的下一篇文章中，我将使用QuantLib求解器后退出一系列现金流利率。到时候见！
- en: About Mick Hittesdorf
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于Mick Hittesdorf
- en: I'm a versatile technical leader with a passion for data analytics, data science
    and Big Data technology. I have experience working for both large and small organizations,
    in a variety of roles. I've been responsible for the management and operations
    of a global data science and analytics platform, developed low latency, proprietary
    trading systems, managed software development teams, defined enterprise architecture
    strategies, written white papers and blogs, published articles in industry journals
    and delivered innovative solutions to clients, both in a consulting and technical
    sales capacity. My current areas of focus include Big Data, data engineering,
    data science, R, and Cloud computing
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我是个多才多艺的技术领导者，对数据分析、数据科学和大数据技术充满热情。我在大型和小型组织中都有工作经验，担任过各种角色。我曾负责管理一个全球数据科学和分析平台，开发了低延迟的专有交易系统，管理过软件开发团队，制定了企业架构策略，撰写了白皮书和博客，在行业期刊上发表过文章，并以咨询和技术销售的身份向客户提供了创新的解决方案。我当前的关注领域包括大数据、数据工程、数据科学、R和云计算。
