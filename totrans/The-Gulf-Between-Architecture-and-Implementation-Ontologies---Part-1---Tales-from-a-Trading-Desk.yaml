- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:51:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:51:18
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Gulf Between Architecture and Implementation Ontologies – Part 1 | Tales
    from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构与实现本体论之间的鸿沟——第1部分 | 交易桌上的故事
- en: 来源：[https://mdavey.wordpress.com/2014/04/15/the-gulf-between-architecture-and-implementation-ontologies-part-1/#0001-01-01](https://mdavey.wordpress.com/2014/04/15/the-gulf-between-architecture-and-implementation-ontologies-part-1/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2014/04/15/the-gulf-between-architecture-and-implementation-ontologies-part-1/#0001-01-01](https://mdavey.wordpress.com/2014/04/15/the-gulf-between-architecture-and-implementation-ontologies-part-1/#0001-01-01)
- en: 'Architecture and Design are terms often not heard enough within project teams
    – 😦 .  It almost feels like these words where left behinds in the Computer Science
    universities.  Two interesting books on the topic are:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 架构和设计是项目团队中经常不够听到的术语——😦 。它感觉几乎像是这些词被遗留在计算机科学大学里。关于这个话题的两本有趣的书是：
- en: What follows is a brief overview of the first book.  Another blog posting will
    cover the 2nd book.  Net out, I feel the Software Architecture in Practice book
    could have done more to embrace agile, and the concept of “done”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第一本书的简要概述。另一篇博客文章将涵盖第二本书。总的来说，我觉得《软件架构实践》这本书本可以更多地拥抱敏捷，以及“完成”的概念
- en: '**Book: Software Architecture in Practice**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**书籍：软件架构实践**'
- en: 'Page 4 start with a relevant definition:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第4页以一个相关的定义开始：
- en: The software architecture of a system is the set of structures needed to reason
    about the system, which comprise software elements, relations among them, and
    properties of both.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个系统的软件架构是推理系统所需的结构集合，包括软件元素、它们之间的关系以及它们的属性。
- en: 'Architecture structures can be divided into three categories: Modules, Component-and-Connector
    (C&C), Allocation Structures. (Page 10)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 架构结构可以分为三类：模块、组件与连接器（C&C）、分配结构。（第10页）
- en: Reason for why architecture are important are offered on page 25.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么架构很重要在第25页有所阐述。
- en: Business Goals drive Quality Attributes and Architecture (page 50) leads to
    an interesting read on page 68 on the topic of specifying quality attributes in
    a common form.  In many ways this sounds like an opportunity for BDD, or at least
    the way to describe the architecture behaviour in Cucumber format to avoid the
    dreaded parse-translate issues that normally happens with requirements documents.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 业务目标驱动质量属性和架构（第50页）在第68页关于以常见形式指定质量属性的话题上引领了有趣的阅读。在许多方面，这听起来像是BDD的一个机会，或者至少是以Cucumber格式描述架构行为以避免通常出现在需求文档中的解析翻译问题的方法。
- en: Anyone working in fiancé should be familiar with the system availability table
    on page 81.  Planning For Failure, page 82 reminds me of the Let It Die ………..
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何从事财务工作的人都应该熟悉第81页的系统可用性表格。“规划失败”（第82页）让我想起了“让它死”…………
- en: Defect Faults, page 87, offer the usual suspects, heartbeats, voting, monitoring.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 缺陷故障，第87页，提供了常见的问题，心跳，投票，监控。
- en: Interoperability, Modifiability and Performance (Chapters 6-8) offer good reading. 
    Chapter 9, Security, is often overlooked, or thought about to late in the architecture. 
    Security requirements will often influence the architecture of an application
    in ways not anticipated at the start of a project.  One thing that is missing
    from “Further Reading”, page 157, is the Oracle Security Coding standards, given
    that a large majority of code these days in financial corporations is written
    in Java.  Further, I would also say Data Model security should also take account
    of any legal implications of where the data is allowed to be located.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 互操作性、可修改性和性能（第6-8章）提供了很好的阅读内容。第9章，安全性，往往被忽视，或者在架构设计阶段考虑得太晚。安全性要求往往会在项目的开始阶段预料之外地影响应用程序的架构。在“进一步阅读”（第157页）中缺少的一点是甲骨文安全编码标准，考虑到如今大多数金融公司的代码是用Java编写的。此外，我还认为数据模型安全还应考虑数据的存放位置的任何法律影响。
- en: Testability, chapter 10, states that for a well engineered system, “30-50% (or
    in some cases more)” of the cost goes into testing – page 374 offer a view of
    30-90% of the development budget. Thankfully, page 16 offers details of NetiFlix’s
    monkeys.  However, chapter 10 doesn’t offer a view on leveraging the behaviour
    of the application as a source of truth for testing – BDD again.  Opportunity
    lost.  Page 170 does however offer some good insight into test data – which is
    often overlooked due to the complexity/pain of getting test data.  Page 171 also
    calls out automated testing – large systems can’t/shouldn’t be tested manually.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可测试性（第10章）指出，对于一个良好工程化的系统，“30-50%（在某些情况下更多）”的成本用于测试——第374页展示了30-90%的开发预算。幸运的是，第16页详细介绍了Netflix的猴子。然而，第10章没有提供关于利用应用程序行为作为测试真实性的来源的观点——BDD再次。机会丧失。第170页确实提供了一些关于测试数据的很好的见解——这通常因为获取测试数据的复杂性/痛苦而被忽视。第171页还呼吁进行自动化测试——大型系统不能/不应该手动测试。
- en: Architectural Tactics and Patterns (chapter 13) offers a catalog of usual suspects
    – MVC, Pipe-and-Filter, Client-Server, Peer-to-Peer, SOA, Pub-Sub.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 架构战术和模式（第13章）提供了一个常见嫌疑人的目录——MVC、管道和过滤器、客户端-服务器、对等网络、SOA、发布-订阅。
- en: Architecture in Agile Projects (chapter 15) offers an interesting read, which
    a set of six principles, Incremental  Commitment Model.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷项目中的架构（第15章）提供了一个有趣的阅读，一系列六个原则，逐步承诺模型。
- en: Chapter 16, Architecturally Significant Requirements (ASR) are possibly the
    closest thing to BDD.  Documenting Behaviour, page 351, again unfortunately missed
    the opportunity to mention BDD.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第16章，架构上重要的需求（ASR）可能是最接近BDD的东西。记录行为，第351页，再次不幸地失去了提到BDD的机会。
- en: Moving from Architecture to implementation is always interesting (page 363). 
    How do you validate that the implementation is what was architected?  Frameworks
    and code templates are obvious contenders.  UML is the de facto architecture description
    language, but as discussed on page 369, there is still a gap between architecture
    and implementation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从架构到实现 always interesting（第363页）。你怎么验证实现的是架构设计的东西？框架和代码模板是明显的竞争者。UML是事实上的架构描述语言，但正如第369页讨论的，架构和实现之间仍然存在差距。
- en: Again, 19.2 (page 370) missed the opportunity to discuss BDD.  Further, if the
    architected application is to deliver a certain set of behaviours, then maybe
    the developers and testers should work from the same set of behaviour to ensure
    the application is tested appropriately.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，19.2（第370页）失去了讨论BDD的机会。此外，如果设计的应用程序要实现一组特定的行为，那么也许开发人员和测试人员应该从同一组行为出发，以确保应用程序被适当地测试。
- en: Architecture Tradeoff Analysis Method (ATAM) (page 400) offers an interesting
    read, which proposed agenda and architecture presentation.  There is also a Lightweight
    Architecture Evaluation (page 415) that offers a reduction in time from 20-30
    person-days to a single day – see agenda on page 416.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 架构权衡分析方法（ATAM）（第400页）提供了一个有趣的阅读，提出了议程和架构展示。还有一篇轻量级架构评估（第415页），将时间从20-30人天减少到一天——请参见第416页的议程。
- en: Competencies of Software Architecture comes in many forms.  Page 468 offers
    a dew duties that an organisation can perform to aid successful architecture. 
    My personal view is that architects need to still understand “code” else, we end
    up in world where architects are not respected by the implementation team.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构的竞争力以多种形式出现。第468页提供了一个组织可以执行以帮助成功架构的几个职责。我个人认为，架构师还需要理解“代码”否则，我们最终会进入一个架构师不被实施团队尊重的世界。
- en: ~ by mdavey on April 15, 2014.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ~ mdavey于2014年4月15日发表。
- en: Posted in [Agile](https://mdavey.wordpress.com/category/agile/)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 发布于[敏捷](https://mdavey.wordpress.com/category/agile/)分类中。
