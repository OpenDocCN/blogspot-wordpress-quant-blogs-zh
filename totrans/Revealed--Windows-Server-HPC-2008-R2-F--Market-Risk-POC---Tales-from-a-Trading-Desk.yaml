- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-18 06:13:44'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 06:13:44
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Revealed: Windows Server HPC 2008 R2 F# Market Risk POC | Tales from a Trading
    Desk'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭示：Windows Server HPC 2008 R2 F#市场风险POC | 交易桌上的故事
- en: 来源：[https://mdavey.wordpress.com/2010/04/29/revealed-windows-server-hpc-2008-r2-f-market-risk-poc/#0001-01-01](https://mdavey.wordpress.com/2010/04/29/revealed-windows-server-hpc-2008-r2-f-market-risk-poc/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2010/04/29/revealed-windows-server-hpc-2008-r2-f-market-risk-poc/#0001-01-01](https://mdavey.wordpress.com/2010/04/29/revealed-windows-server-hpc-2008-r2-f-market-risk-poc/#0001-01-01)
- en: So here in all its glory is my latest Proof Of Concept (POC). Leveraging everything
    I have blogged about previously, it’s time to see if we can move from the Excel
    [Runner](http://www.theregister.co.uk/2010/04/07/microsoft_hpc_server_r2_beta_2/)HPC
    world 😉 The diagram below essentially provide a high level architecture of what
    I hope will provide a useful guide to leveraging Windows Server 2008 HPC to calculate
    Market Risk.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，以下是我最新的概念验证（POC）的全部荣耀。利用我之前博客中提到的所有内容，是时候看看我们是否能够从Excel [Runner](http://www.theregister.co.uk/2010/04/07/microsoft_hpc_server_r2_beta_2/)HPC世界迈出步伐了。下面的图表基本上提供了一个高层次的架构，我希望它能提供利用Windows
    Server 2008 HPC计算市场风险的有用指南。
- en: Taking a feed from my simulated market (and the Market Strategy Engine POC)
    the trades will be submitted to the HPC cluster, where the F# cashflow/PV code
    I blogged about a few months ago will run as a service, crunching the trades,
    and generating PV numbers. Obviously to calculate the cashflows I need appropriate
    market data and curves. For this initial POC, I’ll pre-populate AppFabric caching
    with this data, and pass the velocity object keys to the HPC SOA with the trade
    data. A further POC will look at snapping this data, and updating Velocity at
    specific intervals, hence forcing portfolio recalculations – real world scenario.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从我模拟的市场（以及市场策略引擎POC）获取数据，交易将提交到HPC集群，其中我几个月前博客中提到的F#现金流/现值代码将作为服务运行，处理交易并生成现值数字。显然，为了计算现金流，我需要适当的市场数据和曲线。对于这个最初的POC，我将预先将AppFabric缓存填充这些数据，并将速度对象键与交易数据一起传递给HPC
    SOA。进一步的POC将研究定时更新这些数据，并在特定间隔内更新Velocity，从而强制重新计算投资组合——现实世界场景。
- en: The need for the HPC custom broker has been discussed in a previous posting,
    so I won’t re-iterate again. Likewise, the design of the Real-Time Cube (RTC).
    The VelocityClient on each HPC node is however important to discuss.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的一篇文章已经讨论过需要HPC自定义经纪人的原因，所以我不会再重复。同样，实时立方体（RTC）的设计。然而，每个HPC节点上的VelocityClient很重要，需要讨论。
- en: The HPC cluster needs to be party stateless, and partly stateful. This is driven
    by the need to reduce the amount of data sent around the LAN coupled with the
    type of Market Risk processing that will be undertaken. Stateless is probably
    more common on a cluster, since the process running the job/service will usually
    be ripped down on completion. Even if the process isn’t ripped down, one has to
    cater for the instance where the process crashes for some reason. Hence in stateless
    clusters, all data is shipped to each node, each time, but this is expensive.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 集群需要部分无状态和部分有状态。这是为了减少在局域网中传输的数据量，结合将进行的市场风险处理类型。在集群上无状态可能更常见，因为运行作业/服务的进程通常在完成后会被关闭。即使进程没有关闭，也必须考虑到进程因某种原因崩溃的情况。因此，在无状态集群中，所有数据都会发送到每个节点，每次都发送，但这代价昂贵。
- en: The reason we need stateful nodes is when we move into the world of snapping
    market data/curves, and re-calculating portfolios. Given that we have snapped,
    we know that for x trades/positions/portfolios, certain data will be identical.
    Hence to reduce the expense of sending data, and improving performance, I’m planning
    to run a [VelocityClient](http://msdn.microsoft.com/en-us/magazine/dd861287.aspx)
    Windows Service on the Market Risk nodes. This Windows Service would do exactly
    what the service name implies, act as a node VelocityCache, drawing down certain
    a specific set (probably by currency) of market data/curves to nodes for a duration,
    and then flushing the service. The VelocityCache could be done away with if we
    kept the node service process (F#) running indefinitely, but as I said earlier
    this doesn’t cater for the process crashing, which could happen :(. Obviously
    not all nodes will cache the same market data/curves – as discussed in a previous
    posting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要有状态的节点的原因是当我们进入捕捉市场数据/曲线的领域，以及重新计算投资组合时。考虑到我们已经捕捉到了数据，我们知道对于x个交易/头寸/投资组合，某些数据将会是相同的。因此，为了减少数据传输的开销，提高性能，我计划在市场风险节点上运行一个[VelocityClient](http://msdn.microsoft.com/en-us/magazine/dd861287.aspx)
    Windows服务。这个Windows服务将做与服务名称完全相符的事情，作为一个节点的VelocityCache，拉取特定的一组（可能按货币划分）的市场数据/曲线到节点上持续一段时间，然后刷新服务。如果我们将节点服务进程（F#）无限期地运行，那么我们可以废除VelocityCache，但是如我之前所说，这不能应对进程崩溃的情况，这是可能发生的
    :(。显然，并非所有节点都会缓存相同的市场数据/曲线——如之前的帖子所讨论的。
- en: The data coming out of the HPC cluster will be used to populate the RTC (previous
    POC), which also leverages Windows Server AppFabric caching, and hence provide
    cache notifications which via a streaming server (Nirvana in the case of this
    POC) update a Silverlight 4 RIA in real-time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从高性能计算（HPC）集群中输出的数据将被用来填充实时通讯（RTC，之前的POC），它也利用了Windows Server AppFabric的缓存，从而提供缓存通知，通过流服务器（在这个POC中是Nirvana）实时更新Silverlight
    4 RIA。
- en: I’m sure there are flaw in this HPC design, but for the moment it appear viable,
    and worthy of a POC. Obviously I have a few other interesting idea up my sleeve
    post this POC, some of them are unfortunately dependant on Microsoft giving me
    access to some new technology 😉
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我确信这个HPC设计中有缺陷，但目前看来是可行的，值得做一个POC。显然，在完成这个POC后，我还有其他一些有趣的想法，其中一些不幸的是依赖于微软让我接触一些新技术
    😉
- en: '[![](img/91237db29f5d0a98010207f34d6d2fe4.png "HPC")](https://mdavey.wordpress.com/wp-content/uploads/2010/04/hpc.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![HPC](https://mdavey.wordpress.com/wp-content/uploads/2010/04/hpc.jpg)'
- en: ~ by mdavey on April 29, 2010.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ~ mdavey于2010年4月29日。
- en: Posted in [CEP](https://mdavey.wordpress.com/category/hpc/cep/), [HPC](https://mdavey.wordpress.com/category/hpc/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 发布在[CEP](https://mdavey.wordpress.com/category/hpc/cep/)，[HPC](https://mdavey.wordpress.com/category/hpc/)
- en: 'Tags: [MarketRisk](https://mdavey.wordpress.com/tag/marketrisk/), [Microsoft](https://mdavey.wordpress.com/tag/microsoft/)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：[市场风险](https://mdavey.wordpress.com/tag/marketrisk/)，[微软](https://mdavey.wordpress.com/tag/microsoft/)
