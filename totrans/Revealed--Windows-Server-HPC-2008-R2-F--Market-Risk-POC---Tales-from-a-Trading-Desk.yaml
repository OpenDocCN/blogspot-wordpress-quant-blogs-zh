- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 06:13:44'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Revealed: Windows Server HPC 2008 R2 F# Market Risk POC | Tales from a Trading
    Desk'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2010/04/29/revealed-windows-server-hpc-2008-r2-f-market-risk-poc/#0001-01-01](https://mdavey.wordpress.com/2010/04/29/revealed-windows-server-hpc-2008-r2-f-market-risk-poc/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So here in all its glory is my latest Proof Of Concept (POC). Leveraging everything
    I have blogged about previously, it‚Äôs time to see if we can move from the Excel
    [Runner](http://www.theregister.co.uk/2010/04/07/microsoft_hpc_server_r2_beta_2/)HPC
    world üòâ The diagram below essentially provide a high level architecture of what
    I hope will provide a useful guide to leveraging Windows Server 2008 HPC to calculate
    Market Risk.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a feed from my simulated market (and the Market Strategy Engine POC)
    the trades will be submitted to the HPC cluster, where the F# cashflow/PV code
    I blogged about a few months ago will run as a service, crunching the trades,
    and generating PV numbers. Obviously to calculate the cashflows I need appropriate
    market data and curves. For this initial POC, I‚Äôll pre-populate AppFabric caching
    with this data, and pass the velocity object keys to the HPC SOA with the trade
    data. A further POC will look at snapping this data, and updating Velocity at
    specific intervals, hence forcing portfolio recalculations ‚Äì real world scenario.
  prefs: []
  type: TYPE_NORMAL
- en: The need for the HPC custom broker has been discussed in a previous posting,
    so I won‚Äôt re-iterate again. Likewise, the design of the Real-Time Cube (RTC).
    The VelocityClient on each HPC node is however important to discuss.
  prefs: []
  type: TYPE_NORMAL
- en: The HPC cluster needs to be party stateless, and partly stateful. This is driven
    by the need to reduce the amount of data sent around the LAN coupled with the
    type of Market Risk processing that will be undertaken. Stateless is probably
    more common on a cluster, since the process running the job/service will usually
    be ripped down on completion. Even if the process isn‚Äôt ripped down, one has to
    cater for the instance where the process crashes for some reason. Hence in stateless
    clusters, all data is shipped to each node, each time, but this is expensive.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we need stateful nodes is when we move into the world of snapping
    market data/curves, and re-calculating portfolios. Given that we have snapped,
    we know that for x trades/positions/portfolios, certain data will be identical.
    Hence to reduce the expense of sending data, and improving performance, I‚Äôm planning
    to run a [VelocityClient](http://msdn.microsoft.com/en-us/magazine/dd861287.aspx)
    Windows Service on the Market Risk nodes. This Windows Service would do exactly
    what the service name implies, act as a node VelocityCache, drawing down certain
    a specific set (probably by currency) of market data/curves to nodes for a duration,
    and then flushing the service. The VelocityCache could be done away with if we
    kept the node service process (F#) running indefinitely, but as I said earlier
    this doesn‚Äôt cater for the process crashing, which could happen :(. Obviously
    not all nodes will cache the same market data/curves ‚Äì as discussed in a previous
    posting.
  prefs: []
  type: TYPE_NORMAL
- en: The data coming out of the HPC cluster will be used to populate the RTC (previous
    POC), which also leverages Windows Server AppFabric caching, and hence provide
    cache notifications which via a streaming server (Nirvana in the case of this
    POC) update a Silverlight 4 RIA in real-time.
  prefs: []
  type: TYPE_NORMAL
- en: I‚Äôm sure there are flaw in this HPC design, but for the moment it appear viable,
    and worthy of a POC. Obviously I have a few other interesting idea up my sleeve
    post this POC, some of them are unfortunately dependant on Microsoft giving me
    access to some new technology üòâ
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/91237db29f5d0a98010207f34d6d2fe4.png "HPC")](https://mdavey.wordpress.com/wp-content/uploads/2010/04/hpc.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: ~ by mdavey on April 29, 2010.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [CEP](https://mdavey.wordpress.com/category/hpc/cep/), [HPC](https://mdavey.wordpress.com/category/hpc/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Tags: [MarketRisk](https://mdavey.wordpress.com/tag/marketrisk/), [Microsoft](https://mdavey.wordpress.com/tag/microsoft/)'
  prefs: []
  type: TYPE_NORMAL
