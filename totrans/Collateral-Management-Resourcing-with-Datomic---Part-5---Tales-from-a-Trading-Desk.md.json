["```\n\n[\n;; Team schema\n\n{:db/id #db/id[:db.part/db]\n:db/ident :project/name\n:db/valueType :db.type/string\n:db/cardinality :db.cardinality/one\n:db/fulltext true\n:db/doc \"A project name\"\n:db.install/_attribute :db.part/db}\n\n{:db/id #db/id[:db.part/db]\n:db/ident :team/name\n:db/valueType :db.type/string\n:db/cardinality :db.cardinality/one\n:db/fulltext true\n:db/doc \"A team name\"\n:db.install/_attribute :db.part/db}\n\n{:db/id #db/id[:db.part/db]\n:db/ident :person/name\n:db/valueType :db.type/string\n:db/cardinality :db.cardinality/one\n:db/fulltext true\n:db/doc \"A person name\"\n:db.install/_attribute :db.part/db}\n\n{:db/id #db/id[:db.part/db]\n:db/ident :team/people\n:db/valueType :db.type/ref\n:db/cardinality :db.cardinality/many\n:db/fulltext true\n:db/doc \"A teams ref to people\"\n:db.install/_attribute :db.part/db}\n]\n\n```", "```\n\n[\n{:db/id #db/id[:db.part/user -1], :person/name \"Bob\"}\n{:db/id #db/id[:db.part/user -2], :person/name \"Fred\"}\n{:db/id #db/id[:db.part/user -3], :person/name \"John\"}\n{:db/id #db/id[:db.part/user -4], :project/name \"Risk Project 1\", :team/name \"Risk Feature Team 1\", :team/people #db/id[:db.part/user -1 :db.part/user -2]}\n{:db/id #db/id[:db.part/user -5], :project/name \"Risk Project 2\", :team/name \"Risk Feature Team 11\", :team/people #db/id[:db.part/user -3]}\n{:db/id #db/id[:db.part/user -6], :project/name \"Risk Project 3\", :team/name \"Risk Feature Team 111\"}\n]\n\n```", "```\n\npackage datonicplay;\n\nimport datomic.*;\n\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class dplay {\n    public static void main(String[] args) {\n        final dplay teamPlay = new dplay();\n        teamPlay.run();\n    }\n\n    private void run() {\n        try {\n            System.out.println(\"Creating and connecting to database...\");\n\n            final String uri = \"datomic:mem://teams\";\n            Peer.createDatabase(uri);\n            final Connection conn = Peer.connect(uri);\n\n            System.out.println(\"Parsing schema edn file and running transaction...\");\n\n            final Reader schema_rdr = new FileReader(\"src/main/java/data/teams-schema.edn\");\n            final List schema_tx = (List) Util.readAll(schema_rdr).get(0);\n            Object txResult = conn.transact(schema_tx).get();\n            System.out.println(txResult);\n\n            System.out.println(\"Parsing seed data edn file and running transaction...\");\n\n            final Reader data_rdr = new FileReader(\"src/main/java/data/team-testdata.edn\");\n            final List data_tx = (List) Util.readAll(data_rdr).get(0);\n            data_rdr.close();\n            txResult = conn.transact(data_tx).get();\n\n            System.out.println(\"Finding all teams, counting results...\");\n\n            Collection results = Peer.q(\"[:find ?match :where [?match :person/name]]\", conn.db());\n            System.out.println(String.format(\"Number of people: %d\", results.size()));\n\n            final Database db = conn.db();\n            for (Object result : results) {\n                final Entity entity = db.entity(((List) result).get(0));\n                System.out.println(String.format(\"%s %s\", entity.toString(), entity.get(\":person/name\")));\n            }\n\n            results = Peer.q(\"[:find ?match :where [?match :project/name \\\"Risk Project 1\\\"]]\", conn.db());\n            System.out.println();\n            System.out.println(String.format(\"Number of teams in \\\"Risk Project 1\\\":%d\", results.size()));\n\n            for (Object result : results) {\n                final Entity entity = db.entity(((List) result).get(0));\n                System.out.println(String.format(\"%s %s %s\", entity.toString(), entity.get(\":team/name\"), entity.get(\"team/people\")));\n            }\n\n            results = Peer.q(\"[:find ?read :where [?read team/people] [?match :project/name \\\"Risk Project 1\\\"]]\", conn.db());\n            System.out.println();\n            System.out.println(String.format(\"Number of people in \\\"Risk Project 1\\\" teams:%d\",results.size()));\n\n            for (Object result : results) {\n                final Entity entity = db.entity(((List) result).get(0));\n                System.out.println(String.format(\"%s %s\", entity.toString(), entity.get(\":team/people\")));\n            }\n\n            results = Peer.q(\"[:find ?read :where [?read :team/name \\\"Risk Feature Team 1\\\"]]\", conn.db());\n            System.out.println();\n            final Entity team = db.entity(((List) results.iterator().next()).get(0));\n\n            results = Peer.q(\"[:find ?c_name ?r_name :where \" +\n                            \"[?c :team/name ?c_name]\" +\n                            \"[?c :project/name \\\"Risk Project 1\\\"]\" +\n                            \"[?r :team/people ?r_name]]\",\n                    conn.db());\n            for (Object result : results) System.out.println(result);\n\n            Peer.shutdown(true);\n\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    private static void pause() {\n        if (System.getProperty(\"NOPAUSE\") == null) {\n            System.out.println(\"\\nPress enter to continue...\");\n            scanner.nextLine();\n        }\n    }\n}\n\n```"]