["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\n\tticker = 'SPY'\n\n\tdata = getSymbols(ticker, src = 'yahoo', from = '1970-01-01', auto.assign = F)\n\t\tdata = adjustOHLC(data, use.Adjusted=T)\n\n\t#*****************************************************************\n\t# Search for all patterns over a rolling window\n\t#****************************************************************** \n\tload.packages('sm') \n\thistory = as.vector(coredata(Cl(data)))\n\n\twindow.L = 35\n\twindow.d = 3\n\twindow.len = window.L + window.d\n\n\tpatterns = pattern.db()\n\n\tfound.patterns = c()\n\n\tfor(t in window.len : (len(history)-1)) {\n\t\tret = history[(t+1)]/history[t]-1\n\n\t\tsample = history[(t - window.len + 1):t]\t\t\n\t\tobj = find.extrema( sample )\t\n\n\t\tif(len(obj$data.extrema.loc) > 0) {\n\t\t\tout =  find.patterns(obj, patterns = patterns, silent=F, plot=F)  \n\n\t\t\tif(len(out)>0) found.patterns = rbind(found.patterns,cbind(t,out,t-window.len+out, ret))\n\t\t}\n\t\tif( t %% 10 == 0) cat(t, 'out of', len(history), '\\n')\n\t}\n\tcolnames(found.patterns) = spl('t,start,end,tstart,tend,ret')\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Clean found patterns\n\t#****************************************************************** \t\n\t# remove patterns that finished after window.L\n\tfound.patterns = found.patterns[found.patterns[,'end'] <= window.L,]\n\n\t# remove the patterns found multiple times, only keep first one\n\tpattern.names = unique(rownames(found.patterns))\n\tall.patterns = c()\n\tfor(name in pattern.names) {\n\t\tindex = which(rownames(found.patterns) == name)\n\t\ttemp = NA * found.patterns[index,]\n\n\t\ti.count = 0\n\t\ti.start = 1\n\t\twhile(i.start < len(index)) {\n\t\t\ti.count = i.count + 1\n\t\t\ttemp[i.count,] = found.patterns[index[i.start],]\n\t\t\tsubindex = which(found.patterns[index,'tstart'] > temp[i.count,'tend'])\t\t\t\n\n\t\t\tif(len(subindex) > 0) {\n\t\t\t\ti.start = subindex[1]\n\t\t\t} else break\t\t\n\t\t} \n\t\tall.patterns = rbind(all.patterns, temp[1:i.count,])\t\t\n\t}\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Plot\n\t#****************************************************************** \t\n\t# Frequency for each Pattern\n\tfrequency = tapply(rep(1,nrow(all.patterns)), rownames(all.patterns), sum)\n\tlayout(1)\n\tbarplot.with.labels(frequency/100, 'Frequency for each Pattern')\n\n\t# Summary for each Pattern\n\tall.patterns[,'ret'] = history[(all.patterns[,'t']+20)] / history[all.patterns[,'t']] - 1\n\tdata_list = tapply(all.patterns[,'ret'], rownames(all.patterns), list)\n\tgroup.seasonality(data_list, '20 days after Pattern')\n\n\t# Details for BBOT pattern\n\tlayout(1)\n\tname = 'BBOT'\n\tindex = which(rownames(all.patterns) == name)\t\n\ttime.seasonality(data, all.patterns[index,'t'], 20, name)\t\n\n```"]