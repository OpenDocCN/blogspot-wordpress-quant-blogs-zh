["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical fundamental and pricing data\n\t#****************************************************************** \n\tload.packages('quantmod') \n\ttickers = spl('FB,LNKD,GRPN,AAPL,GOOG')\n\ttickers.temp = spl('NASDAQ:FB,NYSE:LNKD,NASDAQ:GRPN,NASDAQ:AAPL,NASDAQ:GOOG')\n\n\t# get fundamental data\n\tdata.fund <- new.env()\n\tfor(i in 1:len(tickers)) {\n\t\t\tcat(tickers[i],'\\n')\n\t\t\tdata.fund[[tickers[i]]] = fund.data(tickers.temp[i], 80)\n\t}\n\n\t# get pricing data\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Combine fundamental and pricing data\n\t#****************************************************************** \t\t\t\t\n\tfor(i in tickers) {\n\t\tfund = data.fund[[i]]\n\t\tfund.date = date.fund.data(fund)\n\n\t\t# Earnings per Share\t\t\n\t\tEPS = 4 * get.fund.data('Diluted EPS from Total Operations', fund, fund.date)\n\t\tif(nrow(EPS) > 3)\n\t\t\tEPS = rbind(EPS[1:3], get.fund.data('Diluted EPS from Total Operations', fund, fund.date, is.12m.rolling=T)[-c(1:3)])\n\n\t\t# merge\t\n\t\tdata[[i]] = merge(data[[i]], EPS)\n\t}\n\n\tbt.prep(data, align='keep.all', dates='1995::')\n\n\t#*****************************************************************\n\t# Create PE\n\t#****************************************************************** \n\tprices = data$prices\n\t\tprices = bt.apply.matrix(prices, function(x) ifna.prev(x))\n\n\tEPS =  bt.apply(data, function(x) ifna.prev(x[, 'EPS']))\n\n\tPE = ifna(prices / EPS, NA)\n\t\tPE[ abs(EPS) < 0.001 ] = NA\t\n\n```", "```\n\n    #*****************************************************************\n    # Create Report\n    #******************************************************************       \n    plota.matplot(PE)\n\n    plota.matplot(PE, type='b',pch=20, dates='2012::')\n\n    plota.matplot(EPS)\n\n    plota.matplot(prices)\n\n```"]