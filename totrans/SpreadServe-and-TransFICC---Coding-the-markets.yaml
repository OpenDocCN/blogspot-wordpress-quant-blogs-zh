- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-12 19:29:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-12 19:29:32'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: SpreadServe and TransFICC | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SpreadServe和TransFICC | 编码市场
- en: 来源：[https://etrading.wordpress.com/2017/08/11/spreadserve-and-transficc/#0001-01-01](https://etrading.wordpress.com/2017/08/11/spreadserve-and-transficc/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2017/08/11/spreadserve-and-transficc/#0001-01-01](https://etrading.wordpress.com/2017/08/11/spreadserve-and-transficc/#0001-01-01)
- en: SpreadServe and TransFICC
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SpreadServe和TransFICC
- en: August 11, 2017
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2017年8月11日
- en: Earlier in the summer I did a POC integration of [SpreadServe](http://spreadserve.com)
    with [TransFICC](http://transficc.com). For those unfamiliar, TransFICC has an
    ex-[LMAX](https://etrading.wordpress.com/disruptor/) founding team, and is a new
    entrant in the ECN gateway space. Technically their key differentiators are cloud
    hosting and high performance engineering techniques. For Transficc clients the
    only thing running on premises is the Java API, which puts the same orthogonalised
    interface on all the usual fixed income ECNs, and connects to the cloud hosted
    gateway processes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今年夏天早些时候，我完成了一个**SpreadServe**与**TransFICC**的POC集成。对于那些不熟悉的人来说，TransFICC的创始团队有前**LMAX**成员，它是一家新的ECN网关市场参与者。从技术上讲，它们的关键差异化优势是云托管和高性能工程技术。对于TransFICC客户来说，唯一在本地运行的是Java
    API，它为所有常用的固定收益ECN提供了相同的正交化接口，并连接到云托管的网关进程。
- en: It’s been a while since I built anything non trivial in Java, so I was pleasantly
    surprised by how improved the Java ecosystem has become. [Gradle](http://gradle.org)
    has transformed dependency and package management. And the single threaded async
    approach popular in the Python and C++ worlds has finally made it to Java with
    [Netty](https://netty.io). You can find the code [on GitHub here](https://github.com/SpreadServe/TFWebSock).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我上次在Java中构建非平凡项目以来已经有一段时间了，所以我非常惊喜地发现Java生态系统已经变得多么先进。**Gradle**已经改变了依赖和包管理。在Python和C++世界中流行的单线程异步方法终于来到了Java，得益于**Netty**。你可以在[GitHub上找到代码](https://github.com/SpreadServe/TFWebSock)。
