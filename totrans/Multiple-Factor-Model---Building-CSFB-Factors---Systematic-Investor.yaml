- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 14:42:58'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Factor Model – Building CSFB Factors | Systematic Investor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://systematicinvestor.wordpress.com/2012/02/13/multiple-factor-model-building-csfb-factors/#0001-01-01](https://systematicinvestor.wordpress.com/2012/02/13/multiple-factor-model-building-csfb-factors/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the third post in the series about Multiple Factor Models. I will build
    on the code presented in the prior post, [Multiple Factor Model – Building Fundamental
    Factors](https://systematicinvestor.wordpress.com/2012/02/04/multiple-factor-model-building-fundamental-factors/),
    and I will show how to build majority of factors described in the CSFB Alpha Factor
    Framework. For details of the CSFB Alpha Factor Framework please read [CSFB Quantitative
    Research, Alpha Factor Framework on page 11, page 49 by P. N. Patel, S. Yao, R.
    Carlson, A. Banerji, J. Handelman](http://www.scribd.com/mobile/documents/62210581/download?commit=Download+Now&secret_password=).
  prefs: []
  type: TYPE_NORMAL
- en: This post will include long sections of code to extract/format data and build
    factors. I created a few helper functions for data manipulations and visualizations
    in the [factor.model.r at github](https://github.com/systematicinvestor/SIT/blob/master/R/factor.model.r).
    For example, consecutive.changes function counts the number of consecutive positive
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The outline of this post:'
  prefs: []
  type: TYPE_NORMAL
- en: Create majority of CSFB factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and test Composite Average factor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run cross sectional regression to estimate factor loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and test Alpha model using estimated factor loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by getting Fundamental data and creating factors. In the prior post,
    I mentioned that it takes a while to download historical fundamental data for
    all companies in the Dow Jones index, and I recommend saving fundamental data
    with save(data.fund, file=’data.fund.Rdata’) command. In the following code I
    will just load historical fundamental data with load(file=’data.fund.Rdata’) command
    instead of downloading all data again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next let’s create majority of CSFB factors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next let’s create Composite Average factor and chart its performance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![](img/ca57aa43f968203c50f43d5bd2258cac.png "plot1.png.small")](https://systematicinvestor.wordpress.com/wp-content/uploads/2012/02/plot1-small1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/16f8ddfa4c3c0c8393f0ab4c5c5f8e33.png "plot2.png.small")](https://systematicinvestor.wordpress.com/wp-content/uploads/2012/02/plot2-small2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that I’m using the current Dow Jones index components through out
    the whole history. This is a problem because the Dow Jones index changed its composition
    a few times in the last 20 years. One of the signs of this bias is high spread
    for Small Size group of factors. It is not obvious that buying low priced stocks
    and selling high priced stocks should consistently make money; but it makes sense,
    if we know beforehand that that low priced companies will be part of Dow Jones
    index at some point.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using a simple average of all factors to rank stocks, we can run
    cross sectional regression to estimate factor loading, and create Alpha model
    using estimated factor loading. For a complete description of this process, I
    recommend reading [Commonality In The Determinants Of Expected Stock Returns by
    R. Haugen, N. Baker (1996)](http://www.quantitativeinvestment.com/documents/common.pdf)
    pages 8-9.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![](img/5b284732329e9996457fd518271e0605.png "plot3.png.small")](https://systematicinvestor.wordpress.com/wp-content/uploads/2012/02/plot3-small.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The performance of the regression model lags the performance of the simple average
    of all factors to rank stocks. There are might be many reasons for this, but I
    want to show you one quick and rational way to increase performance of the regression
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do not restrict estimated factor loadings during regression; however, a
    negative coefficient for a Value factor does not make sense. I don’t want explicitly
    say that good Value companies should have lower ranks than bad Value companies,
    just because there is a negative coefficient for a Value factor. One possible
    solution is to only use factor loadings that are positive to construct Alpha score.
    Here is the modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![](img/f80756c3bd3b4a3a57aac4dc276a1d4c.png "plot4.png.small")](https://systematicinvestor.wordpress.com/wp-content/uploads/2012/02/plot4-small.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The regression model still lags the performance of the simple average of all
    factors to rank stocks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next post I will show how to create a risk model and estimate risk.
  prefs: []
  type: TYPE_NORMAL
- en: To view the complete source code for this example, please have a look at the
    [fm.all.factor.test() function in factor.model.test.r at github](https://github.com/systematicinvestor/SIT/blob/master/R/factor.model.test.r).
  prefs: []
  type: TYPE_NORMAL
