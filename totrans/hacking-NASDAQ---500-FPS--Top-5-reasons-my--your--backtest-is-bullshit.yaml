- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-13 00:01:43'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-13 00:01:43
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: Top 5 reasons my (your) backtest is bullshit'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以500 FPS的速度黑客NASDAQ：我（你）回测结果是胡扯的前5个原因
- en: 来源：[http://hackingnasdaq.blogspot.com/2012/12/top-5-reasons-my-your-backtest-is.html#0001-01-01](http://hackingnasdaq.blogspot.com/2012/12/top-5-reasons-my-your-backtest-is.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2012/12/top-5-reasons-my-your-backtest-is.html#0001-01-01](http://hackingnasdaq.blogspot.com/2012/12/top-5-reasons-my-your-backtest-is.html#0001-01-01)
- en: Alot of the time when building/backtesting strategies you get a result thats
    just too-good-to-be-true. When this shows up the best way test your brand spanking
    new million *cough* dollar *cough* strategy a day is to
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 构建/回测策略的很多时候，你可能得到一个看起来太好以至于不真实的结果。当这种结果出现时，测试你的崭新的百万 *咳咳* 美元 *咳咳* 策略最佳方式是
- en: 1) flip the sides/signals - if possible e..g not capturing bid/ask spread..
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 调换方向/信号- 如果可能的话，例如不捕获买入/卖出价差..
- en: 2) random() is your friend, replace random() with your secret sauce signal gen
    and see how it goes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 随机() 是你的朋友，用你的秘密酱料信号生成器替换随机() 看看会发生什么。
- en: My preference is to use a random() strategy or an "always trade" strategy as
    its less intrusive. If it generates million dollar backtested profits... you know
    its complete and utter bullshit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢使用一个随机() 策略或者一个“总是交易”的策略，因为它们干扰性小。如果它生成了百万美元的回测利润... 你知道它完全胡扯。
- en: So in dave letternman top 10 style..
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以以大卫·莱特曼的十佳风格..
- en: '**top 5 reasons my (your) backtested results are bullshit**'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**我（你）回测结果是胡扯的前5个原因**'
- en: number 5...  your cost structures are wrong
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数字5... 你的成本结构有误
- en: Part of the shock and horror of HF trading is the realization your being screwed
    on all angles in all holes by everyone. When ppl think about trading its all about
    the (sell price - buy price) == money in your bank account. Sadly because the
    gross margins are so low & with so many fees and taxs along the way, money in
    the bank isnt always that good..
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 量化交易的震惊和恐怖之一是意识到你在所有角度被每个人以各种方式搞得很惨。人们谈论交易时，都是关于（卖价-买价）== 你银行账户里的钱。遗憾的是，由于毛利润率非常低，还有很多费用和税收，银行账户里的钱并不总是那么美好...
- en: Be sure to include
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要包括
- en: 1) exchange fees / rebates
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 交易费用/回扣
- en: 2) SEC fees/taxs
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 美国证券交易委员会费用/税收
- en: 2) brokers fees
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 券商费用
- en: 3) your (not) friendly capitial gains tax man
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 你（不）友好的资本利得税人
- en: 4) [optional] exchange rates
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 4) [可选] 汇率
- en: Got totally screwed by 4) this year - Japanese Yen / USD really hurt
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 今年被4)搞得很惨 – 日元/美元真的很疼
- en: number 4 ....   You have built a time machine, cool can I buy one?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数字4.... 你建了一个时间机器，酷，我能买一个吗？
- en: Need to seriously change my trade idea scratchpad / research framework soon
    to completely eliminate this. For now using essentially arrays of data, with each
    index being a time/event sample. Problem is its all too easy to do a if (Price[t]
    > Price[t+1] ) kind of compare which, takes a peek into the future and can heavily
    bias your results. The more painful and subtle variation is using multiple datasets/signals
    that are not perfectly synchronized e.g. A signal is one time/event ahead of the
    others.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要认真更改我的交易点子草稿/研究框架，以完全消除这个问题。目前基本上使用数据数组，其中每个索引都是时间/事件样本。问题是很容易做出类似 if (Price[t]
    > Price[t+1] ) 这样的比较，这样做就是在窥探未来，可能会严重偏离结果。更痛苦和微妙的变化是使用多个数据集/信号，它们并不是完全同步的，例如一个信号领先于其他信号。
- en: The only way around this is to make this impossible, say strategy has no access
    to the array/precalced data or be very very careful. My approach for the moment
    is the latter. When I started would make this mistake more often than I want to
    admit but rarely screw it up these days - too many hours lost chasing wtf is this
    random() strategy profitable
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的办法是使这件事变得不可能，比如说策略无法访问数组/预先计算的数据，或者非常非常小心。我目前的处理方式是后者。当我开始时，会犯这个错误的次数比我想承认的要多，但这些天很少犯错
    – 追逐这种随机() 策略盈利到底是什么鬼，浪费了太多时间
- en: number 3.... EventSeries != TimeSeries
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数字3.... 事件序列 != 时间序列
- en: Most exchanges will pack multiple market data events into a single UDP packet
    making the market data event stream appear as a time series, when it is not. Simple
    passive example strategy would be, if BBO price level has less than X orders/qty
    then replace away/deeper into the book. If you equate the event stream for a time
    series then the backtest will always avoid deep, aggressive trades. Why? because
    when each order gets wacked by some massive aggressive trade, each and every passive
    order that gets filled, an individual market data update is generated.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数交易所会将多个市场数据事件打包到单个UDP数据包中，使得市场数据事件流看起来像是一个时间序列，但实际上并非如此。一个简单的被动策略示例是，如果BBO价格水平的订单/数量少于X，则进行替换/深入订单簿。如果你将事件流等同于时间序列，那么回测将始终避免深度、*主动*交易。为什么？因为每当每个订单被某个大规模*主动*交易所搞砸时，每个被动订单被填充时，都会生成一个单独的市场数据更新。
- en: Now. if you treat each of market data update as a discrete event, your strat/backtest
    can see each update individually until it reaches the minimum X level and you
    replace away. aka a perfect 0 latency system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在。如果将每个市场数据更新都视为一个离散的事件，你的策略/回测可以看到每个更新，直到它达到最低的X水平并进行替换。也就是说，一个完美的零延迟系统。
- en: Whats wrong? In real-time all the orders get wacked at the same time including
    yours! with a group of market data events actually being an atomic operation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 出了什么问题？在实时交易中，所有订单同时被搞砸，包括你的！一组市场数据事件实际上是一个原子操作。
- en: number 2.... resetting position at start-of-day
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二……在交易日开始时重置持仓
- en: when doing multi-day backtesting its easy to forget the strategy is still open
    at the end of the day. e.g. strategy exit condition has not triggered as its usually
    in a loss state. Simplest example of this is, for every 1minute buy SPY aggressively then
    recycle it passively at +X ticks and start the day with no position. What happens
    is you have 100% winning trades! Why? because when the market moves against you
    the strategy just sits there drifting away from the bbo. (in a 10ft pool of red)
    waiting for that passive exit. Then when the market closes, your backtest resets
    the strat for the next day that loss is simply ignored, disappeared and never
    existed. If there were a wizard of oz, would certainly ask for such a button.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行多天回测时，很容易忘记策略在一天结束时仍然是开放的。例如，策略退出条件尚未触发，通常是处于亏损状态。最简单的例子是，每隔1分钟主动买入SPY，然后在+X个点处被动卖出，并且在新的交易日开始时没有持仓。结果是你有100%的盈利交易！为什么？因为当市场对你不利时，该策略就会漂浮在那里，远离最佳买卖价。
    （处于一个10英尺深的红色池中）等待被动出场。然后当市场收盘时，你的回测为下一个交易日重置策略，那笔亏损被简单地忽略了，消失了，从未存在过。如果有一个绿野仙踪的巫师，肯定会要求出现这样一个按钮。
- en: Always update the position/pnl after every trade - not just at the exit, and
    never reset between days.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每次交易后都要更新持仓/盈亏 - 不仅仅在退出时更新，并且不要在交易日之间重置。
- en: number 1.... aggressively buying at the bid and aggressively selling at the
    ask.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一……在出价处*主动*买入，然后在要价处*主动*卖出。
- en: Its so easy.. just aggressively buy at the bid, and aggressively sell at the
    ask for every tick, on every instrument for every exchange in the world and you,
    yourself, can bail Greece, Spain and probably half of the world no worries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这太容易了……只需在每一个tick上的每一个工具，对世界上每一个交易所*主动*出价购买，并且*主动*要价出售，你自己就可以救赎希腊，西班牙，甚至可能是世界上一半的国家，没问题。
- en: the problem is, in real life your aggressively buying at the *ask* aka paying
    the spread to fill now. I still screw this up all the time when testing out an
    idea. Usually by fiddling with different styles to enter/exit a trade then forgetting
    to revert the code back and preso.... $1M / day in pnl.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，在现实生活中，你会*主动*按照要价买入，也就是说，支付利差以立即成交。我在测试想法时经常搞砸这件事。通常是因为摆弄不同的交易进出方式，然后忘记还原代码，结果……每天盈利100万美元。
- en: '--------'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '--------'
- en: By now your either shaking your head saying how badly I suck, or quietly nodding
    about those indiscretions you never told anyone, or laughing your ass off saying
    yeah been there done that, will never do again.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你要么摇摇头表示我有多糟糕，要么悄悄点头表示你从未告诉任何人的错误，要么哈哈大笑说是的，我也碰到过，再也不会做了。
- en: oh the shame... lol
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，羞耻…哈哈
