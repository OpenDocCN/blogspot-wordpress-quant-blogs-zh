["```\n\n  #region Entitlements Table Watcher\n  internal class EntitlementTableChangedWatcher : DisposableObject\n  {\n      // http://msdn.microsoft.com/en-us/library/ms379594.aspx is a good article by Developmentor\n\n      private readonly EntitlementModel m_entitlementModel;\n      private SqlConnection m_connection;\n      private SqlDependency m_dependency;\n      private SqlCommand m_command;\n      private SqlDataReader m_reader;\n\n      public EntitlementTableChangedWatcher(EntitlementModel entitlementModel)\n      {\n          SqlDependency.Stop(ConnectionString);\n          SqlDependency.Start(ConnectionString);\n\n          this.m_connection = new SqlConnection(ConnectionString);\n          this.m_connection.Open();\n\n          this.m_entitlementModel = entitlementModel;\n      }\n\n      protected override void Free(bool disposedByUser)\n      {\n          if (disposedByUser)\n          {\n              this.CleanupCommand();\n              if (this.m_connection != null)\n              {\n                  this.m_connection.Dispose();\n                  this.m_connection = null;\n              }\n              SqlDependency.Stop(ConnectionString);\n          }\n\n          base.Free(disposedByUser);\n      }\n\n      private void CleanupCommand()\n      {\n          // In case we entered here from the callback, we need to clean up the last command so that\n          // we can issue a new command.\n          if (this.m_reader != null)\n          {\n              this.m_reader.Dispose();\n              this.m_reader = null;\n          }\n          if (this.m_command != null)\n          {\n              this.m_command.Notification = null;\n              this.m_command.Dispose();\n          }\n      }\n\n      public void PollForNotifications()\n      {\n          try\n          {\n              // In case we entered here from the callback, we need to clean up the last command so that\n              // we can issue a new command.\n              this.CleanupCommand();\n\n              // Create a new SqlCommand object.\n              // http://msdn.microsoft.com/en-us/library/aewzkxxh.aspx contains rules for the syntax of the query.\n              // Make sure that the command has no notification object associated with it\n              this.m_command = new SqlCommand(\"SELECT Column1, Column2 FROM dbo.Subscription\", this.m_connection)\n                                   {Notification = null};\n\n              // Create a dependency and associate it with the SqlCommand.\n              this.m_dependency = new SqlDependency(this.m_command);\n              this.m_dependency.OnChange += this.OnDependencyChange;\n\n              // We want to send a fresh SELECT command to SQL Server on startup and after we receive a notification.\n              // We use the DataReader to drain the result set resulting from the query. SQL Server will execute \n              // this command, and set up the entire Query Notification plumbing. SQL Server will execute\n              // this command internally every once in a while, and will send a one-time event to us when it detects that the\n              // query has changed. It is up to us to manually subscribe for further events.\n              this.m_reader = this.m_command.ExecuteReader();\n              while (this.m_reader.Read())\n                  ;\n          }\n          catch (Exception exc)\n          {\n              Logger.Log.Error(\"Problem in the Server's entitlement table watcher\", exc);\n          }\n      }\n\n      void OnDependencyChange(object sender, SqlNotificationEventArgs e)\n      {\n          // This event firing is a one-time thing ... we have to manually\n          // reset everything in order to receive another event\n          SqlDependency dependency = (SqlDependency) sender;\n          dependency.OnChange -= this.OnDependencyChange;\n\n          // Process the event\n          if (e.Type == SqlNotificationType.Change)\n          {\n              this.m_entitlementModel.ClearEntitlementsCache();\n          }\n\n          // Go back and wait for another event\n          this.PollForNotifications();\n      }\n  }\n  #endregion\n\n```"]