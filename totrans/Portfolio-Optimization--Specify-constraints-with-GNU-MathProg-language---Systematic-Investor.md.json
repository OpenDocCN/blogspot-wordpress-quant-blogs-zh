["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load packages\n\t#****************************************************************** \n\tload.packages('quantmod,quadprog,corpcor')\n\n\t#--------------------------------------------------------------------------\n\t# Create historical input assumptions\n\t#--------------------------------------------------------------------------\n\ttickers = dow.jones.components()\n\tia = aa.test.create.ia.custom(tickers, dates = '2000::2010')\t\n\n\t#--------------------------------------------------------------------------\n\t# Create Constraints & Solve QP problem\n\t#--------------------------------------------------------------------------\n\tn = ia$n\t\t\n\n\t# 0 <= x.i <= 1 \n\tconstraints = new.constraints(n, lb = 0, ub = 1)\n\n\t# SUM x.i = 1\n\tconstraints = add.constraints(rep(1, n), 1, type = '=', constraints)\t\t\n\n\t# Solve QP problem\n\tx = min.var.portfolio(ia, constraints)\t\n\n\t# plot weights\n\tbarplot(100*x, las=2, main='Minimum Variance Portfolio')\n\n```", "```\n\n###############################################################################\nset SYMBOLS ;\n\n# set min/max weights for individual stocks\nvar weight{i in SYMBOLS} >= 0, <= 1 ;\n\n# objective function, NOT USED\nminimize alpha : sum{i in SYMBOLS} weight[i] ;\n\n# weights must sum to 1 (fully invested)\nsubject to fully_invested : sum{i in SYMBOLS} weight[i] = 1 ;\n\ndata;\n\nset SYMBOLS :=  AA AXP BA BAC CAT CSCO CVX DD DIS GE HD HPQ IBM INTC JNJ JPM KFT KO MCD MMM MRK MSFT PFE PG T TRV UTX VZ WMT XOM ;\n###############################################################################\n\n```", "```\n\n\t#*****************************************************************\n\t# Load packages\n\t#****************************************************************** \n\t# load Rglpk to read GNU MathProg files\n\tload.packages('Rglpk')\n\n\t#--------------------------------------------------------------------------\n\t# Read GNU MathProg model/Setup constraints/Solve QP problem\n\t#--------------------------------------------------------------------------\t\n\tmodel.file = 'model1.mod'\n\n\t# read model\n\tmodel = Rglpk.read.model(model.file,type = 'MathProg') \t\n\n\t# convert GNU MathProg model to constraint used in solve.QP\n\tconstraints = Rglpk.create.constraints(model)$constraints\t\n\n\t# Solve QP problem\n\tx = min.var.portfolio(ia, constraints)\t\n\n\t# plot weights\n\tbarplot(100*x, las=2, main='Minimum Variance Portfolio using GNU MathProg model')\n\n```", "```\n\n###############################################################################\nset SYMBOLS ;\n\n# set min/max weights for individual stocks\nvar weight{i in SYMBOLS} >= 0, <= 1 ;\n\n# add binary, 1 if held, 0 if not held\nvar held{SYMBOLS} binary;\n\n# objective function, NOT USED\nminimize alpha : sum{i in SYMBOLS} weight[i] ;\n\n# weights must sum to 1 (fully invested)\nsubject to fully_invested : sum{i in SYMBOLS} weight[i] = 1 ;\n\n# min weight constraint for individual asset\nsubject to MinWgt {i in SYMBOLS} : weight[i] >= 0.025 * held[i];\n\n# max weight constraint for individual asset\nsubject to MaxWgt {i in SYMBOLS} : weight[i] <= .20 * held[i] ;\n\n# number of stocks in portfolio\nsubject to MaxAssetsLB : 0 <= sum {i in SYMBOLS} held[i] ;\nsubject to MaxAssetsUB : sum {i in SYMBOLS} held[i] <= 6 ;\n\ndata;\n\nset SYMBOLS :=  AA AXP BA BAC CAT CSCO CVX DD DIS GE HD HPQ IBM INTC JNJ JPM KFT KO MCD MMM MRK MSFT PFE PG T TRV UTX VZ WMT XOM ;\n###############################################################################\n\n```", "```\n\n\t#--------------------------------------------------------------------------\n\t# Read GNU MathProg model/Setup constraints/Solve QP problem\n\t#--------------------------------------------------------------------------\t\n\tmodel.file = 'model2.mod'\n\n\t# read model\n\tmodel = Rglpk.read.model(model.file,type = 'MathProg') \t\n\n\t# convert GNU MathProg model to constraint used in solve.QP\n\tconstraints = Rglpk.create.constraints(model)$constraints\t\n\n\t# Solve QP problem\n\tx = min.var.portfolio(ia, constraints)\t\n\n\t# plot weights\n\tbarplot(100*x, las=2, main='Minimum Variance Portfolio using GNU MathProg model \\n with Minimum Investment and Number of Assets Constraints')\n\n```", "```\n\n###############################################################################\nset SYMBOLS ;\n\n# set min/max weights for individual stocks\nvar long {i in SYMBOLS} >= 0, <= 0.8 ;\nvar short{i in SYMBOLS} >= 0, <= 0.5 ;\n\n# add binary, 1 if long, 0 if short\nvar islong{SYMBOLS} binary;\n\n# objective function, NOT USED\nminimize alpha : sum{i in SYMBOLS} long[i] ;\n\n# weights must sum to 1 (fully invested)\nsubject to fully_invested : sum{i in SYMBOLS} (long[i] - short[i]) = 1 ;\n\n# leverage is 1.6 = longs + shorts\nsubject to leverage : sum{i in SYMBOLS} (long[i] + short[i]) = 1.6 ;\n\n# force long and short to be mutually exclusive (only one of them is greater then 0 for each i)\nsubject to long_flag  {i in SYMBOLS} : long[i]  <= islong[i] ;\nsubject to short_flag {i in SYMBOLS} : short[i] <= (1 - islong[i]) ;\n\ndata;\n\nset SYMBOLS :=  AA AXP BA BAC CAT CSCO CVX DD DIS GE HD HPQ IBM INTC JNJ JPM KFT KO MCD MMM MRK MSFT PFE PG T TRV UTX VZ WMT XOM ;\n###############################################################################\n\n```", "```\n\n\t#--------------------------------------------------------------------------\n\t# Read GNU MathProg model/Setup constraints/Solve QP problem\n\t#--------------------------------------------------------------------------\t\n\tmodel.file = 'model3.mod'\n\n\t# read model\n\tmodel = Rglpk.read.model(model.file,type = 'MathProg') \t\n\n\t# convert GNU MathProg model to constraint used in solve.QP\n\tconstraints = Rglpk.create.constraints(model)$constraints\t\n\n\t# Solve QP problem, modify Input Assumptions to include short positions\n\tx = min.var.portfolio(aa.test.ia.add.short(ia), constraints)\t\n\n\t# Compute total weight = longs - short\n\tx = x[1:ia$n] - x[-c(1:ia$n)]\n\n\t# plot weights\n\tbarplot(100*x, las=2, main='Minimum Variance Portfolio using GNU MathProg model \\n with 130:30 Constraints')\n\n```", "```\n\n###############################################################################\nset SYMBOLS ;\n\nparam CurWgt{SYMBOLS} ;\n\n# set min/max weights for individual stocks\nvar weight{i in SYMBOLS} >= 0, <= 1 ;\n\n# TradePos[i] - TradeNeg[i] = CurWgt[i] - weight[i]\nvar TradePos{i in SYMBOLS} >= 0 ;\nvar TradeNeg{i in SYMBOLS} >= 0 ;\n\n# Only one of TradePos or TradeNeg is > 0\nvar TradeFlag{SYMBOLS} binary;\n\n# add binary, 1 if traded, 0 if not traded\nvar trade{SYMBOLS} binary;\n\n# objective function, NOT USED\nminimize alpha : sum{i in SYMBOLS} weight[i] ;\n\n# weights must sum to 1 (fully invested)\nsubject to fully_invested : sum{i in SYMBOLS} weight[i] = 1 ;\n\n# setup Trades for individual asset\nsubject to TradeRange {i in SYMBOLS} : (CurWgt[i] - weight[i]) = (TradePos[i] - TradeNeg[i]) ;\n\n# Only one of TradePos or TradeNeg is > 0\nsubject to TradeFlagPos {i in SYMBOLS} : TradePos[i] <= 100 * TradeFlag[i];\nsubject to TradeFlagNeg {i in SYMBOLS} : TradeNeg[i] <= 100 * (1 - TradeFlag[i]);\n\n# min trade size constraint for individual asset\nsubject to MinTradeSize {i in SYMBOLS} : (TradePos[i] + TradeNeg[i]) >= 0.05 * trade[i];\nsubject to MaxTradeSize {i in SYMBOLS} : (TradePos[i] + TradeNeg[i]) <= .20 * trade[i] ; \n\n# number of trades in portfolio\nsubject to MaxTrade : sum {i in SYMBOLS} trade[i] <= 8 ;\n\ndata;\n\nset SYMBOLS :=  AA AXP BA BAC CAT CSCO CVX DD DIS GE ;\n\nparam : CurWgt:=\nAA\t0.1\nAXP\t0.1\nBA\t0.1\nBAC\t0.1\nCAT\t0.1\nCSCO\t0.1\nCVX\t0.1\nDD\t0.1\nDIS\t0.1\nGE\t0.1\n; \n###############################################################################\n\n```", "```\n\n\t#--------------------------------------------------------------------------\n\t# Read GNU MathProg model/Setup constraints/Solve QP problem\n\t#--------------------------------------------------------------------------\t\n\tmodel.file = 'model4.mod'\n\n\t# reduce problem size\n\tia = aa.test.create.ia.custom(tickers[1:10], dates = '2000::2010')\n\n\t# read model\n\tmodel = Rglpk.read.model(model.file,type = 'MathProg') \t\n\n\t# convert GNU MathProg model to constraint used in solve.QP\n\tconstraints = Rglpk.create.constraints(model)$constraints\t\n\n\t# Solve QP problem\n\tx = min.var.portfolio(ia, constraints)\t\n\n\t# plot weights\n\tbarplot(100*x, las=2, main='Minimum Variance Portfolio using GNU MathProg model \\n with Turnover Constraints')\n\n```"]