- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-12 19:35:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-12 19:35:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: __getattr__ considered harmful | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**__getattr__ considered harmful | Coding the markets**'
- en: 来源：[https://etrading.wordpress.com/2011/03/08/__getattr__-considered-harmful/#0001-01-01](https://etrading.wordpress.com/2011/03/08/__getattr__-considered-harmful/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2011/03/08/__getattr__-considered-harmful/#0001-01-01](https://etrading.wordpress.com/2011/03/08/__getattr__-considered-harmful/#0001-01-01)
- en: __getattr__ considered harmful
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**__getattr__ considered harmful**'
- en: March 8, 2011
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: March 8, 2011
- en: Today’s coding reminded me why avoid __getattr__ in Python. FYI, a class that
    implements a __getattr__ method overrides the member access operator “.”  So simply
    referencing object.member invokes object.__getattr__( member). A typical debugging
    technique in Python is to litter code with print object.member. Guess what happens
    if you use that debugging technique inside a __getattr__ method ?  Like, duh ?! 
    😉
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的编码让我想起为什么要避免在Python中使用__getattr__。FYI，一个实现了__getattr__方法的类会覆盖成员访问操作符“.”。因此，简单地引用object.member会调用object.__getattr__(member)。在Python中的一种典型调试技术是在代码中随处打印object.member。猜猜如果你在__getattr__方法内部使用这种调试技术会发生什么？像，duh？!
    😉
