["```\n#cleaned up the code to eliminate leftovers from previous posts and studies\n#see http://timelyportfolio.blogspot.com for the history and older code   require(quantmod)\nrequire(PerformanceAnalytics)   #get data from St. Louis Federal Reserve (FRED)\ngetSymbols(\"GS20\",src=\"FRED\") #load 20yTreasury; 20y has gap 86-93; 30y has gap in early 2000s\ngetSymbols(\"GS30\",src=\"FRED\") #load 30yTreasury to fill 20y gap 86-93\ngetSymbols(\"GS10\",src=\"FRED\") #load 10yTreasury\ngetSymbols(\"BAA\",src=\"FRED\") #load BAA\ngetSymbols(\"SP500\",src=\"FRED\") #load SP500\n#now Dow Jones Indexes\ngetSymbols(\"DJIA\",src=\"FRED\") #load daily Dow Jones Industrial\ngetSymbols(\"DJUA\",src=\"FRED\") #load daily Dow Jones Utility   DJUADJIA <- DJUA/DJIA   #get CRB data from a csv file\nCRB <- as.xts(read.csv(\"crb.csv\",row.names=1))[,1]   #fill 20y gap from discontinued 20y Treasuries with 30y\nGS20[\"1987-01::1993-09\"] <- GS30[\"1987-01::1993-09\"]   #do a little manipulation to get the data lined up on monthly basis\nSP500  <-  to.monthly(SP500)[,4]\nGS10  <-  to.monthly(GS10)[,4]\nDJUADJIA <- to.monthly(DJUADJIA)[,4]\n#get monthly format to yyyy-mm-dd with the first day of the month\nindex(SP500) <- as.Date(index(SP500))\nindex(GS10) <- as.Date(index(GS10))\nindex(DJUADJIA) <- as.Date(index(DJUADJIA))\n#my CRB data is end of month; could change but more fun to do in R\nCRB <- to.monthly(CRB)[,4]\nindex(CRB) <- as.Date(index(CRB))   #let's merge all this into one xts object; CRB starts last in 1956\nassets <- na.omit(merge(GS20,SP500,CRB,DJUADJIA))\n#use ROC for SP500 and CRB and momentum for yield data\nassetROC <- na.omit(merge(momentum(assets[,1])/100,ROC(assets[,2:4],type=\"discrete\")))   ############Turbulence calculation\n#get Correlations\ncorrBondsSp <- runCor(assetROC[,1],assetROC[,2],n=7)\ncorrBondsCrb <- runCor(assetROC[,1],assetROC[,3],n=7)\ncorrSpCrb <- runCor(assetROC[,2],assetROC[,3],n=7)\n#composite measure of correlations between asset classes and roc-weighted correlations\nassetCorr <- (corrBondsSp+corrBondsCrb+corrSpCrb+\n\t(corrBondsSp*corrSpCrb*assetROC[,2])+\n\t(corrBondsCrb*corrSpCrb*assetROC[,3])-\n\tassetROC[,1])/6\n#sum of ROCs of asset classes\nassetROCSum <- assetROC[,1]+assetROC[,2]+assetROC[,3]\n#finally the turbulence measure\nturbulence <- abs(assetCorr*assetROCSum*100)\ncolnames(turbulence) <- \"Turbulence-correlation\"\n############   ############Get Bond Return Data\n#get bond returns to avoid proprietary data problems\n#see previous timelyportfolio blogposts for explanation\n#probably need to make this a function since I will be using so much\nrequire(RQuantLib)\nGS10pricereturn <- GS10  #set this up to hold price returns   GS10pricereturn[1,1] <- 0\ncolnames(GS10pricereturn) <- \"BondPriceReturn\"\n#I know I need to vectorize this but not qualified enough yet\n#Please feel free to comment to show me how to do this\nfor (i in 1:(NROW(GS10)-1)) {\n  GS10pricereturn[i+1,1] <- FixedRateBondPriceByYield(yield=GS10[i+1,1]/100,issueDate=Sys.Date(), \n\tmaturityDate= advance(\"UnitedStates/GovernmentBond\", Sys.Date(), 10, 3),\n\trates=GS10[i,1]/100,period=2)[1]/100-1\n}   #interest return will be yield/12 for one month\nGS10interestreturn <- lag(GS10,k=1)/12/100\ncolnames(GS10interestreturn) <- \"BondInterestReturn\"   #total return will be the price return + interest return\nGS10totalreturn <- GS10pricereturn + GS10interestreturn\ncolnames(GS10totalreturn) <- \"BondTotalReturn\"\nassetROC <- na.omit(merge(GS10totalreturn,ROC(assets[,2:4],type=\"discrete\")))\n############   ############System building\n#wish I could remember where I got some of this code\n#most likely candidate is www.fosstrading.com\n#please let me know if you know the source\n#so I can give adequate credit   #let's use basic relative strength to pick sp500 or crb\n#know I can do this better in R but here is my ugly code\n#to calculate 12 month slope of sp500/crb and djua/djia\nwidth=12\nfor (i in 1:(NROW(assets)-width)) {\n\t#get sp500/crb slope\n\tmodel <- lm(assets[i:(i+width),2]/assets[i:(i+width),3]~index(assets[i:(i+width)]))\n\tifelse(i==1,assetSlope <- model$coefficients[2],assetSlope <- rbind(assetSlope,model$coefficients[2]))\n\t#get djua/djia slope; already calculated ratio so just take that\n\tmodel_util <- lm(assets[i:(i+width),4]~index(assets[i:(i+width)]))\n\tifelse(i==1,assetSlopeUtil <- model_util$coefficients[2],assetSlopeUtil <- rbind(assetSlopeUtil,model_util$coefficients[2]))\n}\nassetSlope <- xts(cbind(assetSlope),order.by=index(assets)[(width+1):NROW(assets)])\nassetSlopeUtil <- xts(cbind(assetSlopeUtil),order.by=index(assets)[(width+1):NROW(assets)])\nassetSlope <- merge(assetSlope,assetSlopeUtil)\n#use turbulence to determine in or out of equal-weighted sp500 and crb\nsignal <- ifelse(turbulence>0.8,0,1)   #use slope of sp500/crb to determine sp500 or crb\nsignal2 <- ifelse(assetSlope[,1]>0,1,2)   #lag signals\n#if we knew what would happen tomorrow, we can eliminate all this effort\nsignal <- lag(signal,k=1)\nsignal[1] <- 0\nsignal2 <- lag(signal2,k=1)\nsignal2[1] <- 0   signals_returns <- merge(signal,signal2,assetROC,assetSlope)\n#get sp500 or crb return based on slope when turbulence low or use bonds as cash\nret <- ifelse(signals_returns[,2]==1&signals_returns[,1]==1,signals_returns[,4],\n\tifelse(signals_returns[,2]==2&signals_returns[,1]==1,signals_returns[,5],\n\tsignals_returns[,3]))\n#get sp500 or crb return based on slope when turbulence low or use utility spread as cash\nret_util <- ifelse(signals_returns[,2]==1&signals_returns[,1]==1,signals_returns[,4],\n\tifelse(signals_returns[,2]==2&signals_returns[,1]==1,signals_returns[,5],\n\tsignals_returns[,6]))\n#get sp500 or crb return based on slope when turbulence low or use utility spread\n#as cash only if slope positive\nret_util_slope <- ifelse(signals_returns[,2]==1&signals_returns[,1]==1,signals_returns[,4],\n\tifelse(signals_returns[,2]==2&signals_returns[,1]==1,signals_returns[,5],\n\tifelse(signals_returns[,8]>0,signals_returns[,6],signals_returns[,3])))\nret_util[1] <- 0\nret_util_slope[1] <- 0   #get system performance\nsystem_perf_rs <- ret\nsystem_perf_rs_util <- ret_util\nsystem_perf_rs_util_slope <- ret_util_slope   perf_comparison <- merge(system_perf_rs_util_slope,system_perf_rs_util,system_perf_rs,(assetROC[,2]+assetROC[,3])/2,assetROC[,2],assetROC[,3])\ncolnames(perf_comparison) <- c(\"System-with-turbulence-filter and RS-util with slope\",\n\t\"System-with-turbulence-filter and RS-util\", \"System-with-turbulence-filter and RS-original\",\n\t\"Equal-weighted\",\"S&P500\",\"CRB\")   charts.PerformanceSummary(perf_comparison,ylog=TRUE,\n\tmain=\"Turbulence-based System with RS and Utility Spread vs Equal-Weighted, CRB, and SP500\",\n\tcolorset=c(\"cadetblue\",\"darkolivegreen3\",\"plum3\",\"gray70\",\"indianred\",\"burlywood3\"))\n```"]