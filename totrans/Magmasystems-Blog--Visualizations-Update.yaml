- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:05:01'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Magmasystems Blog: Visualizations Update'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://magmasystems.blogspot.com/2007/12/visualizations-update.html#0001-01-01](http://magmasystems.blogspot.com/2007/12/visualizations-update.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Stephen Few](http://www.perceptualedge.com/about.php)'
  prefs: []
  type: TYPE_NORMAL
- en: is rapidly positioning himself as the guru of business visualizations. His name
    has been brought to my attention several times over the past few weeks as someone
    to pay attention to .... "a new
  prefs: []
  type: TYPE_NORMAL
- en: '[Edward Tufte](http://www.edwardtufte.com/tufte/)'
  prefs: []
  type: TYPE_NORMAL
- en: '", if you will.'
  prefs: []
  type: TYPE_NORMAL
- en: Few has an online library with a lot of free articles to read. Right now, I'm
    reading
  prefs: []
  type: TYPE_NORMAL
- en: '[Multivariate Analysis using Heatmaps](http://www.perceptualedge.com/articles/b-eye/heatmaps.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: . This is especially worthwhile reading following last week's visit by Richard
    and Markus of
  prefs: []
  type: TYPE_NORMAL
- en: '[Panopticon](http://www.panopticon.com/panopticon/)'
  prefs: []
  type: TYPE_NORMAL
- en: ', who showed more reasons why we should graduate from the free Microsoft'
  prefs: []
  type: TYPE_NORMAL
- en: heatmap
  prefs: []
  type: TYPE_NORMAL
- en: control to the more feature-laden,
  prefs: []
  type: TYPE_NORMAL
- en: doubleplusunfree
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: product. As
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: adds more features in the value chain, it will be increasingly difficult to
    justify using a free product.
  prefs: []
  type: TYPE_NORMAL
- en: '------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: Which brings me to another point that I have been thinking of ... a point that
    I raised on my previous blog posting. In the field of Enterprise Software, where
    do the responsibilities of a vendor begin and where do they end?
  prefs: []
  type: TYPE_NORMAL
- en: Take
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: ', for instance. You can bind a streaming "'
  prefs: []
  type: TYPE_NORMAL
- en: dataset
  prefs: []
  type: TYPE_NORMAL
- en: '" to'
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: ', and'
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: will render a
  prefs: []
  type: TYPE_NORMAL
- en: realtime
  prefs: []
  type: TYPE_NORMAL
- en: updating
  prefs: []
  type: TYPE_NORMAL
- en: Heatmap
  prefs: []
  type: TYPE_NORMAL
- en: to visualize that
  prefs: []
  type: TYPE_NORMAL
- en: dataset
  prefs: []
  type: TYPE_NORMAL
- en: . Of course, you ask how you get data into
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: ', and you come back with the concept of input adapters.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, gradually, you wonder if their input adapters cover
  prefs: []
  type: TYPE_NORMAL
- en: KDB
  prefs: []
  type: TYPE_NORMAL
- en: ', Wombat, Reuters,'
  prefs: []
  type: TYPE_NORMAL
- en: Vhayu
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: OpenTick
  prefs: []
  type: TYPE_NORMAL
- en: ', generic'
  prefs: []
  type: TYPE_NORMAL
- en: JMS
  prefs: []
  type: TYPE_NORMAL
- en: ', sockets, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Then you wonder if
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: has input adapters that take the output of
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engines, like Coral8 and
  prefs: []
  type: TYPE_NORMAL
- en: Streambase
  prefs: []
  type: TYPE_NORMAL
- en: . Or, you have a crazy thought like
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: embedding a copy of
  prefs: []
  type: TYPE_NORMAL
- en: Esper
  prefs: []
  type: TYPE_NORMAL
- en: /
  prefs: []
  type: TYPE_NORMAL
- en: NEsper
  prefs: []
  type: TYPE_NORMAL
- en: inside of itself.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you get really greedy and wonder if
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: provides built-in FIX adapters that will devour a FIX 4.4 stream of orders and
    executions and show you what exchanges are slow today.
  prefs: []
  type: TYPE_NORMAL
- en: Then you wonder what kinds of analytical tools
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: might interface with ... since
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: is doing parsing and analysis of the streaming data anyway, can't it just take
    an extra step and analyze the silly data.
  prefs: []
  type: TYPE_NORMAL
- en: But, then if you are demanding all of these things of
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: and Coral8, how do you hook them together? Does the dog wag the tail or does
    the tail wag the dog?
  prefs: []
  type: TYPE_NORMAL
- en: Or, do we just consider
  prefs: []
  type: TYPE_NORMAL
- en: Panopticon
  prefs: []
  type: TYPE_NORMAL
- en: a simple visualization tool, demanding nothing more of it then the ability to
    display brightly colored rectangles of streaming data, and likewise, do we ask
    nothing more of Coral8 than to do what it does best ... recognize patterns and
    perform filtering and aggregations.
  prefs: []
  type: TYPE_NORMAL
- en: As Dali-
  prefs: []
  type: TYPE_NORMAL
- en: esque
  prefs: []
  type: TYPE_NORMAL
- en: as these thoughts may appear, this is the kind of things that I need to consider.
    In my quest for an ecosystem around the
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine, do we ask for the
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine vendors to expand outwards, or do we take the outer layer of components
    (
  prefs: []
  type: TYPE_NORMAL
- en: ie
  prefs: []
  type: TYPE_NORMAL
- en: ': the visualization and analysis tools) and ask them to expand inwards to meet
    the'
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine. Whatever it is, my wish would be for a true plug-and-play architecture
    between the
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine, its input components, and its output components.
  prefs: []
  type: TYPE_NORMAL
- en: ©2007 Marc Adler - All Rights Reserved
  prefs: []
  type: TYPE_NORMAL
