- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-12 19:41:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-12 19:41:32
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: RPC server | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RPC服务器 | 编写市场代码
- en: 来源：[https://etrading.wordpress.com/2008/08/18/rpc-server/#0001-01-01](https://etrading.wordpress.com/2008/08/18/rpc-server/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2008/08/18/rpc-server/#0001-01-01](https://etrading.wordpress.com/2008/08/18/rpc-server/#0001-01-01)
- en: RPC server
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RPC服务器
- en: August 18, 2008
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2008年8月18日
- en: Just finished the first cut of my RPC server, which is coded in Python. Client
    JavaScript code running in the browser subscribes to Liberator subjects, which
    invokes a subscription request in the RPC server. The server sends cached static
    data back up to the client on the Liberator subject. The data is sent as a serialized
    Python dictionary. So on the server side we can just apply str() to the Python
    dict. When the data arrives in the browser we can do a JavaScript eval() to turn
    it into a JavaScript object. Simple and flexible !
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚完成了我的RPC服务器的第一次切割，这是用Python编写的。在浏览器中运行的客户端JavaScript代码订阅了Liberator主题，这会在RPC服务器中触发一个订阅请求。服务器将缓存的静态数据通过Liberator主题发送回客户端。数据以序列化的Python字典形式发送。因此，在服务器端我们只需对Python字典应用str()。当数据到达浏览器时，我们可以使用JavaScript
    eval()将其转换为JavaScript对象。简单而灵活！
