- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-12 19:31:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-12 19:31:14
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Spreadsheets are code | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表格就是代码 | 编码市场
- en: 来源：[https://etrading.wordpress.com/2015/08/13/spreadsheets-are-code/#0001-01-01](https://etrading.wordpress.com/2015/08/13/spreadsheets-are-code/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2015/08/13/spreadsheets-are-code/#0001-01-01](https://etrading.wordpress.com/2015/08/13/spreadsheets-are-code/#0001-01-01)
- en: Spreadsheets are code
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格就是代码
- en: August 13, 2015
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2015年8月13日
- en: '[Felienne Hermans](http://www.felienne.com/) has made it her mission to point
    out that [“spreadsheets are code”](http://www.slideshare.net/Felienne/spreadsheets-are-code-online).
    She’s most definitely right about that, and a whole host of the other consequences
    that she draws from that insight, specifically that we should apply the [techniques
    developed by mainstream software engineering to spreadsheets](http://spreadsheetlab.org/sems15/):
    version control, testing and design guidelines for clean structure, like the FAST
    standard. Whenever you create a sheet with formulae in it you’re programming.
    Ignoring that fact is one of the reasons spreadsheet disasters keep happening.
    I couldn’t agree more with Prof Hermans on that score. But I think we need to
    go further in the comparison of spreadsheets with code, and point out some major
    differences.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Felienne Hermans](http://www.felienne.com/) 将指出 [“表格就是代码”](http://www.slideshare.net/Felienne/spreadsheets-are-code-online)
    作为她的使命。她在这个问题上绝对是正确的，并且她从那个洞察中得出了许多其他后果，特别是我们应该将[主流软件工程开发的技术应用于表格](http://spreadsheetlab.org/sems15/)：版本控制、测试和设计指南以实现清晰结构，如FAST标准。无论何时你创建一个包含公式的表格，你都是在编程。忽视这个事实是导致表格灾难不断发生的原因之一。我完全同意Hermans教授的观点。但我想我们在将表格与代码进行比较时需要更进一步，并指出一些主要的区别。'
- en: Conventional code, when deployed to its production runtime environment does
    not come with an IDE that enables any user to change the implementation! A trader
    can’t reach inside his Bloomberg or TradeWeb terminal and change its implementation.
    But Excel allows any user to change any formula in a financial model.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传统的代码在部署到其生产运行环境时，并不带有IDE，这使得任何用户都能更改实现！交易员无法打开他的彭博或TradeWeb终端，并更改其实现。但Excel允许任何用户更改财务模型中的任何公式。
- en: Well structured conventional code separates user interface from business logic.
    This separation of concerns is often called the MVC pattern. A typical modern
    web application has an HTML/CSS/JavaScript user interfaces running in browsers
    talking to a server hosted backend coded in Python on top of Django and an RDBMS.
    Excel makes it impossible to decouple the user interface from the logic expressed
    in formulae and VBA. Modern applications present a choice for their architects;
    does a given piece of code belong in the browser, the server tier or the DB ?
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结构良好的传统代码通过将用户界面与业务逻辑分离来实现复用。这种关注点的分离通常被称为MVC模式。一个典型的现代网络应用程序拥有HTML/CSS/JavaScript用户界面在浏览器中运行，与托管在服务器上的用Python编写的Django和关系型数据库上的后端通信。Excel使得无法将用户界面与公式和VBA中表达的逻辑解耦。现代应用程序为它们的架构师提供了选择；给定的代码属于浏览器、服务器层还是数据库？
- en: Conventional code enables reuse through components. Each Excel spreadsheet is
    like an island, and monolithic. How can spreadsheets be composed together to draw
    input and feed output to each other? Only with manual, error prone operations.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传统的代码通过组件实现复用。每个Excel表格都像是一个孤岛，是单块的。表格如何相互组合以相互输入输出？只有通过手动、易出错的操作。
- en: 'Unit testing: the unit testing philosophy calls for any significant component
    to have a set of separate test code that proves compliance with pre and post conditions
    as well as yielding specified results. Also required is the ability to run a set
    of tests automatically and record the results. All of that is a capability that
    Excel simply doesn’t have.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试：单元测试的理念要求任何重要的组件都有一套独立的测试代码，证明符合前条件和后条件，以及产生指定的结果。还需要能够自动运行一套测试并记录结果。这些都是Excel所不具备的能力。
- en: To realise points 1 to 4 for spreadsheets we need an alternate run time that
    can host spreadsheets on a server, and decouple the financial logic expressed
    in worksheet formulae, VBA & XLLs from the user interface. In the next post I’ll
    give more detail on how [SpreadServe](http://spreadserve.com) solves all the issues
    raised above.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在表格中实现1至4点，我们需要一个替代的运行时环境，它可以在服务器上托管表格，并使工作表公式、VBA和XLL中表达的财务逻辑与用户界面解耦。在下一篇文章中，我将详细介绍[SpreadServe](http://spreadserve.com)如何解决上述所有问题。
