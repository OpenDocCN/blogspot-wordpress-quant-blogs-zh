- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-12 19:33:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月12日 19:33:41
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: CPU cache size | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CPU缓存大小 | 编码市场
- en: 来源：[https://etrading.wordpress.com/2012/09/21/cpu-cache-size/#0001-01-01](https://etrading.wordpress.com/2012/09/21/cpu-cache-size/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2012/09/21/cpu-cache-size/#0001-01-01](https://etrading.wordpress.com/2012/09/21/cpu-cache-size/#0001-01-01)
- en: CPU cache size
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CPU缓存大小
- en: September 21, 2012
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2012年9月21日
- en: Here’s some code I wrote back in 2009 to figure out the L1 and L2 cache sizes
    on a Windows host. It works by populating an area of memory with randomized pointers
    that point back into that same area. The randomization defeats stride based attempts
    by CPUs to predict the next cache access. The size of the memory region is stepped
    up in powers of two, and timings taken. The timings should show when the region
    size exhausts the L1 and L2 caches. This code illustrates why control of memory
    locality is so important in writing cache friendly code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我2009年写的一些代码，用于确定Windows主机上的L1和L2缓存大小。它通过填充一个内存区域，使其中的随机指针指向同一区域，来运行。随机化打败了CPU基于步幅的尝试来预测下一个缓存访问。内存区域的大小按二的幂递增，并记录时间。这些时间应该显示出内存区域大小耗尽L1和L2缓存的时候。这段代码说明了为什么控制内存局部性对于编写友好的缓存代码是如此重要。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
