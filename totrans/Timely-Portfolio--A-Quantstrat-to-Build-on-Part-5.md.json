["```\n#thanks so much to the developers of quantstrat\n#99% of this code comes from the demos in the quantstrat package   #in this I add a variation of the CUD portfolio\n#with standard deviations and compare the CUD\n#and the new CUDsd   require(quantstrat)   #now let's define our silly countupdown function\nCUD <- function(price,n) {\n\t#CUD takes the n-period sum of 1 (up days) and -1 (down days)\n\ttemp <- runSum(ifelse(ROC(price,1,type=\"discrete\") > 0,1,-1),n)\n\tcolnames(temp) <- \"CUD\"\n\ttemp\n}   #since I've had some very prescient comments\n#about standard deviations I'll go ahead and try an sd sum system\nCUDsd <- function(price,nsd,nsum) {\n\t#CUDsd takes the n-period sum of standard deviations\n\t#feel free to substitute runMAD with runSD if you would like\n\ttemp <- ROC(price,1,type=\"discrete\")/runMAD(ROC(price,1,type=\"discrete\"),n=nsd)\n\t#bollinger band style sum - uncomment next line\n\t#temp <- (price-runMedian(price,n=10)-1)/runMAD(ROC(price,1,type=\"discrete\"),n=nsd)\n\t#doesn't help but if you want to experiment with summing only a n*sd move\n\t#uncomment and mess with the numbers\n\t#temp <- ifelse(abs(temp)>1,temp,0)\n\ttemp <- runSum(temp,n=nsum)\n\tcolnames(temp) <- \"CUDsd\"\n\ttemp\n}   #I added this BuyHold as an example; see previous post\n#quantstrat version 4 for details\n#here is the remnant function\n#BuyHold <- function(price,periodtobuy) {\n#\t#just enter true (1) the period specified as buy and hold\n#\t#for the remainder\n#\ttemp <- as.xts(rep(0,NROW(price)),order.by=index(price))\n#\tcolnames(temp) <- \"BuyHold\"\n#\ttemp[periodtobuy,1]<-1\n#\ttemp\n#}   try(rm(\"order_book.CUD\",pos=.strategy),silent=TRUE)\ntry(rm(\"order_book.CUDsd\",pos=.strategy),silent=TRUE)\ntry(rm(\"account.CUD\",\"portfolio.CUD\",pos=.blotter),silent=TRUE)\ntry(rm(\"account.CUDsd\",\"portfolio.CUDsd\",pos=.blotter),silent=TRUE)\ntry(rm(\"port.st\",\"port.stsd\",\"symbols\",\"symbol\",\"stratCUD\",\"stratCUDsd\",\n\t\"initDate\",\"initEq\",'start_t','end_t','num_periods'),silent=TRUE)   #specify this for the rolling periods to use for our signal\nnum_periods=50\n#specify these for the CUDsd function\n#I separated the sd period from the sum period\n#if anyone wants to fool around with the degrees of freedom\nnum_periods_sd=50\nnum_periods_sum=50   # Initialize a strategy object\nstratCUD <- strategy(\"CUD\")\n# Add an indicator\nstratCUD <- add.indicator(strategy = stratCUD, name = \"CUD\", \n\targuments = list(price = quote(Cl(mktdata)),n=num_periods),\n\tlabel=\"CUD\")\n# enter when CUD > 0\nstratCUD <- add.signal(strategy = stratCUD, name=\"sigThreshold\",\n\targuments = list(threshold=0, column=\"CUD\",relationship=\"gte\", cross=TRUE),\n\tlabel=\"CUD.gte.0\")\n# exit when CUD < 0\nstratCUD <- add.signal(strategy = stratCUD, name=\"sigThreshold\",\n\targuments = list(threshold=0, column=\"CUD\",relationship=\"lt\",cross=TRUE),\n\tlabel=\"CUD.lt.0\")\nstratCUD <- add.rule(strategy = stratCUD, name='ruleSignal', \n\targuments = list(sigcol=\"CUD.gte.0\", sigval=TRUE, orderqty=1000, ordertype='market',\n\t orderside='long', pricemethod='market', replace=FALSE), type='enter', path.dep=TRUE)\nstratCUD <- add.rule(strategy = stratCUD, name='ruleSignal', \n\targuments = list(sigcol=\"CUD.lt.0\", sigval=TRUE, orderqty='all',\n\t ordertype='market', orderside='long', pricemethod='market', replace=FALSE),\n\t type='exit', path.dep=TRUE)   # Initialize a strategy object for the new CUDsd\nstratCUDsd <- strategy(\"CUDsd\")\n# Add an indicator\nstratCUDsd <- add.indicator(strategy = stratCUDsd, name = \"CUDsd\", \n\targuments = list(price = quote(Cl(mktdata)),nsd=num_periods_sd,nsum=num_periods_sum),\n\tlabel=\"CUDsd\")\n# enter when CUDsd > 0\nstratCUDsd <- add.signal(strategy = stratCUDsd, name=\"sigThreshold\",\n\targuments = list(threshold=0, column=\"CUDsd\",relationship=\"gte\", cross=TRUE),\n\tlabel=\"CUDsd.gte.0\")\n# exit when CUDsd < 0\nstratCUDsd <- add.signal(strategy = stratCUDsd, name=\"sigThreshold\",\n\targuments = list(threshold=0, column=\"CUDsd\",relationship=\"lt\",cross=TRUE),\n\tlabel=\"CUDsd.lt.0\")\nstratCUDsd <- add.rule(strategy = stratCUDsd, name='ruleSignal', \n\targuments = list(sigcol=\"CUDsd.gte.0\", sigval=TRUE, orderqty=1000, ordertype='market',\n\t orderside='long', pricemethod='market', replace=FALSE), type='enter', path.dep=TRUE)\nstratCUDsd <- add.rule(strategy = stratCUDsd, name='ruleSignal', \n\targuments = list(sigcol=\"CUDsd.lt.0\", sigval=TRUE, orderqty='all',\n\t ordertype='market', orderside='long', pricemethod='market', replace=FALSE),\n\t type='exit', path.dep=TRUE)   currency(\"USD\")\nsymbols = c(\"GSPC\",\"GDAXI\")\nfor (symbol in symbols) {\n\tstock(symbol, currency=\"USD\",multiplier=1)\n\t#use paste with ^ to get index data\n\tgetSymbols(paste(\"^\",symbol,sep=\"\"),adjust=T,from=\"1900-12-31\")\n\tassign(symbol,to.weekly(get(symbol)))\n}   initDate='1949-12-31'\ninitEq=1000000\nport.st<-'CUD' #use a string here for easier changing of parameters and re-trying\nport.stsd <- 'CUDsd'   initPortf(port.st, symbols=symbols, initDate=initDate, initEq=initEq)\ninitAcct(port.st, portfolios=port.st, initDate=initDate, initEq=initEq)\ninitOrders(portfolio=port.st, initDate=initDate)   initPortf(port.stsd, symbols=symbols, initDate=initDate)\ninitAcct(port.stsd, portfolios=port.stsd, initDate=initDate,, initEq=initEq)\ninitOrders(portfolio=port.stsd, initDate=initDate)   print(\"setup completed\")   # Process the indicators and generate trades\nstart_t<-Sys.time()\nout<-try(applyStrategy(strategy=stratCUD , portfolios=port.st ) )\nend_t<-Sys.time()\nprint(\"Strategy Loop:\")\nprint(end_t-start_t)   # Process buy and hold strategy\nstart_t<-Sys.time()\nout<-try(applyStrategy(strategy=stratCUDsd , portfolios=port.stsd ) )\nend_t<-Sys.time()\nprint(\"Strategy Loop:\")\nprint(end_t-start_t)   start_t<-Sys.time()\nupdatePortf(Portfolio=port.st,Dates=paste('::',as.Date(Sys.time()),sep=''))\nupdatePortf(Portfolio=port.stsd,Dates=paste('::',as.Date(Sys.time()),sep=''))\nend_t<-Sys.time()\nprint(\"trade blotter portfolio update:\")\nprint(end_t-start_t)   # hack for new quantmod graphics, remove later\nthemelist<-chart_theme()\nthemelist$col$up.col<-'lightgreen'\nthemelist$col$dn.col<-'pink'   for(symbol in symbols){\n#\tdev.new()\n#\tchart.Posn(Portfolio=port.stsd,Symbol=symbol,theme=themelist)\n#\t#add the CUD indicator to the bottom of the chart\n#\tplot(add_TA(CUDsd(get(symbol)[,4],nsd=num_periods_sd,nsum=num_periods_sum)))\n#\tplot(add_TA(CUD(get(symbol)[,4],n=num_periods),on=4,col=\"red\"))\n\tdev.new()\n\tchart.Reconcile(port.stsd,port.st,symbol)\n\tplot(add_TA(CUDsd(get(symbol)[,4],nsd=num_periods_sd,nsum=num_periods_sum)))\n\tplot(add_TA(CUD(get(symbol)[,4],n=num_periods),on=5,col=\"red\"))   }   tradeStats(port.st)\ntradeStats(port.stsd)\n```"]