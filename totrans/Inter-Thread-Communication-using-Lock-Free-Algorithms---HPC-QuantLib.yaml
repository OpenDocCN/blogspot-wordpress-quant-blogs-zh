- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-17 23:40:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-17 23:40:20'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Inter-Thread Communication using Lock-Free Algorithms – HPC-QuantLib
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Inter-Thread Communication using Lock-Free Algorithms – HPC-QuantLib
- en: 来源：[https://hpcquantlib.wordpress.com/2012/05/18/inter-thread-communication-using-lock-free-algorithms/#0001-01-01](https://hpcquantlib.wordpress.com/2012/05/18/inter-thread-communication-using-lock-free-algorithms/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://hpcquantlib.wordpress.com/2012/05/18/inter-thread-communication-using-lock-free-algorithms/#0001-01-01](https://hpcquantlib.wordpress.com/2012/05/18/inter-thread-communication-using-lock-free-algorithms/#0001-01-01)
- en: In his blog [Martin Fowler](http://martinfowler.com) discusses the [LMAX architecture](http://martinfowler.com/articles/lmax.html),
    a high throughput retail financial trading platform. A remarkable detail of the
    architecture is the central business logic processor, which is implemented as
    a single threaded Java program. The supporting pre- and post-processing is running
    as a multi threaded application using [lock-free](http://en.wikipedia.org/wiki/Non-blocking_algorithm)
    ring buffers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: In his blog [Martin Fowler](http://martinfowler.com) discusses the [LMAX architecture](http://martinfowler.com/articles/lmax.html),
    a high throughput retail financial trading platform. A remarkable detail of the
    architecture is the central business logic processor, which is implemented as
    a single threaded Java program. The supporting pre- and post-processing is running
    as a multi threaded application using [lock-free](http://en.wikipedia.org/wiki/Non-blocking_algorithm)
    ring buffers.
- en: In general lock-free algorithms are implemented using atomic read-modify-write
    primitives which are provided by modern CPUs. Probably the most used lock-free
    algorithm in the boost library is the reference counting in boost::shared_ptr.
    On popular hardware platforms these reference count updates are based on atomic
    increments/decrements using  [compare-and-swap](http://en.wikipedia.org/wiki/Compare-and-swap)
    (CAS) operations. The performance improvements over normal mutex exclusion locks
    are significant as the following little experiment shows. Basis for this experiment
    is a function which increments an integer counter 500 million times in a loop
    [1]. This loop is carried out in
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: In general lock-free algorithms are implemented using atomic read-modify-write
    primitives which are provided by modern CPUs. Probably the most used lock-free
    algorithm in the boost library is the reference counting in boost::shared_ptr.
    On popular hardware platforms these reference count updates are based on atomic
    increments/decrements using  [compare-and-swap](http://en.wikipedia.org/wiki/Compare-and-swap)
    (CAS) operations. The performance improvements over normal mutex exclusion locks
    are significant as the following little experiment shows. Basis for this experiment
    is a function which increments an integer counter 500 million times in a loop
    [1]. This loop is carried out in
- en: simple single threaded loop
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: simple single threaded loop
- en: single thread loop using atomic increments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: single thread loop using atomic increments
- en: single thread loop acquiring a mutex exclusion lock for every pass.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: single thread loop acquiring a mutex exclusion lock for every pass.
- en: two threads using atomic increments
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: two threads using atomic increments
- en: two threads using mutex exclusion locks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: two threads using mutex exclusion locks
- en: A Java and the C++ implementation is available [here](http://hpc-quantlib.de/src/cas.zip).
    The Java code uses the package java.util.concurrent.atomic and the C++ code uses
    boost::detail::atomic_count to implement the atomic increments. The run times
    are measured on a Core i3@3GHz.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: A Java and the C++ implementation is available [here](http://hpc-quantlib.de/src/cas.zip).
    The Java code uses the package java.util.concurrent.atomic and the C++ code uses
    boost::detail::atomic_count to implement the atomic increments. The run times
    are measured on a Core i3@3GHz.
- en: '[![](img/9de3e2e87c9691aa107b06c49a430fd3.png "plot")](https://hpcquantlib.wordpress.com/wp-content/uploads/2012/05/plot.png)
    Lock-free algorithms are difficult to implement and to debug. Tim Blechmann has
    written a little gem library [boost::lockfree](//tim.klingt.org/boost_lockfree.git)
    (Parts of the library are now in the boost release 1.53.0). Among others this
    library contains a wait-free single-producer/single-consumer ring buffer. This
    ring buffer is e.g. tailor-made to separate the Monte-Carlo path generation from
    the pricing of a derivate. With a few lines of code the path generation can then
    run in a different thread.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/9de3e2e87c9691aa107b06c49a430fd3.png "plot")](https://hpcquantlib.wordpress.com/wp-content/uploads/2012/05/plot.png)
    Lock-free algorithms are difficult to implement and to debug. Tim Blechmann has
    written a little gem library [boost::lockfree](//tim.klingt.org/boost_lockfree.git)
    (Parts of the library are now in the boost release 1.53.0). Among others this
    library contains a wait-free single-producer/single-consumer ring buffer. This
    ring buffer is e.g. tailor-made to separate the Monte-Carlo path generation from
    the pricing of a derivate. With a few lines of code the path generation can then
    run in a different thread.'
- en: The code available [here](http://hpc-quantlib.de/src/buffereddatafactory.zip)
    contains a BufferedDataFactory based on the boost::lockfree::ringbuffer class
    and a slightly modified version of the QuantLib test case HybridHestonHullWhiteProcessTest::testZeroBondPricing.
    In this version of the test case the path generation is running in a separated
    thread and uses the BufferedDataFactory to hand over the data to the pricing thread.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可在[此处](http://hpc-quantlib.de/src/buffereddatafactory.zip)找到，其中包含基于boost::lockfree::ringbuffer类的BufferedDataFactory和一个对QuantLib测试案例HybridHestonHullWhiteProcessTest::testZeroBondPricing的略微修改版。在这个测试案例的版本中，路径生成在分离的线程中运行，并使用BufferedDataFactory将数据传递给定价线程。
- en: '[1] [Disruptor](http://disruptor.googlecode.com/files/Disruptor-1.0.pdf): High
    performance alternative to bounded queues for exchanging data between concurrent
    threads.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [Disruptor](http://disruptor.googlecode.com/files/Disruptor-1.0.pdf)：用于在并发线程之间交换数据的、高性能的有界队列的替代品。'
