["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\t#*****************************************************************\n\t# Load historical data for ETFs\n\t#****************************************************************** \n\tload.packages('quantmod')\n\n\ttickers = spl('GLD,UUP,SPY,QQQ,IWM,EEM,EFA,IYR,USO,TLT')\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1900-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\n\n\tbt.prep(data, align='remove.na')\n\n\t#*****************************************************************\n\t# Setup\n\t#****************************************************************** \n\t# compute returns\n\tret = data$prices / mlag(data$prices) - 1\n\n\t# setup period\n\tdates = '2012::2012'\n\tret = ret[dates]\n\n```", "```\n\n\tfn.name = 'equal.weight.portfolio'\t\t\t\t\n\tfn = match.fun(fn.name)\n\n\t# create input assumptions\n\tia = create.historical.ia(ret, 252) \n\n\t# compute allocation without cluster, for comparison\n\tweight = fn(ia)\n\n```", "```\n\n\t# create clusters\n\tgroup = cluster.group.kmeans.90(ia)\n\tngroups = max(group)\n\n\tweight0 = rep(NA, ia$n)\n\n\t# store returns for each cluster\n\thist.g = NA * ia$hist.returns[,1:ngroups]\n\n\t# compute weights within each group\t\n\tfor(g in 1:ngroups) {\n\t\tif( sum(group == g) == 1 ) {\n\t\t\tweight0[group == g] = 1\n\t\t\thist.g[,g] = ia$hist.returns[, group == g, drop=F]\n\t\t} else {\n\t\t\t# create input assumptions for the assets in this cluster\n\t\t\tia.temp = create.historical.ia(ia$hist.returns[, group == g, drop=F], 252) \n\n\t\t\t# compute allocation within cluster\n\t\t\tw0 = fn(ia.temp)\n\n\t\t\t# set appropriate weights\n\t\t\tweight0[group == g] = w0\n\n\t\t\t# compute historical returns for this cluster\n\t\t\thist.g[,g] = ia.temp$hist.returns %*% w0\n\t\t}\n\t}\n\n```", "```\n\n\t# create GROUP input assumptions\n\tia.g = create.historical.ia(hist.g, 252) \n\n\t# compute allocation across clusters\n\tgroup.weights = fn(ia.g)\n\n\t# mutliply out group.weights by within group weights\n\tfor(g in 1:ngroups)\n\t\tweight0[group == g] = weight0[group == g] * group.weights[g]\n\n```", "```\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \t\t\t\n\tload.packages('RColorBrewer')\n\tcol = colorRampPalette(brewer.pal(9,'Set1'))(ia$n)\n\n\tlayout(matrix(1:2,nr=2,nc=1))\n\tpar(mar = c(0,0,2,0))\n\tindex = order(group)\n\n\tpie(weight[index], labels = paste(colnames(ret), round(100*weight,1),'%')[index], col=col, main=fn.name)\n\n\tpie(weight0[index], labels = paste(colnames(ret), round(100*weight0,1),'%')[index], col=col, main=paste('Cluster',fn.name))\t\n\n```"]