["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Find Sectors for each company in DOW 30\n\t#****************************************************************** \n\ttickers = spl('XLY,XLP,XLE,XLF,XLV,XLI,XLB,XLK,XLU')\n\ttickers.desc = spl('ConsumerCyclicals,ConsumerStaples,Energy,Financials,HealthCare,Industrials,Materials,Technology,Utilities')\n\n\tsector.map = c()\n\tfor(i in 1:len(tickers)) {\n\t\tsector.map = rbind(sector.map, \n\t\t\t\tcbind(sector.spdr.components(tickers[i]), tickers.desc[i])\n\t\t\t)\n\t}\n\tcolnames(sector.map) = spl('ticker,sector')\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\t\n\ttickers = dow.jones.components()\n\n\tsectors = factor(sector.map[ match(tickers, sector.map[,'ticker']), 'sector'])\n\t\tnames(sectors) = tickers\n\n\t# get fundamental data\n\tload(file='data.fund.Rdata')\n\n\t# get pricing data\n\tload(file='data.Rdata')\n\n\t#*****************************************************************\n\t# Combine fundamental and pricing data\n\t#****************************************************************** \t\n\tfor(i in tickers) {\n\t\tfund = data.fund[[i]]\n\t\tfund.date = date.fund.data(fund)\n\n\t\t# Earnings per Share\t\t\n\t\tEPS = get.fund.data('Diluted EPS from Total Operations', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Sales, exception not available for financial firms\n\t\tSALE = get.fund.data('total revenue', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Common Shares Outstanding\n\t\tCSHO = get.fund.data('total common shares out', fund, fund.date)\n\n\t\t# Common Equity\n\t\tCEQ = get.fund.data('total equity', fund, fund.date)\n\n\t\t# Dividends\n\t\tDV.PS = get.fund.data('dividends paid per share', fund, fund.date, is.12m.rolling=T)\n\n\t\t# Cash Flow, exception not available for financial firms\n\t\tCFL = get.fund.data('net cash from operating activities', fund, fund.date, cash.flow=T, is.12m.rolling=T)\n\n\t\t# merge\n\t\tdata[[i]] = merge(data[[i]], EPS, SALE, CSHO, CEQ, DV.PS, CFL)\n\t}\n\n\tbt.prep(data, align='keep.all', dates='1995::2011')\n\n\t#*****************************************************************\n\t# Create Factors\n\t#****************************************************************** \n\tprices = data$prices\n\t\tprices = bt.apply.matrix(prices, function(x) ifna.prev(x))\n\n\tsectors\t= sectors[colnames(prices)]\t\n\n\t# create factors\n\tfactors = list()\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Traditional Value\n\t#****************************************************************** \n\tfactors$TV = list()\n\n\t# Market Value - capitalization\n\tCSHO =  bt.apply(data, function(x) ifna.prev(x[, 'CSHO']))\n\tMKVAL = prices * CSHO\n\n\t# Price / Earnings\n\tEPS = bt.apply(data, function(x) ifna.prev(x[, 'EPS']))\n\tfactors$TV$EP = EPS / prices\n\n\t# Price / Trailing Sales\n\tSALE = bt.apply(data, function(x) ifna.prev(x[, 'SALE']))\t\n\tfactors$TV$SP = SALE / MKVAL\n\n\t# Price / Trailing Cash Flow\n\tCFL = bt.apply(data, function(x) ifna.prev(x[, 'CFL']))\n\tfactors$TV$CFP = CFL / MKVAL\n\n\t# Dividend Yield\n\tDV.PS = bt.apply(data, function(x) ifna.prev(x[, 'DV.PS']))\n\tfactors$TV$DY = DV.PS / prices\n\n\t# Price / Book Value\t\t\n\tCEQ = bt.apply(data, function(x) ifna.prev(x[, 'CEQ']))\n\tfactors$TV$BP = CEQ\t/ MKVAL\n\n\t# Eliminate Price/Sales and Price/Cash Flow for financial firms\n\tfactors$TV$SP[, sectors == 'Financials'] = NA\n\tfactors$TV$CFP[, sectors == 'Financials'] = NA\n\n\t#*****************************************************************\n\t# Convert to monthly\n\t#****************************************************************** \n\t# find month ends\n\tmonth.ends = endpoints(prices, 'months')\n\n\tprices = prices[month.ends,]\n\t\tn = ncol(prices)\n\t\tnperiods = nrow(prices)\n\n\tret = prices / mlag(prices) - 1\n\t\tnext.month.ret = mlag(ret, -1)\n\n\tMKVAL = MKVAL[month.ends,]\n\n\tfor(j in 1:len(factors)) {\t\n\t\tfor(i in 1:len(factors[[j]])) {\n\t\t\tfactors[[j]][[i]] = factors[[j]][[i]][month.ends,]\t\n\t\t}\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Create the overall Traditional Value factor \n\t#****************************************************************** \n\t# check missing data for financial firms\n\tsapply(factors$TV, count)\t\n\n\t# normalize (convert to z scores) cross sectionaly all Traditional Value factors\n\tfor(i in names(factors$TV)) {\n\t\tfactors$TV[[i]] = (factors$TV[[i]] - cap.weighted.mean(factors$TV[[i]], MKVAL)) / \n\t\t\t\t\t\t\tapply(factors$TV[[i]], 1, sd, na.rm=T)\n\t}\n\n\t# compute the overall Traditional Value factor\n\tload.packages('abind') \n\ttemp = abind(factors$TV, along = 3)\n\tfactors$TV$AVG = factors$TV[[1]]\n\t\tfactors$TV$AVG[] = apply(temp, c(1,2), mean, na.rm=T)\n\n\t# plot quintile charts for all Traditional Value factors\n\tlayout(matrix(1:6,nc=2))\n\tsapply(1:len(factors$TV), function(i)\n\t\tcompute.quantiles(factors$TV[[i]], next.month.ret, paste(names(factors$TV)[i], 'Traditional Value'))\n\t)\n\n```", "```\n\n\t#*****************************************************************\n\t# Backtest quantiles and quantile spread\n\t#****************************************************************** \n\tout = compute.quantiles(factors$TV$AVG, next.month.ret, plot=F)\t\n\n\tprices = data$prices\n\t\tprices = bt.apply.matrix(prices, function(x) ifna.prev(x))\n\n\t# create strategies that invest in each qutile\n\tmodels = list()\n\n\tfor(i in 1:5) {\n\t\tdata$weight[] = NA\n\t\t\tdata$weight[month.ends,] = iif(out$quantiles == i, out$weights, 0)\n\t\t\tcapital = 100000\n\t\t\tdata$weight[] = (capital / prices) * (data$weight)\t\n\t\tmodels[[paste('Q',i,sep='')]] = bt.run(data, type='share', capital=capital)\n\t}\n\n\t# spread\n\tdata$weight[] = NA\n\t\tdata$weight[month.ends,] = iif(out$quantiles == 5, out$weights, \n\t\t\t\t\t\tiif(out$quantiles == 1, -out$weights, 0))\n\t\tcapital = 100000\n\t\tdata$weight[] = (capital / prices) * (data$weight)\n\tmodels$Q5_Q1 = bt.run(data, type='share', capital=capital)\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \n\tplotbt(models, plotX = T, log = 'y', LeftMargin = 3)\t    \t\n\t\tmtext('Cumulative Performance', side = 2, line = 1)\n\n```"]