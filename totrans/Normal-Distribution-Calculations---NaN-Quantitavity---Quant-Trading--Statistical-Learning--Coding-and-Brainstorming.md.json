["```\n// Cumulative N(0,1) and Inverse Cumulative N(0,1)\n#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\ndouble f(double);\t\t\t\t\t\t\t// N(0,1) density\ndouble N(double);\t\t\t\t\t\t\t// N(0,1) cdf\ndouble Ni(double);\t\t\t\t\t\t\t// N(0,1) inverse cdf\ndouble Boole(double, double, int);\t\t\t// Boole's numerical integration\ndouble Bisection(double, double, double);\t// Bisection algorithm\n\nint main()\n{\n\tcout << \"A few cumulative N(0,1) probabilities\" << endl;\n\tcout << \"N(1.96)  = \" << N(1.96)  << endl;\n\tcout << \"N(2.33)  = \" << N(2.33)  << endl;\n\tcout << \"N(-1.96) = \" << N(-1.96)  << endl;\n\tcout << \"N(-2.33) = \" << N(-2.33)  << endl;\n\tcout << endl;\n\tcout << \"A few inverse cumulative N(0,1) probabilities\" << endl;\n\tcout << \"Ni(0.99)  = \" << Ni(0.99)  << endl;\n\tcout << \"Ni(0.975) = \" << Ni(0.975) << endl;\n\tcout << \"Ni(0.05)  = \" << Ni(0.05)  << endl;\n\treturn 0;\n}\n\n// N(0,1) density\ndouble f(double x) {\n\tdouble pi =  4.0*atan(1.0);\n\treturn exp(-x*x*0.5)/sqrt(2*pi);\n}\n\n// N(0,1) cdf by Boole's Rule\ndouble N(double x) {\n\treturn Boole(-10.0, x, 240);\n}\n\n// Boole's Rule\ndouble Boole(double StartPoint, double EndPoint, int n) {\n\tvector<double> X(n+1, 0.0);\n\tvector<double> Y(n+1, 0.0);\n\tdouble delta_x = (EndPoint - StartPoint)/double(n);\n\tfor (int i=0; i<=n; i++) {\n\t\tX[i] = StartPoint + i*delta_x;\n\t\tY[i] = f(X[i]);\n\t}\n\tdouble sum = 0;\n\tfor (int t=0; t<=(n-1)/4; t++) {\n\t\tint ind = 4*t;\n\t\tsum += (1/45.0)*(14*Y[ind] + 64*Y[ind+1] + 24*Y[ind+2] + 64*Y[ind+3] + 14*Y[ind+4])*delta_x;\n\t}\n\treturn sum;\n}\n\n// Inverse cumulative N(0,1) by bisection algorithm\ndouble Ni(double prob) {\n\treturn Bisection(prob, -10.0, 10.0);\n}\n\n// Bisection Algorithm\ndouble Bisection(double prob, double a, double b)\n{\n\tconst int MaxIter = 500;\n\tdouble Tol = 0.00001;\n\tdouble midP, midCdif;\n\tdouble  lowCdif = prob - N(a);\n\tdouble highCdif = prob - N(b);\n\tif (lowCdif*highCdif > 0)\n\t{\n\t\tdouble Temp = lowCdif;\n\t\tlowCdif = highCdif;\n\t\thighCdif = Temp;\n\t}\n\telse\n\tfor (int i=0; i<=MaxIter; i++)\n\t{\n\t\tmidP = (a + b) / 2.0;\n\t\tmidCdif = prob - N(midP);\n\t\tif (abs(midCdif)<Tol) goto LastLine;\n\t\telse\n\t\t{\n\t\t\tif (midCdif>0) a = midP;\n\t\t\telse b = midP;\n\t\t}\n\t}\n LastLine:\n\treturn midP;\n}\n// http://www.tohtml.com/cpp\n```"]