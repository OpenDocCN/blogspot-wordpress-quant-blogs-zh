["```\n#include<ql\\quantlib.hpp>\nusing namespace QuantLib;\n\nint main(int, char*[]){\n\n\t// Matrix declaration and population\n\tMatrix A(2,2);\n\tA[0][0] = 1; A[0][1] = 2;\n\tA[1][0] = 3; A[1][1] = 4;\n\n\tMatrix B(2,2);\n\tB[0][0] = 5; B[0][1] = 6;\n\tB[1][0] = 7; B[1][1] = 8;\n\n\t// Outputting\n\tstd::cout << \"Matrix A :\" << std::endl << A << std::endl;\n\tstd::cout << \"Matrix B :\" << std::endl << B << std::endl;\n\tstd::cout << \"A + B :\" << std::endl << A + B << std::endl;\n\n\treturn 0;\n\n}\n```", "```\n#include<ql\\quantlib.hpp>\nusing namespace QuantLib;\n\nint main(int, char*[]){\n\n\t// Matrix declaration and population\n\tMatrix A(2,3);\n\tA[0][0] = 0; A[0][1] = 1; A[0][2] = -1;\n\tA[1][0] = 1; A[1][1] = 2; A[1][2] = 0;\n\n\tMatrix B(3,4);\n\tB[0][0] = 1; B[0][1] = 0; B[0][2] = 2; B[0][3] = 1;\n\tB[1][0] = 0; B[1][1] = 0; B[1][2] = 1; B[1][3] = -1;\n\tB[2][0] = 2; B[2][1] = -1; B[2][2] = 0; B[2][3] = 2; \n\n\t// Outputting\n\tstd::cout << \"Matrix A :\" << std::endl << A << std::endl;\n\tstd::cout << \"Matrix B :\" << std::endl << B << std::endl;\n\tstd::cout << \"A x B product :\" << std::endl << A * B << std::endl;\n\treturn 0;\n}\n```", "```\n#include<ql\\quantlib.hpp>\nusing namespace QuantLib;\n\nint main(int, char*[]){\n\n\t// Matrix declaration and population\n\tMatrix A(3,3);\n\tA[0][0] = 1; A[0][1] = 2; A[0][2] = 3;\n\tA[1][0] = 4; A[1][1] = 5; A[1][2] = 6;\n\tA[2][0] = 7; A[2][1] = 8; A[2][2] = 9;\n\n\t// Outputting\n\tstd::cout << \"Matrix A :\" << std::endl << A << std::endl;\n\tstd::cout << \"Matrix transpose :\" << std::endl << transpose(A) << std::endl;\n\tstd::cout << \"Matrix determinant :\" << std::endl << determinant(A) << std::endl;\n\tstd::cout << \"Matrix inverse :\" << std::endl << inverse(A) << std::endl;\n\n\treturn 0;\n}\n```"]