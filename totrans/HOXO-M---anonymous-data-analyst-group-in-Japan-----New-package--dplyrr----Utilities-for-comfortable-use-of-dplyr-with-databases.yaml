- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 06:47:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'HOXO-M - anonymous data analyst group in Japan - : New package "dplyrr" - Utilities
    for comfortable use of dplyr with databases'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://mockquant.blogspot.com/2015/08/new-package-dplyrr-utilities-for.html#0001-01-01](http://mockquant.blogspot.com/2015/08/new-package-dplyrr-utilities-for.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. Overview
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`dplyr package `'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: is the most powerful package for data handling in R, and it has also the ability
    of working with databases(
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[See Vignette](https://cran.rstudio.com/web/packages/dplyr/vignettes/databases.html)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: ).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: But the functionalities of dealing with databases in
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyr`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: is begin developped even now.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Now, I'm trying to make
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyr`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: with databases more comfortable by some functions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: For that purpose, I've created
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyrr`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: package.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyrr`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'has below functions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`load_tbls()` : Easy to load table objects for all tables in a database.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cut()` in `mutate()` : Easy to create a case statement by using the grammar
    like the `base::cut()`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_if()` and `n_if()` in `summarise()` : Shortcut to count rows that a
    condition is satisfied.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter()` : Improved `filter()` for `tbl_sql` which adds parentheses appropriately.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moving_mean()` in `mutate()` : Compute moving average for PostgreSQL.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moving_max()` in `mutate()` : Compute moving max for PostgreSQL.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moving_min()` in `mutate()` : Compute moving min for PostgreSQL.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moving_sum()` in `mutate()` : Compute moving sum for PostgreSQL.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`first_value()` in `mutate()` : Compute first value for PostgreSQL.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. How to install
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code for
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyrr`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: package is available on GitHub at
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: You can install the pakage from there.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 3\. Common functions for all databases
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For illustration, we use a database file: "my_db.sqlite3".'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: If you want to trace the codes below, you should create the databese file at
    first.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3-1\. load_tbls()
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually, when we use a database with
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyr`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: ', we first create database object, and we can see the tables in the databese
    by'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '`show()`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we create table objects for pulling data in some tables in the database.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Typing this code is really a bore!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: If you want to create table objects for
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '**all tables in the database**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: ', you can use'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`load_tbls()`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check the created table objects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 3-2\. cut() in mutate()
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to write case statement with like
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '`base::cut()`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: ', you can use'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '`cut()`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: function in
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`mutate()`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: For example, there is
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`air_time`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: column in the database.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you want to group the
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '`air_time`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: by break points
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '`c(0, 80, 120, 190, 900)`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: ', you think you must write the next code.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the break points increase, you are going to be tired to write more lines.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: By using
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`cut()`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: function in
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`mutate()`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: ', it can become easy.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '`cut()`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: in
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '`mutate()`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: has more arguments such as labels coming from
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`base::cut()`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '`cut(variable, breaks, labels, include.lowest, right, dig.lab)`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For integer break points, specially you can indicate
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '`labels="-"`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 3-3\. count_if() and n_if() in summarise()
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we want to count rows that condition is satisfied, we might write like
    this.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要计数满足条件的行时，我们可能会写成这样。
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: The
- en: '`count_if()`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`count_if()`'
- en: and
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 并且
- en: '`n_if()`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`n_if()`'
- en: functions are a shortcut for it merely.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 函数仅仅是它的一个快捷方式。
- en: '`count_if(condition)`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count_if(condition)`'
- en: '`n_if(condition)`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_if(condition)`'
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Both functions do exactly the same thing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 两个函数完全做同样的事情。
- en: 3-4\. Improved filter()
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3-4. 改进filter()
- en: If you use
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用
- en: '`dplyr`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyr`'
- en: with databases in pure mind, you can encounter the unintended action like below.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 纯净的思维中使用数据库的时候，你可能会碰到下面不期而遇的情形。
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Did you expect the WHERE clause to be that?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你预期WHERE子句是这样的吗？
- en: If you use
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用
- en: '`dplyrr`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyrr`'
- en: ', it becomes natural by adding parentheses.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ，加括号就自然了。
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 4\. Functions for PostgreSQL
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4. PostgreSQL的函数
- en: 4-1\. moving_**() in mutate()
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4-1. mutate() 中的 moving_**()
- en: '`dplyrr`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyrr`'
- en: has four
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个
- en: '`moving_**()`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`moving_**()`'
- en: functions that you can use in
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在函数中使用的函数
- en: '`mutate()`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutate()`'
- en: .
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: '`moving_mean(variable, preceding, following)`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moving_mean(variable, preceding, following)`'
- en: '`moving_max(variable, preceding, following)`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moving_max(variable, preceding, following)`'
- en: '`moving_min(variable, preceding, following)`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moving_min(variable, preceding, following)`'
- en: '`moving_sum(variable, preceding, following)`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moving_sum(variable, preceding, following)`'
- en: When you want to set the same
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想设置相同的
- en: '`preceding`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`preceding`'
- en: and
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 并且
- en: '`following`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`following`'
- en: ', you can omit'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ，你可以省略
- en: '`following`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`following`'
- en: .
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: For illustration, we use the test database that is PostgreSQL.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我们使用的测试数据库是PostgreSQL。
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Compute moving average with 1 preceding and 1 following.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 计算前1个和后1个数据的移动均值。
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Comfirm query.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 确认查询。
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Compute moving mean with 1 preceding and 2 following.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 计算前1个和后2个数据的移动平均值。
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Comfirm query.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 确认查询。
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Similary, you can use the other
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 同理，你可以使用其他的
- en: '`moving_**()`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`moving_**()`'
- en: functions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 函数。
- en: 4-2\. first_value() in mutate()
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4-2. mutate() 中的 first_value()
- en: '`dplyrr`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`dplyrr`'
- en: has
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有
- en: '`first_value()`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`first_value()`'
- en: function that you can use in
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在其中使用的函数
- en: '`mutate()`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutate()`'
- en: .
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: '`first_value(value, order_by)`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first_value(value, order_by)`'
- en: When you want to set the same
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想设置相同的
- en: '`value`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`'
- en: and
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以及
- en: '`order_by`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`order_by`'
- en: ', you can omit'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ，你可以省略
- en: '`order_by`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`order_by`'
- en: .
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: For illustration, we use the test database that is PostgreSQL.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我们使用的测试数据库是PostgreSQL。
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Get the first values of x partitioned by class and ordered by x.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 根据类别对x的第一个值进行排序。
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: See query.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 看查询。
- en: '[PRE41]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Get the first values of x partitioned by class and ordered by y.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 根据y对x的第一个值进行排序。
- en: '[PRE43]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: See query.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 看查询。
- en: '[PRE45]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Get the first values of x partitioned by class and ordered by descent of y.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 根据y的降序对x的第一个值进行排序。
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: See query.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 看查询。
- en: '[PRE49]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 5\. Miscellaneous
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5. 其他
- en: update_dplyrr()
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: update_dplyrr()
- en: '`update_dplyrr()`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_dplyrr()`'
- en: is a shortcut/syntax sugar of
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: '[PRE51]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: unload_dplyrr()
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: unload_dplyrr()
- en: '`unload_dplyrr()`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`unload_dplyrr()`'
- en: is a shortcut/syntax sugar of
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 6\. Bug reports
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6. Bug报告
