- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 19:33:06'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: tornado & websockets | Coding the markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://etrading.wordpress.com/2014/04/26/tornado-websockets/#0001-01-01](https://etrading.wordpress.com/2014/04/26/tornado-websockets/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: tornado & websockets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: April 26, 2014
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The core of my [POC prototype](https://etrading.wordpress.com/2014/02/16/poc-m1-running/
    "Proof of concept") is a server engine, which doesn’t really make for a great
    demo. Generally, people grasp concepts quicker if they can see a tangible realization.
    So I needed a realistic way to show live ticking data getting cranked out by the
    server. A browser GUI seemed a natural candidate. And being a Pythonista I wanted
    to do the server coding in Python. Until recently getting live ticking data pushed
    up to a browser was a big deal, requiring sophisticated server products like the
    [Caplin Liberator](http://www.caplin.com/developer/component/liberator), and rich
    GUI toolkits like [Caplin Trader](http://www.caplin.com/caplin-trader). Fortunately,
    it’s now possible to hack some demoware in the form of a live, ticking webpage
    using some really simple [jQuery](http://jquery.com/) & [websockets](http://www.websocket.org/)
    in the browser, and [tornado](http://www.tornadoweb.org/en/stable/) on the server
    side. JavaScript and browser GUIs are not my forte, so I won’t comment any further,
    except to note how much easier it seems than five years ago. On the server side,
    though, I do have more experience. Back in 2000 I was doing server side web dev
    in Python using [Zope](http://www.zope.org/). Zope is a very powerful system,
    featuring a built in Object DB and an inheritance by instance rather than class
    mechanism called acquisition. Consequently it has a rather steep learning curve.
    In recent years [Plone](http://plone.org/) has had some traction as a CMS built
    on top of Zope. In 2001/2 I discovered [Twisted Matrix](https://twistedmatrix.com/trac/),
    a general networking toolkit you can use to build any IP based networking functionality.
    Again there’s a steep learning curve, but it’s much lighter than Zope, and is
    now very mature. I will be using Twisted to build a general socket server capability
    for my core product: I’ve got C++ and Python APIs, but I’ll need a socket server
    for Java support. But what I needed for my demo purpose was real time server push
    to the browser. And tornado proved to be a good choice. Simple, lightweight, lots
    of worked examples and focused entirely on websockets. It didn’t take long to
    get ticking data into a webpage. Recommended!'
  prefs: []
  type: TYPE_NORMAL
