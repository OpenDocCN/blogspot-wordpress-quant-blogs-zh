- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 06:29:51'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub: Oracle Coherence Incubator | Tales from a Trading Desk'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2013/03/08/github-oracle-coherence-incubator/#0001-01-01](https://mdavey.wordpress.com/2013/03/08/github-oracle-coherence-incubator/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'GitHub: Oracle Coherence¬†Incubator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Brian Oliver notes that Oracle Coherence Incubator 11 is [release](http://brianoliver.wordpress.com/2013/02/26/coherence-incubator-11-released/)
    ‚Äì fully Maven‚Äôs and [github‚Äôd](http://coherence-community.github.com/coherence-incubator/11.0.0/)
    üôÇ¬† Possibly of interest, the event distribution [pattern:](http://coherence-community.github.com/coherence-incubator/11.0.0/eventdistributionpattern/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this pattern is to provide an extensible, high-performance, highly-available,
    general purpose scalable framework to distribute application events occurring
    in one Coherence Cluster to one or more possibly distributed Coherence Clusters,
    Caches or other Devices
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The [processing](http://coherence-community.github.com/coherence-incubator/11.0.0/processingpattern/index.html)
    pattern may also be of interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: The Processing Pattern provides a simple mechanism to perform distributed grid
    computing operations with Coherence. It is structured as an extensible cluster-based
    processing engine, capable of accepting, dispatching and executing a variety of
    workloads, the types of which may be customized by developers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unlike the traditional hub-and-spoke / master-worker / broker-agent, the Processing
    Pattern avoids the classic ‚Äúsingle-point-of-failure‚Äù, ‚Äúsingle-point-of-dispatch‚Äù,
    ‚Äúsingle-point-of-contention‚Äù problems by managing and distributing the core state
    across a Coherence Data Grid.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ~ by mdavey on March 8, 2013.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Cloud](https://mdavey.wordpress.com/category/hpc/cloud/), [Java](https://mdavey.wordpress.com/category/languages/java/)
  prefs: []
  type: TYPE_NORMAL
