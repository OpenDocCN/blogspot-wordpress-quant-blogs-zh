- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 06:02:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 06:02:28
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 10 Trading Glitches That Stopped The Markets | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10 Trading Glitches That Stopped The Markets | Tales from a Trading Desk
- en: 来源：[https://mdavey.wordpress.com/2013/08/24/10-trading-glitches-that-stopped-the-markets/#0001-01-01](https://mdavey.wordpress.com/2013/08/24/10-trading-glitches-that-stopped-the-markets/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2013/08/24/10-trading-glitches-that-stopped-the-markets/#0001-01-01](https://mdavey.wordpress.com/2013/08/24/10-trading-glitches-that-stopped-the-markets/#0001-01-01)
- en: 10 Trading Glitches That Stopped The Markets
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10 Trading Glitches That Stopped The Markets
- en: Wall Street & Technology provide a list of 10 [notable](http://www.wallstreetandtech.com/technology-risk-management/10-trading-glitches-that-stopped-the-mar/240160397)
    software glitches that caused market mayhem.  Although a very interesting read
    as to how to loose a substantial amount of money, it does beg the question as
    to what lessons have been learn in software engineering from each of these incidents. 
    I’m guessing that there are at least a minimum of two categories that these glitches
    fall into; failure to understand all edge cases prior to software implementation
    and deployment, and buggy software.  In the case of buggy software, I’d be curious
    to know which of the 10 glitches leveraged BDD from story (requirement) to code, 
    I’m also curious the more I think about these issues to know if the classic software
    measurements were also part of the problem (code coverage etc) is providing a
    false sense of security.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Wall Street & Technology 提供了一份包含10个[显著](http://www.wallstreetandtech.com/technology-risk-management/10-trading-glitches-that-stopped-the-mar/240160397)软件故障的列表，这些故障导致了市场混乱。尽管这是一篇非常有趣的阅读材料，因为它揭示了如何损失大量资金，但它也引发了一个问题，即从这些事件中软件工程学到了哪些教训。我猜测这些故障至少可以分为两类：在软件实施和部署前未能理解所有边缘案例，以及存在缺陷的软件。在存在缺陷的软件的情况下，我很想知道这10个故障中有哪些是从故事（需求）到代码都采用了BDD，我越思考这些问题，就越想知道传统的软件度量标准（如代码覆盖率等）是否也是问题的一部分，是否提供了虚假的安全感。
- en: ~ by mdavey on August 24, 2013.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ~ 由 mdavey 于 2013年8月24日发布。
- en: Posted in [Trading](https://mdavey.wordpress.com/category/trading/)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 发布于 [交易](https://mdavey.wordpress.com/category/trading/)
- en: 'Tags: [BDD](https://mdavey.wordpress.com/tag/bdd/)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：[BDD](https://mdavey.wordpress.com/tag/bdd/)
