- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 04:48:51'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Magmasystems Blog: Installing RabbitMQ on Your PC'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://magmasystems.blogspot.com/2011/11/installing-rabbitmq-on-your-pc.html#0001-01-01](http://magmasystems.blogspot.com/2011/11/installing-rabbitmq-on-your-pc.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For the past 7 years, I have been running an old copy of Tibco EMS on my laptop,
    and I've been using this whenever I need to do some prototyping and development
    of new message-based apps. But in these cost-conscious times, many of my clients
    are looking for low-cost solutions. So, time to seriously consider RabbitMQ.
  prefs: []
  type: TYPE_NORMAL
- en: This is a quick guide that I wrote to get RabbitMQ up and running on a local
    PC in preparation for some .NET development.
  prefs: []
  type: TYPE_NORMAL
- en: 1) RabbitMQ requires the Erlang runtime. You can download the Erlang/OTP runtime
    from
  prefs: []
  type: TYPE_NORMAL
- en: . You need to install Erlang before downloading and installing the RabbitMQ
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 2a) Install RabbitMQ. It will install a Windows Service and will automatically
    start it.
  prefs: []
  type: TYPE_NORMAL
- en: and verify that the RabbitMQ service has started.
  prefs: []
  type: TYPE_NORMAL
- en: 3a) Download the .NET 3.0 version of the RabbitMQ client libraries and samples.
    The file is called rabbitmq-dotnet-client-2.6.1-
  prefs: []
  type: TYPE_NORMAL
- en: 3b) Extract the ZIP file to C:\Program Files\RabbitMQDotNetClient (you can pick
    any location that you want).
  prefs: []
  type: TYPE_NORMAL
- en: 3c) In C:\Program Files\RabbitMQDotNetClient\
  prefs: []
  type: TYPE_NORMAL
- en: <wbr>
  prefs: []
  type: TYPE_NORMAL
- en: bin, there is the main assembly called
  prefs: []
  type: TYPE_NORMAL
- en: '***RabbitMQ.Client.dll***'
  prefs: []
  type: TYPE_NORMAL
- en: . In the same directory is the assembly for WCF integration called
  prefs: []
  type: TYPE_NORMAL
- en: '***RabbitMQ.ServiceModel.dll***'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 4) From the Windows Start Menu, go to the RabbitMQ Server item, and then run
    RabbitMQ Command Prompt
  prefs: []
  type: TYPE_NORMAL
- en: 4a) rabbitmqctl.bat is the command-line utility that lets you control RabbitMQ
    and list various objects. A sample command to list the RabbitMQ exchanges is
  prefs: []
  type: TYPE_NORMAL
- en: rabbitmqctl list_exchanges
  prefs: []
  type: TYPE_NORMAL
- en: However, we will use the management console, not the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 5) Download and install the RabbitMQ management plugins from
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.rabbitmq.com/<wbr>plugins.html](http://www.rabbitmq.com/plugins.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 5a) Download all of the EZ files associated with rabbitmq_management_visualiser
  prefs: []
  type: TYPE_NORMAL
- en: 5b) Drop these files into the RabbitMQ Server\plugins directory, which on my
    system is C:\Program Files (x86)\RabbitMQ Server\rabbitmq_server-2.6.1\
  prefs: []
  type: TYPE_NORMAL
- en: <wbr>
  prefs: []
  type: TYPE_NORMAL
- en: plugins
  prefs: []
  type: TYPE_NORMAL
- en: 5c) Restart the RabbitMQ server. You can do this through the Services.msc applet
    on your Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test It Out Using the Management Console**'
  prefs: []
  type: TYPE_NORMAL
- en: Now we will test out RabbitMQ by sending a message into an exchange and have
    a wildcard subscriber read that message.
  prefs: []
  type: TYPE_NORMAL
- en: '6) As a test of the RabbitMQ management console, try this URL in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://localhost:55672/mgmt/](http://localhost:55672/mgmt/)'
  prefs: []
  type: TYPE_NORMAL
- en: Use the user id "guest" and password "guest"
  prefs: []
  type: TYPE_NORMAL
- en: 7) Go to the
  prefs: []
  type: TYPE_NORMAL
- en: '*Exchange*'
  prefs: []
  type: TYPE_NORMAL
- en: tab and add a new exchange called
  prefs: []
  type: TYPE_NORMAL
- en: '*CalcExchange*'
  prefs: []
  type: TYPE_NORMAL
- en: 'that is non-durable (transient) topic. Fill in the name, type and durability
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name:**'
  prefs: []
  type: TYPE_NORMAL
- en: CalcExchange
  prefs: []
  type: TYPE_NORMAL
- en: '**Type:**'
  prefs: []
  type: TYPE_NORMAL
- en: topic
  prefs: []
  type: TYPE_NORMAL
- en: '**Durability:**'
  prefs: []
  type: TYPE_NORMAL
- en: Transient
  prefs: []
  type: TYPE_NORMAL
- en: 8) Go to the
  prefs: []
  type: TYPE_NORMAL
- en: '*Queues*'
  prefs: []
  type: TYPE_NORMAL
- en: tab and add a new durable queue called
  prefs: []
  type: TYPE_NORMAL
- en: '*Calc.Queue.1*'
  prefs: []
  type: TYPE_NORMAL
- en: 9) Stay in the
  prefs: []
  type: TYPE_NORMAL
- en: '*Queues*'
  prefs: []
  type: TYPE_NORMAL
- en: tab. In the table of queues, click on
  prefs: []
  type: TYPE_NORMAL
- en: '*Calc.Queue.1*'
  prefs: []
  type: TYPE_NORMAL
- en: '9a) Add a binding. In the Exchange and Routing Key fields, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exchange:**'
  prefs: []
  type: TYPE_NORMAL
- en: CalcExchange
  prefs: []
  type: TYPE_NORMAL
- en: '**Routing Key:**'
  prefs: []
  type: TYPE_NORMAL
- en: Calc.Data.*.1
  prefs: []
  type: TYPE_NORMAL
- en: This binds any messages that have the routing key
  prefs: []
  type: TYPE_NORMAL
- en: '*Calc.Data.*.1*'
  prefs: []
  type: TYPE_NORMAL
- en: to the
  prefs: []
  type: TYPE_NORMAL
- en: '*Calc.Queue.1*'
  prefs: []
  type: TYPE_NORMAL
- en: message queue. So, if you publish a message with the key
  prefs: []
  type: TYPE_NORMAL
- en: '*Calc.Data.Foobaz.1*'
  prefs: []
  type: TYPE_NORMAL
- en: ', it will be routed to this queue, where the subscriber will pick up the message
    for processing.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we will try to send a sample message using the management console.
  prefs: []
  type: TYPE_NORMAL
- en: 10) Go back to the Exchanges tab and click on the CalcExchange item
  prefs: []
  type: TYPE_NORMAL
- en: 10a) Go down to the
  prefs: []
  type: TYPE_NORMAL
- en: '*Publish Message*'
  prefs: []
  type: TYPE_NORMAL
- en: section.
  prefs: []
  type: TYPE_NORMAL
- en: '10b) Type in the following entries for the Routing Key and Payload fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Routing Key:**'
  prefs: []
  type: TYPE_NORMAL
- en: Calc.Data.ABC123.1,
  prefs: []
  type: TYPE_NORMAL
- en: '**Payload:**'
  prefs: []
  type: TYPE_NORMAL
- en: This is a test message for Calc Node 1
  prefs: []
  type: TYPE_NORMAL
- en: 10c) Press the
  prefs: []
  type: TYPE_NORMAL
- en: '*Publish*'
  prefs: []
  type: TYPE_NORMAL
- en: button. When the status message pops up, just close it. The status message should
    have a green background, indicating success.
  prefs: []
  type: TYPE_NORMAL
- en: 11) Go back to the
  prefs: []
  type: TYPE_NORMAL
- en: '*Queues*'
  prefs: []
  type: TYPE_NORMAL
- en: tab, and click on Calc.Queue.1
  prefs: []
  type: TYPE_NORMAL
- en: 11a) Go down to the
  prefs: []
  type: TYPE_NORMAL
- en: '*Get Messages*'
  prefs: []
  type: TYPE_NORMAL
- en: section and press the "Get Message(s)" button. You should see the message that
    you just sent.
  prefs: []
  type: TYPE_NORMAL
- en: 12) You can also go to the last tab of the management page, which should be
    the
  prefs: []
  type: TYPE_NORMAL
- en: '*Visualizer*'
  prefs: []
  type: TYPE_NORMAL
- en: tab, and view the topology.
  prefs: []
  type: TYPE_NORMAL
- en: As an aside, the sample programs that come with the .NET Client need a bunch
    of mods before you can get them to load into Visual Studio 2010.
  prefs: []
  type: TYPE_NORMAL
- en: ©2011 Marc Adler - All Rights Reserved. All opinions here are personal, and
    have no relation to my employer.
  prefs: []
  type: TYPE_NORMAL
