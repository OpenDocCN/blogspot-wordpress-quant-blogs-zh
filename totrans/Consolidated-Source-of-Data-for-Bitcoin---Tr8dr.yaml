- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 15:28:38'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Consolidated Source of Data for Bitcoin | Tr8dr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tr8dr.wordpress.com/2015/01/27/consolidated-source-of-data-for-bitcoin/#0001-01-01](https://tr8dr.wordpress.com/2015/01/27/consolidated-source-of-data-for-bitcoin/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: January 27, 2015 · 7:55 pm
  prefs: []
  type: TYPE_NORMAL
- en: 'It seems like every other month there is a new bitcoin exchange.  For the purposes
    of trading research & backtesting it is important to have historical data across
    the most liquid exchanges.  My minimal list is:'
  prefs: []
  type: TYPE_NORMAL
- en: BTC/USD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: bitfinex (15%)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: bitstamp (5%)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: coinbase (new, but likely to garner market share)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BTC/CNY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: okcoin (28%)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: btcn (44%)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: (percentage volume sourced from [http://bitcoincharts.com/charts/volumepie/](http://bitcoincharts.com/charts/volumepie/
    "bitcoincharts")).   Each of these exchanges not only has a unique protocol but
    also unique semantics that need to be normalized.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, bitstamp produces the following sequence of transactions for a
    partial sweep of the orderbook.  For example, here is a partial sweep, where a
    BUY 14 @ 250.20 was placed, crossing 4 orders on the sell side of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Orderbook sweep](img/9189f762ecae380f6bebb699f637104d.png)In Bitstamp, would
    see the following transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NEW BUY 14 @ 250.20, id: 43**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DEL  SELL 1.2 @ 250.05, id: 23'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**UPDATE BUY 12.8 @ 250.20: id, 43**  (updating the size of the aggressing
    order)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TRADED 1.2 @ 250.05
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DEL SELL 0.3 @ 250.10, id: 24'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**UPDATE BUY 12.5 @ 250.20: id, 43**  (updating the size of the aggressing
    order)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TRADED 0.3 @ 250.10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: …
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TRADED 8 @ 250.20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DEL BUY 0 @ 250.20, id: 43'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The oddity here is that many market data streams & orderbook implementations
    will just transact the crossing in 1 go, so one will usually only see:  DEL, TRADE,
    DEL, TRADE, DEL TRADE (and deletes may not be sequenced between the trades either).
     Where it gets odd is in replaying this data in that a typical OB implementation
    will sweep the book on seeing the order right away without intermediate UPDATE
    states.   In such an implementation, seeing UPDATE to non-0 size after crossing
    and deleting the order completely might be seen as an error or a missed NEW, since
    the order is no longer on record in the OB.'
  prefs: []
  type: TYPE_NORMAL
- en: Another note is that Bitstamp does not indicate the side of the trade (i.e.
    which side aggressed), though this is uncommon in markets such as equities or
    FX, Bitcoin exchanges do provide this.   Fortunately because the initial crossing
    order is provided can use a bipartite graph (in the presence of multiple crossing
    orders) to determine the most likely aggressing order and therefore the trade
    sign.
  prefs: []
  type: TYPE_NORMAL
- en: '**Clearing House for Data**'
  prefs: []
  type: TYPE_NORMAL
- en: 'I would like to build and/or participate in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: build robust normalized L3 or L2 -> L3 (implied) orderbook live feeds
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: used to collect data into a simple binary tickdb format
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: also can be reused as connectivity handlers for live trading
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: normalize transaction stream (such as issues in the example above)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: identify buy/sell designation on trades based on exchange specific semantics
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'in addition to exchange specific tick streams / dbs, create a consolidated
    OB stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: synchronized market state to nearest ms
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: normalized orderid space so that order ids do not collide and can identify order
    source
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: simple means to generate bars or filter for trades from the L3 data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It takes some amount of time to develop & fairly small amount of money to run
    in terms of hosting.   Assuming there are not EULA issues in doing so, could perhaps
    provide data as a non-profit sort of arrangement.   Not looking to build a for-profit
    company around this rather a collective where can give something back to the community
    and perhaps be able to make use of donated resources and/or data.
  prefs: []
  type: TYPE_NORMAL
