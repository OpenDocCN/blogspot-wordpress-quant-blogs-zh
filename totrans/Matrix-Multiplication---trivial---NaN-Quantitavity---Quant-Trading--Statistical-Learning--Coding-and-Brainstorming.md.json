["```\n#include <sstream>\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\ntypedef vector< vector<int> > Intmatrix;\n\nvoid read(string filename, int& n, Intmatrix &A) {\n\tstring line;\n\tifstream infile;\n\tinfile.open (filename.c_str());\n\tint i=0, j=0, a;\n\n\twhile (getline(infile, line) && !line.empty() && i<n) {\n\t\tistringstream iss(line);\n\t\tj = 0;\n\t\twhile (iss >> a) {\n\t\t\tA[i][j] = a;\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\tinfile.close();\n}\n\nIntmatrix ijkalgorithm(Intmatrix A, Intmatrix B) {\n\tint n = A.size();\n\n\t// initialise C with 0s\n\tvector<int> tmp(n, 0);\n\tIntmatrix C(n, tmp);\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\tC[i][j] += A[i][k] * B[k][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn C;\n}\n\nvoid printMatrix(Intmatrix matrix) {\n\tIntmatrix::iterator it;\n\tvector<int>::iterator inner;\n\tfor (it=matrix.begin(); it != matrix.end(); it++) {\n\t\tfor (inner = it->begin(); inner != it->end(); inner++) {\n\t\t\tcout << *inner;\n\t\t\tif(inner+1 != it->end()) {\n\t\t\t\tcout << \"\\t\";\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t}\n}\n\nint main (int argc, char* argv[]) {\n\tstring filename = \"C:\\\\Projects\\\\2000.in\";\n\tint n = 3;\n\tIntmatrix A(n,n), B(n,n), C(n,n);\n\tread (filename, n, A);\n\tread (filename, n, B);\n\tC = ijkalgorithm(A, B);\n\tprintMatrix(A);\tprintMatrix(B);\tprintMatrix(C);\n\n\tchar tmp; cin>>tmp; return 0;\n}\n// https://github.com/MartinThoma/matrix-multiplication\n// http://www.tohtml.com/cpp/\n```"]