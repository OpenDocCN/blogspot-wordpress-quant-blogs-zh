- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 04:46:20'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Intelligent Trading: FFT (Fast Fourier Transform) of time series -- promises
    and pitfalls towards trading'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://intelligenttradingtech.blogspot.com/2010/02/fft-of-time-series-promises-and.html#0001-01-01](http://intelligenttradingtech.blogspot.com/2010/02/fft-of-time-series-promises-and.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[![](img/1ce8a68f1d7c09c3e6aedd4c8b6c6347.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhY8YiJBD0gv93-SrmWQArf0mc8mt4zDjSrLwI_pgXi1PL-fqld5Ra0DgSYwEJ36SM7S0v-XVHu25VdUy0EaOADB8oVgSIB71mOJOM2jxTSuFvME53YN_U3yU6pygua36bWiiS8nS-c3Zc/s1600-h/fft_ex.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Fig 1\. FFT transformed time series (EBAY) reconstructed with first three and
    twenty harmonics, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: I see quite a few traders interested in advanced signal processing techniques.
    It is often instructive to see why they may or may not be useful. The concept
    behind fourier analysis is that any periodic signal can be broken down into a
    taylor series or sum of suitably scaled sine and cosine waveforms (even a square
    wave!). The key requirement is that the signals are periodic, which means that
    they repeat forwards and backwards to plus and minus infinity. Anyone who deals
    with financial series knows they are aperiodic (meaning they do not repeat indefinitely).
    The FFT, or fast fourier transform is an algorithm that essentially uses convolution
    techniques to efficiently find the magnitude and location of the tones that make
    up the signal of interest. We can often play with the FFT spectrum, by adding
    and removing successive tones (which is akin to selectively filtering particular
    tones that make up the signal), in order to obtain a smoothed version of the underlying
    signal.
  prefs: []
  type: TYPE_NORMAL
- en: In the posted example, I showed the effect of reconstructing the transformed
    waveform using only the first three tones (and cutting off all others), where
    we see a low passed version of the signal. The second example includes the first
    20 tones, which begins to match the signal more closely, but is a smoothed representation
    of the signal, which is often a nice representation to isolate smoothed signal
    component from high frequency noise. Notice the terms tones and harmonics are
    practically synonymous for purposes of this discussion (a harmonic is more specifically
    a multiple of the fundamental tone); both represent the spectral frequency components
    that sum up to make the total waveform. The major problem that I wanted to illustrate
    with this simple example (among many), is the problem of 'wraparound effects.'
    As I mentioned earlier, one of the requirements for properly applying a fourier
    transform is that the signal is periodic or repeating, since the basis functions
    (sines and cosines) that are convolved are infinitely repeating functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that requirement, the reconstructed waveform tries its best to match the
    beginning and endpoints for periodic repetition. The result is severe problems
    at the endpoints (left and right), which are often the points we are most concerned
    about. So it often pays to be cautious when hearing about applications of higher
    level signal processing techniques. There are several other requirements and limitations
    to applying FFT techniques, among them: requirement of 2^n samples, fsample must
    be greater than or equal to twice the max bandwidth of sampled signal (nyquist
    criterion), limited spectral tone bin resolution; ignoring any of these issues
    can cause severe reconstruction errors.'
  prefs: []
  type: TYPE_NORMAL
