["```\n#let's define our silly countupdown function\n#as a sample of a custom ttr rule\nCUD <- function(x,params=50,...) {\n\t#CUD takes the n-period sum of 1 (up days) and -1 (down days)\n\ttemp <- ifelse(runSum(ifelse(ROC(x,1,type=\"discrete\") > 0,1,-1),params)>=0,1,0)\n\t#replace NA with 0 at beginning of period\n\ttemp[is.na(temp)] <- 0\n\ttemp\n}   require(ttrTests)\nrequire(quantmod)\nrequire(lattice)\nrequire(reshape2)\nrequire(PerformanceAnalytics)   #defaults functions is overridden by ggplot2 and plyr if loaded\n#and will cause problems if you want to use ttrTests concurrently   tckrs <- c(\"GSPC\",\"RUT\",\"N225\",\"GDAXI\",\"DJUBS\")   for (i in 1:length(tckrs)) {\n\tgetSymbols(paste(\"^\",tckrs[i],sep=\"\"),from=\"1896-01-01\",to=Sys.Date())\n\ttest_price <- as.vector(get(tckrs[i])[,4])\n\t#do parameter tests but plot=FALSE\n\t#we will plot later\n\t#if you want plot=TRUE make sure you add dev.new() here\n\tparam_results <- paramStats(x=test_price, ttr = CUD, start = 20, nSteps = 30, stepSize = 10,\n\t\trestrict = FALSE, burn = 0, short = FALSE, condition = NULL,\n\t\tsilent = TRUE, TC = 0.001, loud = TRUE, plot = FALSE, alpha = 0.025,\n\t\tbegin = 1, percent = 1, file = \"\", benchmark = \"hold\")\n\t#get excess returns and add to matrix\n\tifelse(i==1,param_all <- param_results[[1]],\n\t\tparam_all <- cbind(param_all,param_results[[1]]))\n\t#get best parameter and add to matrix\n\tifelse(i==1,param_best <- param_results[[5]],\n\t\tparam_best <- rbind(param_best,param_results[[5]]))\n}\nrownames(param_best) <- tckrs\nprint(param_best)   param_all <- cbind(param_results[[8]],param_all)\n#fix rownames and colnames for param_all\ncolnames(param_all) <- c(\"parameters\",tckrs)   df <- as.data.frame(param_all)\ndf.melt <- melt(df,id.vars=1)\ncolnames(df.melt) <- c(\"parameters\",\"index\",\"excessreturn\")\nparam_plot <- xyplot(excessreturn~parameters,group=index,data=df.melt,\n\tauto.key=TRUE,type=\"l\",main=\"Excess Returns by Parameter\")\n#jpeg(filename=\"excess return by parameter.jpg\",\n\tquality=100,width=6.25, height = 6.25,  units=\"in\",res=96)\nprint(param_plot)\n#want to add points for max but unsure how currently\n#df.melt[which(df.melt$parameters==param_best[1,] & df.melt$index==rownames(param_best)[1] ),3]\ndev.off()   #get performance summary for the best parameters\nfor (i in 1:length(tckrs)) {\n\tdev.new()\n\t#jpeg(filename=paste(tckrs[i],\"performance summary.jpg\",sep=\"\"),\n\t#\tquality=100,width=6.25, height = 6.25,  units=\"in\",res=96)\n\tret <- merge(lag(CUD(get(tckrs[i])[,4],\n\t\tcoredata(param_best)[1],k=1))*ROC(get(tckrs[i])[,4],type=\"discrete\", n=1),\n\t\tROC(get(tckrs[i])[,4],type=\"discrete\", n=1))\n\tcolnames(ret)<-c(paste(tckrs[i],\" CUD System\",sep=\"\"),tckrs[i])\n\tcharts.PerformanceSummary(ret,ylog=TRUE)\n\t#dev.off()\n\tret[1,]<-0\n\tprice_system <- merge(get(tckrs[i])[,4],\n\t\tlag(CUD(get(tckrs[i])[,4],\n\t\tcoredata(param_best)[1],k=1))*get(tckrs[i])[,4],\n\t\tcumprod(1+ret[,1])*coredata(get(tckrs[i]))[coredata(param_best)[1],4])\n\tprice_system[which(price_system[,2]==0),2] <- NA\n\tcolnames(price_system) <- c(\"Out\",\"In\",\"System\")   dev.new()\n\t#jpeg(filename=paste(tckrs[i],\"entry analysis.jpg\",sep=\"\"),\n\t#\tquality=100,width=6.25, height = 6.25,  units=\"in\",res=96)\n\tchartSeries(price_system$System,theme=\"white\",log=TRUE,up.col=\"black\",\n\t\tyrange=c(min(price_system[,c(1,3)]),max(price_system[,c(1,3)])),\n\t\tTA=\"addTA(price_system$Out,on=1,col=2);\n\t\taddTA(price_system$In,on=1,col=3)\",\n\t\tname=paste(tckrs[i],\" Linear Model System\",sep=\"\"))\n\t#dev.off()\n}\n```"]