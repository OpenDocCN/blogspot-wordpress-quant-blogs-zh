["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\n\ttickers = dow.jones.components()\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '2009-01-01', env = data, auto.assign = T)\n\tbt.prep(data, align='remove.na')\t\n\n```", "```\n\n\t#*****************************************************************\n\t# Principal component analysis (PCA), for interesting discussion\n\t# http://machine-master.blogspot.ca/2012/08/pca-or-polluting-your-clever-analysis.html\n\t#****************************************************************** \n\tprices = last(data$prices, 1000)\n\t\tn = len(tickers)  \t\t\n\tret = prices / mlag(prices) - 1\n\n\tp = princomp(na.omit(ret[1:250,]))\n\n\tloadings = p$loadings[]\n\n\t# look at the first 4 principal components \t\n\tcomponents = loadings[,1:4]\n\n\t# normalize all selected components to have total weight = 1\n\tcomponents = components / repRow(colSums(abs(components)), len(tickers))\n\n\t# note that first component is market, and all components are orthogonal i.e. not correlated to market\n\tmarket = ret[1:250,] %*% rep(1/n,n)\n\ttemp = cbind(market, ret[1:250,] %*% components)\n\t\tcolnames(temp)[1] = 'Market'\t\n\n\tround(cor(temp, use='complete.obs',method='pearson'),2)\n\n\t# the variance of each component is decreasing\n\tround(100*sd(temp,na.rm=T),2)\n\n```", "```\n\nCorrelation:\n       Market Comp.1 Comp.2 Comp.3 Comp.4\nMarket    1.0      1    0.2    0.1      0\nComp.1    1.0      1    0.0    0.0      0\nComp.2    0.2      0    1.0    0.0      0\nComp.3    0.1      0    0.0    1.0      0\nComp.4    0.0      0    0.0    0.0      1\n\nStandard Deviation:\nMarket Comp.1 Comp.2 Comp.3 Comp.4\n   1.8    2.8    1.2    1.0    0.8\n\n```", "```\n\n\t#*****************************************************************\n\t# Find stationary components, Augmented Dickey-Fuller test\n\t#****************************************************************** \t\n\tlibrary(tseries)\n\tequity = bt.apply.matrix(1 + ifna(-ret %*% components,0), cumprod)\n\t\tequity = make.xts(equity, index(prices))\n\n\t# test for stationarity ( mean-reversion )\n\tadf.test(as.numeric(equity[,1]))$p.value\n\tadf.test(as.numeric(equity[,2]))$p.value\n\tadf.test(as.numeric(equity[,3]))$p.value\n\tadf.test(as.numeric(equity[,4]))$p.value\n\n```", "```\n\n\t#*****************************************************************\n\t# Plot securities and components\n\t#*****************************************************************\n\tlayout(1:2)\n\n\t# add Bollinger Bands\n\ti.comp = 4\n\tbbands1 = BBands(repCol(equity[,i.comp],3), n=200, sd=1)\n\tbbands2 = BBands(repCol(equity[,i.comp],3), n=200, sd=2)\n\ttemp = cbind(equity[,i.comp], bbands1[,'up'], bbands1[,'dn'], bbands1[,'mavg'],\n\t\t\t\tbbands2[,'up'], bbands2[,'dn'])\n\t\tcolnames(temp) = spl('Comp. 4,1SD Up,1SD Down,200 SMA,2SD Up,2SD Down')\n\n\tplota.matplot(temp, main=paste(i.comp, 'Principal component'))\n\n\tbarplot.with.labels(sort(components[,i.comp]), 'weights')\t\t\n\n```"]