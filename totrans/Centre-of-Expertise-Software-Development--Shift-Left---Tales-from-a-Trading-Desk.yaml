- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:27:31'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Centre of Expertise Software Development: Shift Left | Tales from a Trading
    Desk'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2018/01/25/centre-of-expertise-software-development-shift-left/#0001-01-01](https://mdavey.wordpress.com/2018/01/25/centre-of-expertise-software-development-shift-left/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Centre of Expertise Software Development: Shift¬†Left'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looks like ABN AMRO is [embracing](https://www.abnamro.com/en/careers/vacancies/it-internship-software-development-shift-left-amsterdam-11566i10-en_US.html)
    software quality üôÇ
  prefs: []
  type: TYPE_NORMAL
- en: '‚Äú**Introduction**:Happy flow programming is easy, taking into account everything
    that can go wrong is difficult. There are many theories on how to properly take
    into account non-functional requirements such as maintainability, reliability
    in early stages of the software development life cycle. Shift left testing is
    an approach to software testing and system testing in which testing is performed
    earlier in the lifecycle (i.e., moved left on the project timeline). It is the
    first half of the maxim ‚ÄúTest early and often.‚Äú Why is it that transferring these
    theories into practice is so hard? What is it that more often than not a software
    engineer does not tackle what can go wrong earlier in the process? **Problem**:ABN
    AMRO has a long history in software development and certain processes and procedures
    have become habits. For instance validating quality at a very late stage, by having
    the bulk of tests in the acceptance environment. Although most stakeholders are
    aware of this and see the need to move a lot of this work to the development and
    test phases, the pace of adoption and practical implementations is still too low.
    **Research questions**:The main problem is the adoption of proper testing at development
    time. As a result, the main research question is:What are the best practices for
    shifting as many tests as possible to the development phase? Other underlying
    research questions might be:'
  prefs: []
  type: TYPE_NORMAL
- en: How can the quality of Unit Tests be validated and improved?
  prefs: []
  type: TYPE_NORMAL
- en: How can performance tests be implemented in the development or test phase?
  prefs: []
  type: TYPE_NORMAL
- en: How can availability tests be implemented in the development or test phase?‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: ~ by mdavey on January 25, 2018.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Agile](https://mdavey.wordpress.com/category/agile/), [Languages](https://mdavey.wordpress.com/category/languages/)
  prefs: []
  type: TYPE_NORMAL
