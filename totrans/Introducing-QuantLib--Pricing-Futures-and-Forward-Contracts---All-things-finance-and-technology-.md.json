["```\n#include <iostream>\n#include <cstdlib>\n#define BOOST_AUTO_TEST_MAIN\n#include <boost/test/unit_test.hpp>\n#include <boost/detail/lightweight_test.hpp>\n#include <ql/quantlib.hpp>\n#include <boost/math/distributions.hpp>\n#include <vector>\n#include <boost/function.hpp>\n#include <boost/math/distributions.hpp>\n#include <ql/instruments/bonds/fixedratebond.hpp> \n#include <ql/pricingengines/bond/bondfunctions.hpp>\n#include <boost/format.hpp>\n#include <ql/instruments/fixedratebondforward.hpp>\n#include <ql/termstructures/yield/discountcurve.hpp>\n\nusing namespace QuantLib;\n\nBOOST_AUTO_TEST_CASE(testCalculateForwardPriceOfFixedRateBond) {\n\nCalendar calendar = UnitedStates(UnitedStates::GovernmentBond);\nconst Natural settlementDays = 1;\nDate today = Date::todaysDate();\nDate bondIssueDate = calendar.adjust(today, ModifiedFollowing);\nDate bondMaturityDate = bondIssueDate + Period(3, Years);\nRate rate = .03;\nSettings::instance().evaluationDate() = bondIssueDate;\n\n//coupon schedule\nstd::vector coupons(1, .05);\n\n//fixed rate bond\nReal faceValue = 100.0;\nboost::shared_ptr<FixedRateBond> fixedRateBondPtr(new FixedRateBond(settlementDays, calendar, \nfaceValue, bondIssueDate, bondMaturityDate, Period(Annual), coupons, ActualActual(ActualActual::Bond)));\nboost::shared_ptr<YieldTermStructure> flatForwardRates(new FlatForward(bondIssueDate,\nrate, ActualActual(ActualActual::Bond), Compounded, Annual));\nRelinkableHandle<YieldTermStructure> flatTermStructure(flatForwardRates);\nboost::shared_ptr<PricingEngine> bondEngine(new DiscountingBondEngine(flatTermStructure));\nfixedRateBondPtr->setPricingEngine(bondEngine);\n\n//calculate bond price\nReal bondPrice = fixedRateBondPtr->NPV();\nstd::cout << \"Bond price: \" << bondPrice << std::endl;\n\n//print cash flows using C++ 11 range-based for loop\nfor (boost::shared_ptr<CashFlow> cashFlow : fixedRateBondPtr->cashflows()) {\n     std::cout << boost::format(\"Cash flow: %s, %.2f\") % cashFlow->date() % cashFlow->amount() << std::endl; \n}\n\n//forward maturity tenor \nDate forwardMaturityDate = bondIssueDate + Period(15, Months); \nNatural daysToMaturityOfForwardContract = (forwardMaturityDate - bondIssueDate) - settlementDays;\nstd::cout << boost::format(\"Expiration of forward contract: %s\") % forwardMaturityDate << std::endl;\nstd::cout << boost::format(\"Days to maturity of forward contract: %i\") % daysToMaturityOfForwardContract << std::endl; \n\n//calculate strike price/future value of the bond using periodic, annual rate (not continuous) because this a bond\t\t\nReal income = (fixedRateBondPtr->nextCouponRate(bondIssueDate) * faceValue);\nconst Real strike = bondPrice * (1 + rate * daysToMaturityOfForwardContract/365) - income;  \nstd::cout << boost::format(\"Strike price of forward contract is: %.2f\") % strike << std::endl;\n\n//forward contract on a fixed rate bond\nFixedRateBondForward fixedRateBondForward(bondIssueDate, forwardMaturityDate, Position::Type::Long, strike, settlementDays,\nActualActual(ActualActual::Bond), calendar, ModifiedFollowing, fixedRateBondPtr, flatTermStructure, flatTermStructure);\n\n//calculate forward price of bond \nReal forwardPrice = fixedRateBondForward.NPV();\nstd::cout << boost::format(\"Bond forward contract value: %.2f\") % forwardPrice << std::endl;\n\n//evaluate forward contract by shocking interest rates +/- 1%\nboost::shared_ptr<YieldTermStructure> flatForwardRatesUpOnePercent(new FlatForward(bondIssueDate,\nrate + .01, ActualActual(ActualActual::Bond), Compounded, Annual));\n\nflatTermStructure.linkTo(flatForwardRatesUpOnePercent);\n\n//recalculate forward price of bond \nstd::cout << boost::format(\"Bond forward contract value (rates up 1 percent): %.2f\") % fixedRateBondForward.NPV() << std::endl;\n\nboost::shared_ptr<YieldTermStructure> flatForwardRatesDownOnePercent(new FlatForward(bondIssueDate,\nrate - .01, ActualActual(ActualActual::Bond), Compounded, Annual));\n\nflatTermStructure.linkTo(flatForwardRatesDownOnePercent);\n\n//recalculate forward price of bond \nstd::cout << boost::format(\"Bond forward contract value (rates down 1 percent): %.2f\") % fixedRateBondForward.NPV() << std::endl;\n\n}\n```"]