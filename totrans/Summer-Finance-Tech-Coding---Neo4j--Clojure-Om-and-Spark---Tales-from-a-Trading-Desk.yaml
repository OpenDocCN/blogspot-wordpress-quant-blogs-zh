- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:40:54'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Summer Finance Tech Coding – Neo4j, Clojure/Om and Spark | Tales from a Trading
    Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mdavey.wordpress.com/2015/07/15/summer-finance-tech-coding-neo4j-clojureom-and-spark/#0001-01-01](https://mdavey.wordpress.com/2015/07/15/summer-finance-tech-coding-neo4j-clojureom-and-spark/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summer Finance Tech Coding – Neo4j, Clojure/Om and Spark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m playing with a number of different technologies at the moment.  Mostly extensions
    of ideas I’ve previously blogged about.
  prefs: []
  type: TYPE_NORMAL
- en: Timelines and Neo4j
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifically I’m interested in modelling the trade lifecycle in Neo4j (as discussed
    [here](https://mdavey.wordpress.com/2011/12/07/bitemporal-model-lifecycle-events-and-operational-risk-part-2/))
    and also Skill Cloud ([here](https://mdavey.wordpress.com/2014/06/03/skill-cloud-part-3/))
    and avoiding the “current” view graphs that most applications/samples use.  Primarily
    leveraging ES6 code with Seraph as I’m not concerned about performance for this
    prototype.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a few interesting references documents that are worth a read:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Representing time [dependent](https://github.com/SocioPatterns/neo4j-dynagraph/wiki/Representing-time-dependent-graphs-in-Neo4j)
    graphs in Neo4j
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Time-Based [Versioned](http://iansrobinson.com/2014/05/13/time-based-versioned-graphs/)
    Graphs – Ian’s solutions is quite clear in that it primarily leverages properties
    on relationships:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each relationship has a from property with a long millisecond value representing
    1 January 2014, and a to property with a very large long value (End-Of-Time, or
    EOT, which is a magic number – in this case Long.MAX_VALUE) that effectively means
    there is no current upper bound to the period associated with the relationship.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clojure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Om [Next](https://www.youtube.com/watch?v=ByNs9TG30E8&) – David Nolen presentation
    has rekindled my interested in [ClojureScript](https://www.niwi.nz/cljs-workshop/#_let_s_start_with_2).
     Push Technologies offer a simple but FX bias [demo](http://www.pushtechnology.com/2015/02/26/dynamic-pages-clojurescript/)
    of ClojureScript streaming prices – although not overly complex the demo does
    offer food for though with regards to [Clojure](http://www.infoq.com/interviews/stuart_holloway_clojure)
    in the electronic trading space. “Brandon Bloom – Building CircleCI’s Front end
    With Om” provide some insight into the [challenges](https://www.youtube.com/watch?v=LNtQPSUi1iQ)
    of an Om project.  Deployment to production is offered by [lein-ring](https://github.com/weavejester/lein-ring),
    IDE of choice is [Cursive](https://cursiveclojure.com/).  Clojure compiling to
    the JVM should avoid a degree of issues in the corporate space.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ~ by mdavey on July 15, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  prefs: []
  type: TYPE_NORMAL
