["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\t#*****************************************************************\n\t# Load factor data that we saved at the end of the fm.all.factor.test functions\n\t#****************************************************************** \n\tload.packages('quantmod,abind')\t\n\n\tload(file='data.factors.Rdata')\n\t\t# remove Composite Average factor\n\t\tfactors.avg = factors.avg[which(names(factors.avg) != 'AVG')]\t\n\n\t#*****************************************************************\n\t# Run cross sectional regression to estimate factor returns\n\t#****************************************************************** \n\tnperiods = nrow(next.month.ret)\n\tn = ncol(next.month.ret)\n\n\t# create sector dummy variables: binary 0/1 values for each sector\n\tnsectors = len(levels(sectors))\t\n\tsectors.matrix = array(double(), c(nperiods, n, nsectors))\n\t\tdimnames(sectors.matrix)[[3]] = levels(sectors)\t\t\n\tfor(j in levels(sectors)) {\n\t\tsectors.matrix[,,j] = matrix(sectors == j,  nr=nperiods, nc=n, byrow=T)\n\t}\n\n\t# create matrix for each factor\n\tfactors.matrix = abind(factors.avg, along = 3)\t\t\n\n\t# combine sector dummies and all factors\n\tall.data = abind(sectors.matrix, factors.matrix)\t\t\n\n\t# create betas and specific.return\n\tbeta = all.data[,1,] * NA\n\tspecific.return = next.month.ret * NA\n\t\tnfactors = ncol(beta)\n\n\t# append next.month.ret to all.data\t\t\t\n\tall.data = abind(next.month.ret, all.data, along = 3)\n\t\tdimnames(all.data)[[3]][1] = 'Ret'\n\n\t# estimate betas (factor returns)\n\tfor(t in 12:(nperiods-1)) {\t\t\n\t\ttemp = all.data[t:t,,]\n\t\tx = temp[,-c(1:2)]\n\t\ty = temp[,1]\n\t\tb = lm(y~x)$coefficients\n\n\t\tb[2:nsectors] = b[1] + b[2:nsectors]\n\t\tbeta[(t+1),] = b\t\t\n\n\t\tspecific.return[(t+1),] = y - rowSums(temp[,-1] * matrix(b, n, nfactors, byrow=T), na.rm=T)\t\n\t}\n\n```", "```\n\nRet = b1 * F1 + b2 * F2 + ... + bn * Fn + e\nwhere \nb1...bn are estimated factor returns\nF1...Fn are factor exposures. I.e. sector dummies and CSFB factor exposures\ne is stock specific return, not captured by factors F1...Fn\n```", "```\n\n\tload.packages('MASS')\n\ttemp = rlm(y~x)$coefficients\n\n```", "```\n\n\tload.packages('quantreg')\n\ttemp = rq(y ~ x, tau = 0.5)$coefficients\n\n```", "```\n\n\t#*****************************************************************\n\t# helper function\n\t#****************************************************************** \t\n\tfm.hist.plot <- function(temp, smain=NULL) {\t\t\t\n\t\tntemp = ncol(temp)\t\t\n\t\tcols = plota.colors(ntemp)\t\n\t\tplota(temp, ylim = range(temp), log='y', main=smain)\n\t\tfor(i in 1:ntemp) plota.lines(temp[,i], col=cols[i])\n\t\tplota.legend(colnames(temp), cols, as.list(temp))\n\t}\n\n\t#*****************************************************************\n\t# Examine historical cumulative factor returns\n\t#****************************************************************** \t\n\ttemp = make.xts(beta, index(next.month.ret))\n\t\ttemp = temp['2000::',]\n\t\ttemp[] = apply(coredata(temp), 2, function(x) cumprod(1 + ifna(x,0)))\n\n\tfm.hist.plot(temp[,-c(1:nsectors)], 'Factor Returns')\n\n```", "```\n\n\tload.packages('BurStFin')\t\n\tfactor.covariance = array(double(), c(nperiods, nfactors, nfactors))\n\t\tdimnames(factor.covariance)[[2]] = colnames(beta)\n\t\tdimnames(factor.covariance)[[3]] = colnames(beta)\n\n\t# estimate factor covariance\n\tfor(t in 36:nperiods) {\n\t\tfactor.covariance[t,,] = var.shrink.eqcor(beta[(t-23):t,])\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Compute stocks specific variance foreasts using GARCH(1,1)\n\t#****************************************************************** \t\n\tload.packages('tseries,fGarch')\t\n\n\tspecific.variance = next.month.ret * NA\n\n\tfor(i in 1:n) {\n\t\tspecific.variance[,i] = bt.forecast.garch.volatility(specific.return[,i], 24) \n\t}\n\n\t# compute historical specific.variance\n\thist.specific.variance = next.month.ret * NA\n\tfor(i in 1:n) hist.specific.variance[,i] = runSD(specific.return[,i], 24)\t\n\n\t# if specific.variance is missing use historical specific.variance\n\tspecific.variance[] = ifna(coredata(specific.variance), coredata(hist.specific.variance))\t\n\n\t#*****************************************************************\n\t# Save multiple factor risk model to be used later during portfolio construction\n\t#****************************************************************** \n\tsave(all.data, factor.covariance, specific.variance, file='risk.model.Rdata')\n\n```", "```\n\nPortfolio Risk = (common factor variance + specific variance)^0.5\n\tcommon factor variance = (portfolio factor exposure) * factor covariance matrix * (portfolio factor exposure)'\n\tspecific variance = (specific.variance)^2 * (portfolio weights)^2\n```", "```\n\n\t#*****************************************************************\n\t# Compute portfolio risk\n\t#****************************************************************** \n\tportfolio = rep(1/n, n)\n\t\tportfolio = matrix(portfolio, n, nfactors)\n\n\tportfolio.risk = next.month.ret[,1] * NA\n\tfor(t in 36:(nperiods-1)) {\t\n\t\tportfolio.exposure = colSums(portfolio * all.data[t,,-1], na.rm=T)\n\n\t\tportfolio.risk[t] = sqrt(\n\t\t\tportfolio.exposure %*% factor.covariance[t,,] %*% (portfolio.exposure) + \n\t\t\tsum(specific.variance[t,]^2 * portfolio[,1]^2, na.rm=T)\n\t\t\t)\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Compute historical portfolio risk\n\t#****************************************************************** \n\tportfolio = rep(1/n, n)\n\t\tportfolio = t(matrix(portfolio, n, nperiods))\n\n\tportfolio.returns = next.month.ret[,1] * NA\n\t\tportfolio.returns[] = rowSums(mlag(next.month.ret) * portfolio, na.rm=T)\n\n\thist.portfolio.risk = runSD(portfolio.returns, 24)\n\n\t#*****************************************************************\n\t# Plot risks\n\t#****************************************************************** \t\t\t\n\tplota(portfolio.risk['2000::',], type='l')\n\t\tplota.lines(hist.portfolio.risk, col='blue')\n\t\tplota.legend('Risk,Historical Risk', 'black,blue')\n\n```"]