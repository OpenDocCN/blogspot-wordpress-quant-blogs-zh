["```\n#include <iostream>\nusing namespace std;\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\n// only for the 1st Node\nvoid initNode(Node *head, int n){\n    head->data = n;\n    head->next =NULL;\n}\n\n// apending\nvoid addNode(struct Node *head, int n) {\n    Node *newNode = new Node;\n    newNode->data = n;\n    newNode->next = NULL;\n\n    Node *cur = head;\n    while(cur) {\n        if(cur->next == NULL) {\n            cur->next = newNode;\n            return;\n        }\n        cur = cur->next;\n    }\n}\n\n// insert at the head\nvoid insertFront(struct Node **head, int n) {\n    Node *newNode = new Node;\n    newNode->data = n;\n    newNode->next = *head;\n    *head = newNode;\n}\n\n// Traversing the list\n/*display*/\nvoid display(struct Node* head) {\n    Node *list = head;\n    while(list) {\n        cout << list->data << \"\";\n        list = list->next;\n    }\n    cout << endl;\n    cout << endl;\n}\n\n/*search a node*/\nstruct Node *searchNode(struct Node* head, int n) {\n    while(head) {\n        if(head->data == n) return head;\n        head = head->next;\n    }\n    cout << \"No Node \" << n << \" in list.\\n\";\n}\n\nstruct Node *searchNode2(struct Node* head, int n) {\n    while(head!=NULL & head->data != n) {\n        head = head->next;\n    }\n    return head;\n}\n\n/*delete a node*/\nbool deleteNode(struct Node **head, Node *ptrDel) {\n    Node* cur = *head;\n    if(ptrDel == *head) {\n        *head = (**head).next;\n        delete ptrDel;\n        return true;\n    }\n    while(cur){\n        if(cur->next == ptrDel) {\n            cur->next = ptrDel->next;\n            delete ptrDel;\n            return true;\n        }\n        cur = cur->next;\n    }\n    return false;\n}\n\n// delete \nvoid deleteLinkedList(struct Node **node)\n{\n    struct Node* tmpNode;\n    while(*node) {\n        tmpNode = *node;\n        *node = tmpNode->next;\n        delete tmpNode;\n    }\n}\n\n// reverse the list\nstruct Node* reverse(struct Node** List) \n{\n    Node* parent = *List;\n    Node* me = parent->next;\n    Node* child = me->next;\n\n    /* make parent as tail */\n    parent->next = NULL;\n    while(child) {\n        me->next = parent;\n        parent = me;\n        me = child;\n        child = child->next;\n    }\n    me->next = parent;\n    *List = me;\n    return *List;\n}\n\n// copy\nvoid copyLinkedList(struct Node *node, struct Node **pNew)\n{\n    if(node != NULL) {\n        *pNew = new Node;\n        (*pNew)->data = node->data;\n        (*pNew)->next = NULL;\n        copyLinkedList(node->next, &((*pNew)->next));\n    }\n}\n\n// Compare two linked list: return value: same(1), different(0)\nint compareLinkedList(struct Node *node1, struct Node *node2)\n{\n    static int flag;\n\n    /* both lists are NULL */\n    if(node1 == NULL && node2 == NULL) {\n        flag = 1;\n    }\n    else {\n        if(node1 == NULL || node2 == NULL) \n            flag = 0;\n        else if(node1->data != node2->data) \n            flag = 0;\n        else\n            compareLinkedList(node1->next, node2->next);\n    }\n\n    return flag;\n}\n\nint main() \n{\n    Node* newHead=0;    \n    Node* head = new Node;\n    initNode(head,10);\n    display(head);\n    addNode(head,20);\n    addNode(head,30);\n    display(head);\n\n    insertFront(&head,5);\n    display(head);\n\n    int numDel = 5;\n    Node* ptrDelete = searchNode(head,numDel);\n    if(deleteNode(&head,ptrDelete)) \n        cout << \"Node \"<< numDel << \" deleted!\\n\";\n    display(head);\n\n    cout << \"The list is reversed\\n\";\n    reverse(&head);\n    display(head);\n\n    cout << \"The list is copied\\n\";\n    copyLinkedList(head,&newHead);\n    display(newHead);\n\n    cout << \"Comparing the two lists...\\n\";\n    cout << \"Are the two lists same?\\n\";\n    if(compareLinkedList(head,newHead)) \n        cout << \"Yes, they are same!\\n\";\n    else\n        cout << \"No, they are different!\\n\";\n    cout << endl;\n\n    numDel = 20;\n    ptrDelete = searchNode(newHead,numDel);\n    if(deleteNode(&newHead,ptrDelete)) {\n        cout << \"Node \"<< numDel << \" deleted!\\n\";\n        cout << \"The new list after the delete is\\n\";\n        display(newHead);\n    }\n    cout << \"Comparing the two lists again...\\n\";\n    cout << \"Are the two lists same?\\n\";\n    if(compareLinkedList(head,newHead)) \n        cout << \"Yes, they are same!\\n\";\n    else\n        cout << \"No, they are different!\\n\";\n\n    cout << endl;\n    cout << \"Deleting the copied list\\n\";\n    deleteLinkedList(&newHead);\n    cout << \"Displaying afer deleting:\\n\";\n    display(newHead);\n    cout << \"END\\n\";\n    return 0;\n}\n\n//Highlighted at http://tohtml.com/cpp/\n//Bred 3 + C++\n//http://www.bogotobogo.com/cplusplus/cpptut.php\n```"]