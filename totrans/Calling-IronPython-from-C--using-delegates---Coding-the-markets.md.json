["```\n using IronPython.Runtime.Operations;\n\n// DictAdapter puts a read only C# dictionary interface on any\n// Python object, which may actaully be a C# object in turn.\npublic class CsDictAdapter : IDictionary {\n\n#region Delegates\npublic delegate object  GetItem( object key);\npublic delegate bool    HasItem( object key);\n\npublic GetItem __getitem__;\npublic HasItem __contains__;\n#endregion\n\n#region Constructors\npublic CsDictAdapter( object gi, object hi) {\nthis.__getitem__ = ( GetItem)Ops.GetDelegate(gi, typeof(GetItem));\nthis.__contains__ = ( HasItem)Ops.GetDelegate(hi, typeof(HasItem));\n}\n#endregion\n\n#region Properties\npublic object this[object key] {\nget { return __getitem__(key); }\nset { }\n}\n\npublic ICollection Keys {\nget { return null; }\n}\n\npublic ICollection Values {\nget { return null; }\n}\n\npublic int Count {\nget { return 0; }\n}\n\npublic bool IsReadOnly {\nget { return true; }\n}\n\npublic bool IsFixedSize {\nget { return true; }\n}\n\npublic Object SyncRoot {\nget { return this; }\n}\n\npublic bool IsSynchronized {\nget { return false; }\n}\n#endregion\n\n// Delegating implementations of all other methods.\n\n#region Interface methods\npublic void Remove(Object key) { }\npublic void Add(Object key, Object value) { }\n\npublic bool ContainsKey( Object key) {\nreturn __contains__( key);\n}\n\npublic bool Contains( Object key) {\nreturn __contains__( key);\n}\n\npublic void Clear() { }\n\npublic int Add(Object item) {\nreturn 0;\n}\n\npublic void CopyTo(Object[] array, int arrayIndex) { }\n\npublic void CopyTo( System.Array array, int arrayIndex ) { }\n\nIDictionaryEnumerator IDictionary.GetEnumerator( ) {\nreturn null;\n}\n\nIEnumerator IEnumerable.GetEnumerator( ) {\nreturn null;\n}\n#endregion\n} \n\n```"]