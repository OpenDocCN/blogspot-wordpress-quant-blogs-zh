["```\n\ntemplate <class F>\nCppAD::AD<Real> GaussianADQuadrature::operator()(const F& f) \n    const {\n    CppAD::AD<Real> sum = 0.0;\n    for (Integer i = order()-1; i >= 0; --i) {\n        sum += w_[i] * f(x_[i]);\n    }\n    return sum;\n}\n\n```", "```\n\nCppAD::AD<Real>; \nAnalyticHestonADEngine::Fj_Helper::operator()(Real phi) const;\n\n```", "```\n\nstd::vector<CppAD::AD<Real> > params;\nparams += spotPrice, v0, kappa, theta, sigma, rho;\nCppAD::Independent(params);\n\nstd::vector<CppAD::AD<Real> > y(1);\n\n// untouched code ...\n\nconst std::vector<Real> moreResults \n    = CppAD::ADFun<Real>(params, y)\n          .Reverse(1, std::vector<Real>(1, 1.0));\n\nresults.value = CppAD::Value(y[0]);\nresults.additionalResults[\"v0\"]    = moreResults[1];\nresults.additionalResults[\"kappa\"] = moreResults[2];\nresults.additionalResults[\"theta\"] = moreResults[3];\nresults.additionalResults[\"sigma\"] = moreResults[4];\nresults.additionalResults[\"rho\"]   = moreResults[5];\n\n```"]