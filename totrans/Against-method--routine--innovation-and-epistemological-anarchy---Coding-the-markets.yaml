- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-12 19:52:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-12 19:52:26'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Against method: routine, innovation and epistemological anarchy | Coding the
    markets'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反方法：例行，创新和认识论混乱 | 编码市场
- en: 来源：[https://etrading.wordpress.com/2006/06/22/against-method-routine-innovation-and-epistemological-anarchy/#0001-01-01](https://etrading.wordpress.com/2006/06/22/against-method-routine-innovation-and-epistemological-anarchy/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2006/06/22/against-method-routine-innovation-and-epistemological-anarchy/#0001-01-01](https://etrading.wordpress.com/2006/06/22/against-method-routine-innovation-and-epistemological-anarchy/#0001-01-01)
- en: '[Confused](http://confusedofcalcutta.com/2006/06/22/four-pillars-on-innovation-and-education/)
    is picking up on [CIO](http://www.muzeview.com/cio/)''s distinction between routine
    and innovation…'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[困惑](http://confusedofcalcutta.com/2006/06/22/four-pillars-on-innovation-and-education/)是在理解[CIO](http://www.muzeview.com/cio/)关于例行工作和创新的区别…'
- en: “Organizing for routine work:  Drive out variance”
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “组织例行工作：消除差异”
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Organizing for innovative work:  Enhance variance”
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “组织创新工作：增强差异”
- en: Back in the early 90s the tension between the 'impose a routine' imperative
    of structured methods like [JSP](http://en.wikipedia.org/wiki/Jackson_Structured_Programming)
    and [Constantine/Yourdon](http://www.win.tue.nl/~wstomv/quotes/structured-design.html)
    and the necessary creativity and innovation of software problem solving drove
    me mad with frustration. Object orientation was crossing over into the mainstream,
    and a new generation of methodologies based on structured methods, but tweaked
    for OO were propounded by their advocates.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 早在90年代初，结构化方法如[JSP](http://en.wikipedia.org/wiki/Jackson_Structured_Programming)和[康斯坦丁/尤尔顿](http://www.win.tue.nl/~wstomv/quotes/structured-design.html)的“强加例行”的必要创造力和软件问题解决的创新推动着我因挫败感而发狂。面向对象正在渐渐成为主流，并且一代新的基于结构化方法的方法论，但为了面向对象而进行了调整，由其倡导者提出。
- en: The promise of those methodolgies was to make software development routine and
    predictable, hence their appeal to managers. Of course, we now know software development
    isn't routine and predictable, and trying to make it so is like trying to nail
    a jelly to the wall. Trying to make it so is to organize for routine and to attempt
    to execute innovation. No wonder it didn't work! More recently, [agile approaches](http://www.agilealliance.org/)
    have acknowledged the essential nature of dev work, and offer a process that works
    with, not against, its intrinsic nature.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的承诺是使软件开发成为例行公事且可预测，因此吸引了管理者。当然，我们现在知道软件开发并不是例行公事且可预测的，试图使其如此就像试图把果冻钉在墙上一样。试图这样做就是为例行公事而组织，并试图执行创新。难怪它没有奏效！最近，[敏捷方法](http://www.agilealliance.org/)已经承认了开发工作的基本性质，并提供了一个与其固有性质相符合而不是相抵触的过程。
- en: 'So back in the early 90s I''d become so maddened by the impose routine/execute
    innovation dichotomy that I spent a week in the [Bodleian Library](http://www.bodley.ox.ac.uk/)
    researching a paper that would decisively reject the claims of the software methodologists.
    It was to be based on twin foundations: [the empirical study of programmers](http://citeseer.ist.psu.edu/context/88525/0),
    and [Paul Feyerabend](http://plato.stanford.edu/entries/feyerabend/)''s [Against
    Method](http://plato.stanford.edu/entries/feyerabend/#2.13).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以回到90年代初，我因为被强加的例行/执行创新的二分法而感到如此愤怒，以至于我花了一周时间在[博德利图书馆](http://www.bodley.ox.ac.uk/)研究一篇可以坚决拒绝软件方法学家主张的论文。它将基于双重基础：[对程序员的经验研究](http://citeseer.ist.psu.edu/context/88525/0)，以及[保罗·费耶拉本德](http://plato.stanford.edu/entries/feyerabend/)的[反方法](http://plato.stanford.edu/entries/feyerabend/#2.13)。
- en: I first came across Feyerabend 20 years ago as an undergrad, browsing the Philosophy
    shelves in Heffers. I came across a copy of [Farewell to Reason](http://www.amazon.co.uk/exec/obidos/ASIN/0860918963),
    and intrigued by the title, bought it. I'd been studying the Philosophy of Science,
    and covered the usual ground with [Popper](http://www.eeng.dcu.ie/~tkpw/), [Kuhn](http://www.des.emory.edu/mfp/Kuhnsnap.html),
    [Lakatos](http://www-history.mcs.st-andrews.ac.uk/Mathematicians/Lakatos.html),
    [Papineau](http://www.kcl.ac.uk/ip/davidpapineau/Staff/Papineau/Papineau.html).
    But no one had mentioned Feyerabend. Once I read Farewell I realised why. It's
    packed full of exciting, radical & contrarian ideas – for instance he defends
    the Church against Galileo !
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 20 年前，我还是一个本科生，在 Heffers 的哲学书架上发现了费耶尔阿本德。我偶然发现了一本[Farewell to Reason](http://www.amazon.co.uk/exec/obidos/ASIN/0860918963)，被标题吸引，就买了下来。我一直在研究科学哲学，并且涉猎了[波普尔](http://www.eeng.dcu.ie/~tkpw/)、[库恩](http://www.des.emory.edu/mfp/Kuhnsnap.html)、[拉卡托斯](http://www-history.mcs.st-andrews.ac.uk/Mathematicians/Lakatos.html)、[帕皮诺](http://www.kcl.ac.uk/ip/davidpapineau/Staff/Papineau/Papineau.html)等人的著作。但没有人提到过费耶尔阿本德。读完《告别理性》后，我才明白为什么。它充满了令人兴奋、激进和与众不同的想法——例如，他为教会辩护反对伽利略！
- en: Much of the Philosophy of Science is about science's purported special status
    in human intellectual activity as a generator of truth and certainty. As such
    it attempts to give an account of how and why science can generate knowledge,
    usually in terms of the [scientific method](http://en.wikipedia.org/wiki/Scientific_method).
    The [logical positivists](http://en.wikipedia.org/wiki/Logical_positivist) characterised
    the scientific method in terms of the [principle of verification](http://en.wikipedia.org/wiki/The_verifiability_theory_of_meaning).
    When that was shown to be self contradictory, Popper's [falsificationist](http://en.wikipedia.org/wiki/Hypothetico-deductive_method)
    ideas came to the fore. They're all epistemology, being theories about knowledge.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多科学哲学关注的是科学在人类智力活动中的所谓特殊地位，即作为真理和确定性的生成者。因此，它试图解释科学如何以及为什么能够生成知识，通常以[科学方法](http://en.wikipedia.org/wiki/Scientific_method)的术语来表述。[逻辑实证主义者](http://en.wikipedia.org/wiki/Logical_positivist)以[验证原则](http://en.wikipedia.org/wiki/The_verifiability_theory_of_meaning)来表述科学方法。当证明这一原则自相矛盾时，波普尔的[证伪主义](http://en.wikipedia.org/wiki/Hypothetico-deductive_method)思想成为主流。它们都属于认识论，是关于知识的理论。
- en: Feyerabend is an epistemological anarchist. Against Method is a sustained polemic
    against the very idea of a scientific method. It argues that any conceivable scientific
    method is refuted by examples of actual science. He examines cases from medicine,
    chemistry and physics and shows that no progress could have been made if scientists
    had stuck by rigid rules as per Popper.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 费耶尔阿本德是一位认识论无政府主义者。《反方法》是一部持续抨击科学方法的论文。它认为，任何可以想象的科学方法都被实际科学的例子所驳斥。他从医学、化学和物理学的案例中进行了研究，并表明如果科学家坚持波普尔的严格规则，就不可能取得任何进展。
- en: Against Method is full of delightfully contrarian insights such as "semantic
    sloppiness is the prerequisite of progress" and "the only principle that does
    not inhibit progress is **anything goes**". When I returned to the book in the
    early 90s, it seemed obviously applicable to software development. Now that Agile
    is widely accepted, that argument doesn't need to be made.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 《反方法》充满了令人愉快的反叛性见解，例如“语义上的粗糙是进步的先决条件”和“唯一不抑制进步的原则是**随心所欲**”。当我在90年代初重读这本书时，它显然适用于软件开发。现在敏捷开发已被广泛接受，不需要再做这个论述了。
- en: So when I see people asserting that we need more than innovations, we need a
    [process for innovation](http://www.muzeview.com/cio/?p=108), I think "the only
    principle that does not inhibit progress is **anything goes**". It's a lesson
    that's been learnt at great length and expense in software development. And it
    looks like there are many others who could still benefit from Feyerabend's insights.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我看到人们声称我们需要的不仅仅是创新，还需要[创新的过程](http://www.muzeview.com/cio/?p=108)时，我想到了“唯一不抑制进步的原则是**随心所欲**”。这是在软件开发中经过长时间和巨大代价得出的教训。看起来还有很多人可以从费耶尔阿本德的见解中受益。
