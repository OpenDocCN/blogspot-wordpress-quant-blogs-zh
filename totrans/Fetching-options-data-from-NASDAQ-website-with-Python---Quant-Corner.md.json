["```\n'''\nCopyright (C) 2015, Edouard 'tagoma' Tallent\nClass fetching options data from www.nasdaq.com \nNasdaq_option_quotes.py v0.2 (Nov15)\nQuantCorner @ https://quantcorner.wordpress.com\n'''\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\nimport numpy as np\nimport pandas as pd\n\nclass NasdaqOptions(object):\n    '''\n    Class NasdaqOptions fetches options data from Nasdaq website\n\n    User inputs:\n        Ticker: ticker\n            - Ticker for the underlying\n        Expiry: nearby\n            - 1st Nearby: 1\n            - 2nd Nearby: 2\n            - etc ...\n        Moneyness: money\n            - All moneyness: all\n            - In-the-money: in\n            - Out-of-the-money: out\n            - Near the money: near\n        Market: market\n            - Composite quote: Composite\n            - Chicago Board Options Exchange: CBO\n            - American Options Exchange: AOE\n            - New York Options Exchange: NYO\n            - Philadelphia Options Exchange: PHO\n            - Montreal Options Exchange: MOE\n            - Boston Options Exchange: BOX\n            -  International Securities Exchange: ISE\n            - Bats Exchange Options Market: BTO\n            - NASDAQ Options: NSO\n            - C2(Chicago) Options Exchange: C2O\n            - NASDAQ OMX BX Options Exchange: BXO\n            - MIAX: MIAX\n        Option category: expi\n            - Weekly options: week\n            - Monthly options: stand\n            - Quarterly options: quart\n            - CEBO options (Credit Event Binary Options): cebo   \n    '''\n    def __init__(self, ticker, nearby, money='near', market='cbo', expi='stan'):\n        self.ticker = ticker\n        self.nearby = nearby-1  # ' refers 1st nearby on NASDAQ website\n        #self.type = type   # Deprecated\n        self.market = market\n        self.expi = expi\n        if money == 'near':\n            self.money = ''\n        else:\n            self.money =  '&money=' + money \n\n    def get_options_table(self):\n        '''\n        - Loop over as many webpages as required to get the complete option table for the\n        option desired\n        - Return a pandas.DataFrame() object \n        '''\n        # Create an empty pandas.Dataframe object. New data will be appended to\n        old_df = pd.DataFrame()\n\n        # Variables\n        loop = 0        # Loop over webpages starts at 0\n        page_nb = 1     # Get the top of the options table\n        flag = 1        # Set a flag that will be used to call get_pager()\n        old_rows_nb = 0 # Number of rows so far in the table\n\n        # Loop over webpages\n        while loop < int(page_nb):\n            # Construct the URL\n            '''url = 'http://www.nasdaq.com/symbol/' + self.ticker + '/option-chain?dateindex='\\\n               + str(self.nearby) + '&callput=' + self.type + '&money=all&expi='\\\n               + self.expi + '&excode=' + self.market + '&page=' + str(loop+1)'''\n            url = 'http://www.nasdaq.com/symbol/' + self.ticker + '/option-chain?excode=' + self.market + self.money + '&expir=' + self.expi + '&dateindex=' + str(self.nearby) + '&page=' + str(loop+1)\n\n            # Query NASDAQ website\n            try:\n                response = requests.get(url)#, timeout=0.1)\n            # DNS lookup failure\n            except requests.exceptions.ConnectionError as e:\n                print('''Webpage doesn't seem to exist!\\n%s''' % e)\n                pass\n            # Timeout failure\n            except requests.exceptions.ConnectTimeout as e:\n                print('''Slow connection!\\n%s''' % e)\n                pass\n            # HTTP error\n            except requests.exceptions.HTTPError as e:\n                print('''HTTP error!\\n%s''' % e)\n                pass\n\n            # Get webpage content\n            soup = BeautifulSoup(response.content, 'html.parser')\n\n            # Determine actual number of pages to loop over\n            if flag == 1:   # It is run only once\n                # Get the number of page the option table lies on\n                last_page_raw = soup.find('a', {'id': 'quotes_content_left_lb_LastPage'})\n                last_page = re.findall(pattern='(?:page=)(\\d+)', string=str(last_page_raw))\n                page_nb = ''.join(last_page)\n                flag = 0\n\n            # Extract table containing the option data from the webpage\n            table = soup.find_all('table')[4] # table #4 in the webpage is the one of interest\n\n            # Extract option data from table as a list\n            elems = table.find_all('td') # Python object\n            lst = [elem.text for elem in elems] # Option data as a readable list\n\n            # Rearrange data and create a pandas.DataFrame\n            arr = np.array(lst)\n            reshaped = arr.reshape((len(lst)/16, 16))\n            new_df = pd.DataFrame(reshaped)\n            frames = [old_df, new_df]\n            old_df = pd.concat(frames)\n            rows_nb = old_df.shape[0]\n\n            # Increment loop counter\n            if rows_nb > old_rows_nb:\n                loop+=1\n                old_rows_nb = rows_nb\n            elif rows_nb == old_rows_nb:\n                print('Problem while catching data.\\n## You must try again. ##')\n                pass\n            else:   # Case where rows have been deleted\n                    # which shall never occur\n                print('Failure!\\n## You must try again. ##')\n                pass\n\n        # Name the column 'Strike'\n        old_df.rename(columns={old_df.columns[8]:'Strike'}, inplace=True)\n\n        ## Split into 2 dataframes (1 for calls and 1 for puts)\n        calls = old_df.ix[:,1:7]\n        puts = old_df.ix[:,10:16] # Slicing is not incluse of the last column\n\n        # Set 'Strike' column as dataframe index\n        calls = calls.set_index(old_df['Strike'])\n        puts = puts.set_index(old_df['Strike'])\n\n        ## Headers names\n        headers = ['Last', 'Chg', 'Bid', 'Ask', 'Vol', 'OI']\n        calls.columns = headers\n        puts.columns = headers\n\n        return calls, puts\n\nif __name__ == '__main__':\n    # Get data for Dec-15 SPX options, Dec-15 being the 2nd nearby options = NasdaqOptions('SPX',2)\n    calls, puts = options.get_options_table()\n\n    # Write on the screen\n    print('\\n######\\nCalls:\\n######\\n', calls,\\\n        '\\n\\n######\\nPuts:\\n######\\n', puts)\n\n'''\n######\nCalls:\n######\n           Last    Chg Bid Ask    Vol      OI\nStrike                                      \n1900    179.40                     0   38292\n1905    103.75                     0    9693\n1910    191.30                     0    8378\n1915    186.45  -1.97              0    3671\n1920    173.95                     0    7218\n1925    181.51   6.38              1   23678\n1930    170.90   5.30             10   15743\n1935    160.37                     0   17814\n1940    152.30                     0   10564\n1945     88.82                     0   10687\n1950    149.73                     0   66844\n1955    124.81                     0   11206\n1960    120.60                     0   10682\n1965    123.60                     0   10737\n1970    143.00   5.50            789   15184\n1975    136.48   3.70              1   25654\n1980    129.15   0.01             41   12569\n1985    127.90  12.45              3   15602\n1990     98.86                     0    7900\n1995     98.25                     0   10133\n2000    114.40   1.30             31  116981\n2005    103.20   3.90              3   15097\n2010     98.45  -4.07              2    8119\n2015     94.33  12.83              2    7058\n2020     86.40                     0   17249\n2025     90.50  -1.35             20   59959\n2030     89.65   3.35             99    3303\n2035     80.45   1.55              1    2979\n2040     77.10  -1.55             13    5517\n2045     74.25   0.15             15    3768\n...        ...    ...  ..  ..    ...     ...\n2115     28.75   1.45            136    6475\n2120     26.12   1.42             64    5201\n2125     23.90   1.40            154   28130\n2130     21.27   1.67          10077    1647\n2135     19.65   2.25             82   13484\n2140     17.50   1.54            218    5150\n2145     14.80   1.10             85    3644\n2150     13.01   1.16           2073   55095\n2155     11.23   0.98             71    1543\n2160      9.90   1.05             70   10684\n2165      8.60   1.05             14    1124\n2170      7.23   0.52             28    2911\n2175      6.30   0.77            166   22039\n2180      5.30   0.70             74    5608\n2185      4.55   0.65              8     524\n2190      3.80   0.50             47    2154\n2195      3.10   0.30             25    3563\n2200      3.00   0.70           1815   63117\n2205      2.15   0.13             32     429\n2210      2.05   0.40             33   12771\n2215      1.35                     0     129\n2220      1.50   0.40              5    2807\n2225      1.10   0.09             61   18367\n2230      0.90   0.05             25     187\n2235      1.10   0.41              7      81\n2240      0.70                     0     444\n2245      0.60                     0    1060\n2250      0.70   0.10           4058   42602\n2275      0.35                     0   37307\n2300      0.30   0.05           9004   91173\n\n[73 rows x 6 columns] \n\n######\nPuts:\n######\n           Last      Chg Bid Ask   Vol      OI\nStrike                                       \n1900      5.80    -0.16          3135  115697\n1905      5.95    -0.90             1    9772\n1910      5.70    -0.75             1    8667\n1915      6.90     0.41            13    4304\n1920      6.70    -0.20          1146    9707\n1925      7.02    -1.18           271   50314\n1930      7.40     0.10            61   21183\n1935      7.85                      0   16832\n1940      8.25    -0.05            19   12021\n1945      8.35    -0.05             4   20285\n1950      9.05     0.17          5308  115872\n1955      9.28     0.06             8   11626\n1960      9.55    -0.08          5051   16218\n1965     10.13     0.11             9   11052\n1970     10.50    -0.10           115   16865\n1975     10.80    -0.33           218   35755\n1980     11.35    -0.35            13   15200\n1985     12.05    -1.81             3   16854\n1990     12.80     0.01            67    8195\n1995     13.59     0.19            14   10430\n2000     14.00    -1.00          5473  142800\n2005     14.13    -0.63            20   16162\n2010     14.96    -0.76             4   11485\n2015     16.46    -0.32             1    7123\n2020     16.55    -0.75           144   21422\n2025     17.84    -0.06            88   47092\n2030     18.17    -0.88           166    7872\n2035     21.55                     16    2749\n2040     20.02    -0.62           106    5465\n2045     21.33    -0.32            20    4603\n...        ...      ...  ..  ..   ...     ...\n2115     51.10                      0      10\n2120     47.10    -0.40             6     147\n2125     48.40    -1.15            19    5128\n2130     50.00   -14.01           132      37\n2135     54.50                      0       1\n2140     57.84                      0      44\n2145     64.35    -0.60            10      15\n2150     63.16     0.51             5    9430\n2155                                0        \n2160     68.02  -142.03            40       1\n2165                                0        \n2170     79.50   -14.30             4       2\n2175     98.90                      0     153\n2180                                0        \n2185                                0        \n2190                                0        \n2195    112.28                      0       8\n2200    101.90    -5.30             1    5498\n2205                                0        \n2210                                0        \n2215    208.50                      0       5\n2220    245.20                      0       1\n2225    247.66                      0      84\n2230    209.50                      0      42\n2235                                0        \n2240    253.95                      0       4\n2245                                0        \n2250    182.85                      0     354\n2275    205.80                      0     796\n2300    230.70                      0    2562\n\n[73 rows x 6 columns]\n'''\n```"]