["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n# extract forecast info\nforecast.helper <- function(fit, h=10, level = c(80,95)) {\n\tout = try(forecast(fit, h=h, level=level), silent=TRUE)\n\tif (class(out)[1] != 'try-error') {\n\t\tout = data.frame(out)\n\t} else {\n\t\ttemp = data.frame(predict(fit, n.ahead=h, doplot=F))\n\t\t\tpred = temp[,1]\n\t\t\tse = temp[,2]\n\t\tqq = qnorm(0.5 * (1 + level/100))\n\t\tout = matrix(NA, nr=h, nc=1+2*len(qq))\n\t\t\tout[,1] = pred\n\t\tfor(i in 1:len(qq))\n\t\t\tout[,(2*i):(2*i+1)] = c(pred - qq[i] * se, pred + qq[i] * se)\n\t\tcolnames(out) = c('Point.Forecast', matrix(c(paste('Lo', level, sep='.'), paste('Hi', level, sep='.')), nr=2, byrow=T))\n\t\tout = data.frame(out)\n\t}\t\n\treturn(out)\n}\n\n# compute future dates for the forecast\nforecast2xts <- function(data, forecast) {\n\t# length of the forecast\n\th = nrow(forecast)\n\tdates = as.Date(index(data))\n\n\tnew.dates = seq(last(dates)+1, last(dates) + 2*365, by='day')\n\trm.index = date.dayofweek(new.dates) == 6 | date.dayofweek(new.dates) == 0\n \tnew.dates = new.dates[!rm.index]\n\n \tnew.dates = new.dates[1:h] \t\n \treturn(make.xts(forecast, new.dates))\n}\n\n# create forecast plot\nforecast.plot <- function(data, forecast, ...) {\n\tout = forecast2xts(data, forecast)\n\n \t# create plot\n \tplota(c(data, out[,1]*NA), type='l', \n \t\t\tylim = range(data,out,na.rm=T), ...) \t\t\n\n \t# highligh sections\n\tnew.dates = index(out)\n\t\ttemp = coredata(out)\n\n\tn = (ncol(out) %/% 2)\n\tfor(i in n : 1) {\n\t\tpolygon(c(new.dates,rev(new.dates)), \n\t\t\tc(temp[,(2*i)], rev(temp[,(2*i+1)])), \n\t\tborder=NA, col=col.add.alpha(i+2,150))\n\t}\n\n\tplota.lines(out[,1], col='red')\n\n\tlabels = c('Data,Forecast', paste(gsub('Lo.', '', colnames(out)[2*(1:n)]), '%', sep=''))\n\tplota.legend(labels, fill = c('black,red',col.add.alpha((1:n)+2, 150)))\t\t\t\n}\n\n```", "```\n\n\t#*****************************************************************\n\t# Create models\n\t#****************************************************************** \n\tload.packages('forecast,fGarch,fArma')\n\n\tsample = last(data$prices$SPY, 200)\t\n\tts.sample = ts(sample, frequency = 12)\n\n\tmodels = list(\n\t\t# fGarch\t\t\n\t\tgarch = garchFit(~arma(1,15)+garch(1,1), data=sample, trace=F),\n\t\t# fArma\n\t\tarima = armaFit(~ arima(1, 1, 15), data=ts.sample),\n\n\t\t# forecast\n\t\tarma = Arima(ts.sample, c(1,0,1)),\n\t\tarfima = arfima(ts.sample),\n\t\tauto.arima = auto.arima(ts.sample),\n\n\t\tbats = bats(ts.sample),\n\t\tHoltWinters = HoltWinters(ts.sample),\n\t\tnaive = Arima(ts.sample, c(0,1,0))\n\t)\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \t\t\t\t\t\t\n\t# 30 day forecast with 80% and 95% confidence bands\n\t\tlayout(matrix(1:9,nr=3))\n\t\tfor(i in 1:len(models)) {\n\t\t\tout = forecast.helper(models[[i]], 30, level = c(80,95))\t \t\n\t\t\tforecast.plot(sample, out, main = names(models)[i]) \t\n\t\t}\t\n\n\t# 30 day forecast with 75%,85%,95%,97%, and 99% confidence bands\n\t\tlayout(matrix(1:9,nr=3))\n\t\tfor(i in 1:len(models)) {\n\t\t\tout = forecast.helper(models[[i]], 30, level = c(75,85,95,97,99))\t \t\n\t\t\tforecast.plot(sample, out, main = names(models)[i]) \t\n\t\t}\t\n\n```"]