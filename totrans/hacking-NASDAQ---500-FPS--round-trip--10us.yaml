- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-13 00:06:00'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月13日 00:06:00
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: round trip -10us'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以 500 FPS 黑客方式攻击纳斯达克：往返时间-10微秒
- en: 来源：[http://hackingnasdaq.blogspot.com/2010/01/round-trip-10us.html#0001-01-01](http://hackingnasdaq.blogspot.com/2010/01/round-trip-10us.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2010/01/round-trip-10us.html#0001-01-01](http://hackingnasdaq.blogspot.com/2010/01/round-trip-10us.html#0001-01-01)
- en: As we found in the previous post our hypothesis is, most of the latency is in
    the switch from softirq/tasklet to the callee context aka a scheduler problem.
    So if this is correct, a polling recv instead of blocking should give  nice speedups,
    with of course higher cpu usage, meaning your HVAC and power bill goes up.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在之前的帖子中发现的，我们的假设是，大部分延迟是在软中断/任务let 到调用者上下文的切换，也就是调度程序的问题。因此，如果正确，相对于阻塞接收来说，轮询接收应该可以带来很好的加速，当然会有更高的
    CPU 使用率，这意味着您的 HVAC 和电费会增加。
- en: '[![](img/cf65e6199b5f71afa7a376a5215af31a.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgDRZwFEbVIp5W4uVUKuQTbv1AXdS1QkAkb0EJ_9um-fPOfphbnJgwqkWzHmTVgujTcxFWGvAtpFzo28kmbSYFTA4dWtplgYpMQvJUQcIcGMnTQfbugnP7E1y7-kJXKq5dgpZdJKUes9A/s1600-h/tcp_round_default.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/cf65e6199b5f71afa7a376a5215af31a.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgDRZwFEbVIp5W4uVUKuQTbv1AXdS1QkAkb0EJ_9um-fPOfphbnJgwqkWzHmTVgujTcxFWGvAtpFzo28kmbSYFTA4dWtplgYpMQvJUQcIcGMnTQfbugnP7E1y7-kJXKq5dgpZdJKUes9A/s1600-h/tcp_round_default.png)'
- en: TCP 128B A->B->A round trip latency. blocking recv() x2
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 128B A->B->A 的往返延迟时间。阻塞 recv() x2
- en: TCP 128B A->B-A round trip latency. polling recv() x2
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 128B 从 A 到 B 再到 A 的往返延迟时间。轮询 recv() x2
- en: '... and wow, what a difference with just a few lines of code! and confirms
    we need to hack on the linux scheduler. Final speedup being  around 10,000ns+
    so 5,000ns on each side (A recv, B recv) with a very nice, small stddev - woot.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '... 并且哇，就只需要几行代码就可以有很大的差别！并且确认我们需要黑客入侵 linux 调度程序。最终加速约为 10,000ns+ 因此每边 5,000ns（A
    接收，B 接收）具有非常不错的小标准偏差-喔耶。'
- en: The conventional wisdom is "polling is bad" translating to bad programmer, where
    your meant to do something fancy/smart as the latency is small. If small means
    100us, its a reasonable assumption however 100us isnt small in HFT. Thus for low
    latency environments,  where we are counting nanoseconds, and theres more cycles/core
    than you can shake a stick at, you really should be using non-blocking, polling
    socket loops. Maybe ditch traditional interrupt based device drivers too  :)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 俗话说“轮询是不好的”，会被视为坏程序员，而实际上您应该进行花哨/聪明的操作，因为延迟很小。如果小到100微秒，这是一个合理的假设，但在高频交易中100微秒并不小。因此，在低延迟环境中，我们要计算纳秒，而且每个核心的周期都不会太小，你应该使用非阻塞轮询套接字循环。也许也应该放弃传统的基于中断的设备驱动程序 
    :)
- en: '... or hack on the kernel scheduler lol'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '... 或者在内核调度程序上进行黑客攻击 哈哈'
