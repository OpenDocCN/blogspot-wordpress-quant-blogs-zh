- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:03:50'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Magmasystems Blog: Of Pipes, CEP, and Traders'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://magmasystems.blogspot.com/2008/02/of-pipes-cep-and-traders.html#0001-01-01](http://magmasystems.blogspot.com/2008/02/of-pipes-cep-and-traders.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In our Complex Event Processing system, we will eventually want to be able to
    give a front-end to our traders which will let the trader develop ad-
  prefs: []
  type: TYPE_NORMAL
- en: hoc
  prefs: []
  type: TYPE_NORMAL
- en: streaming queries on real-time streams. We also want to allow the traders to
    implement their own analytics by doing back-testing on several years’ worth of
    data.
  prefs: []
  type: TYPE_NORMAL
- en: I have been looking at Yahoo Pipes a bit recently, and it is conceptually the
    same thing as the kind of GUI that I have been envisioning for the traders. In
    Yahoo Pipes, you can take the output of one or more high-level objects and pipe
    it into the inputs of another high-level object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a Yahoo Pipes gadget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/6a98f1f1cf2abe9282d57092f19bbe08.png)](http://3.bp.blogspot.com/_BNP90JOg4yU/R8Al0Pk0_KI/AAAAAAAAACg/XTmXTh0KN2A/s1600-h/Yahoo+Pipes.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: In our simple use case, let’s say that we define high-level objects that are
    of interest to traders. Such objects could be
  prefs: []
  type: TYPE_NORMAL
- en: a real-time market data stream,
  prefs: []
  type: TYPE_NORMAL
- en: a historical market data stream,
  prefs: []
  type: TYPE_NORMAL
- en: a real time order flow stream and cache,
  prefs: []
  type: TYPE_NORMAL
- en: a historical order flow stream,
  prefs: []
  type: TYPE_NORMAL
- en: a ticker-to-sector mapper and filter, and
  prefs: []
  type: TYPE_NORMAL
- en: some calculation modules.
  prefs: []
  type: TYPE_NORMAL
- en: These are the kinds of “queries” that we built in the Complex Event Processing
    engines (
  prefs: []
  type: TYPE_NORMAL
- en: Streambase
  prefs: []
  type: TYPE_NORMAL
- en: ', Coral8,'
  prefs: []
  type: TYPE_NORMAL
- en: Aleri
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: NEsper
  prefs: []
  type: TYPE_NORMAL
- en: ) during our evaluation process. However, just like Domain-Specific Languages
    (
  prefs: []
  type: TYPE_NORMAL
- en: DSL
  prefs: []
  type: TYPE_NORMAL
- en: ) can be created to make developing applications in a certain domain easier,
    we can make a domain-specific version of Yahoo Pipes that is geared for analyzing
    Equities data.
  prefs: []
  type: TYPE_NORMAL
- en: Once the trader has put together his Pipes, the result can be translated into
    one of the languages that the
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine supports. If we encapsulate the code generation module, then we can have
    code generators for Coral8,
  prefs: []
  type: TYPE_NORMAL
- en: Streambase
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: Aleri
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: NEsper
  prefs: []
  type: TYPE_NORMAL
- en: ', and others. I am pretty sure that all of these engines allow you to dynamically
    register and'
  prefs: []
  type: TYPE_NORMAL
- en: unregister
  prefs: []
  type: TYPE_NORMAL
- en: queries. You can dynamically read the status and output of the
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine and feed it back into the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Aleri
  prefs: []
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: Streambase
  prefs: []
  type: TYPE_NORMAL
- en: have GUI builders for their developers that look a lot like Yahoo Pipes. However,
    the
  prefs: []
  type: TYPE_NORMAL
- en: GUIs
  prefs: []
  type: TYPE_NORMAL
- en: are not packaged as
  prefs: []
  type: TYPE_NORMAL
- en: toolkits
  prefs: []
  type: TYPE_NORMAL
- en: ; in other words, you could not take the
  prefs: []
  type: TYPE_NORMAL
- en: Streambase
  prefs: []
  type: TYPE_NORMAL
- en: GUI and adapt it for your own needs. Coral8 does not really have a fancy GUI
    builder; as mentioned here before, their GUI is fairly spartan.
  prefs: []
  type: TYPE_NORMAL
- en: NEsper
  prefs: []
  type: TYPE_NORMAL
- en: /
  prefs: []
  type: TYPE_NORMAL
- en: Esper
  prefs: []
  type: TYPE_NORMAL
- en: does not have any kind of GUI to speak of, as their model of embedding the engine
    inside of an application is different that the model used by the other vendors.
  prefs: []
  type: TYPE_NORMAL
- en: ©2008 Marc Adler - All Rights Reserved
  prefs: []
  type: TYPE_NORMAL
