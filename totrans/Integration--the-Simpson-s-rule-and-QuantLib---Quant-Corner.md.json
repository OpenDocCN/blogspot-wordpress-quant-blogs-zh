["```\n#include<ql\\quantlib.hpp>\n#include <boost/math/distributions.hpp>\n#include<math.h>\n\nusing namespace QuantLib;\n\nReal callOptionFunction(\n\tReal underlying,\n\tReal strike,\n\tRate riskFreeInterestRate,\n\tVolatility volatility,\n\tTime tau,\n\tReal x){\n\t\tReal mean = log(underlying) + (riskFreeInterestRate\n\t\t\t- 0.5 * volatility * volatility) * tau ;\n\n\t\tReal standardDeviation = volatility * sqrt(tau);\n\n\t\tboost::math::lognormal_distribution<>d(mean, standardDeviation);\n\t\treturn (x - strike) * pdf(d,x) * exp (-riskFreeInterestRate * tau);\n}\n\nint main(int, char*[]){\n\n\t//option parameters\n\tReal underlying = 30;\n\tReal strike = 36;\n\tRate riskFreeInterestRate = 0.06;\n\tTime tau = 0.5; // 0,5 year\n\tVolatility volatility = 0.20;\n\n\t//Integration parameters : absolute accuracy\n\t//and maximum number of evaluations\n\tReal absoluteAccuracy = 1e-4;\n\tSize maxEvaluations = 1e3;\n\n\tboost::function<Real(Real)> ptrF;\n\tptrF = boost::bind(\n\t\t&callOptionFunction,\n\t\tunderlying,\n\t\tstrike,\n\t\triskFreeInterestRate,\n\t\tvolatility,\n\t\ttau,\n\t\t_1);\n\n\tSimpsonIntegral numInt(\n\t\tabsoluteAccuracy,\n\t\tmaxEvaluations);\n\n\tstd::cout << \"Call option value : \" << numInt(\n\t\tptrF,\n\t\tstrike,/*lower limit a*/\n\t\t10*strike)/*upper limit b*/ << std::endl;\n\n\treturn 0;\n}\n```"]