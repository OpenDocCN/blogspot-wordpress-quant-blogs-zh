- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-17 23:27:39'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: The Collocating Local Volatility Model – HPC-QuantLib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://hpcquantlib.wordpress.com/2016/09/11/the-collocating-local-volatility-model/#0001-01-01](https://hpcquantlib.wordpress.com/2016/09/11/the-collocating-local-volatility-model/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In a recent paper [1] Lech Grzelak has introduced his Collocating Local Volatility
    Model (CLV). This model utilises the so called collocation method [2] to map the
    cumulative distribution function of an arbitrary kernel process onto the true
    cumulative distribution function (CDF) extracted from option market quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting point for the collocating local volatility model is the market implied
    CDF of an underlying ![S_t](img/1d564057c93bc399876bcac34123a321.png) at time
    ![t_i](img/47514cfd3eec7658c4bd9fa21c2063d0.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![F_{S(t_i)}(x) = 1 + e^{r t_i}\frac{\partial V_{call}(t_0, t_i, K)}{\partial
    K}\mid_{K=x} = e^{r t_i}\frac{\partial V_{put}(t_0, t_i, K)}{\partial K}\mid_{K=x}](img/595ee46a569d233ac1da3d27a91b3a77.png)'
  prefs: []
  type: TYPE_IMG
- en: The prices can also be given by another calibrated pricing model, e.g. the Heston
    model or the SABR model. To increase numerical stability it is best to use OTM
    calls and puts.
  prefs: []
  type: TYPE_NORMAL
- en: The dynamics of the spot process ![S_t](img/1d564057c93bc399876bcac34123a321.png)
    should be given by some stochastic process ![X_t](img/bac49ad8e6c0a4d679f98639122d578f.png)
    and a deterministic mapping function ![g(t, x)](img/3f1bc1c27f83ae5b847f8485a3814727.png)
    such that
  prefs: []
  type: TYPE_NORMAL
- en: '![S_t=g(t, X_t) ](img/6f3ce2d0369c41f0c254a6f7d3c51739.png)'
  prefs: []
  type: TYPE_IMG
- en: The mapping function ![g(t, x)](img/3f1bc1c27f83ae5b847f8485a3814727.png) ensures
    that the terminal distribution of ![S_t](img/1d564057c93bc399876bcac34123a321.png)
    given by the CLV model matches the market implied CDF. The model then reads
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rcl} S_t &=& g(t,X_t)  \nonumber \\ dX_t &=& \mu(X_t)dt + \sigma(X_t)dW_t\nonumber
    \end{array}](img/be97cd57200ff5abef0e7fb870f5a1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: The choice of the stochastic process ![X_t](img/bac49ad8e6c0a4d679f98639122d578f.png)
    does not influence the model prices of vanilla European options – they are given
    by the market implied terminal CDF – but influences the dynamics of the forward
    volatility skew generated by the model and therefore the prices of more exotic
    options. It is also preferable to choose an analytical trackable process ![X_t](img/bac49ad8e6c0a4d679f98639122d578f.png)
    to reduce the computational efforts.
  prefs: []
  type: TYPE_NORMAL
- en: The collocation methods outlined in [2] defines an efficient algorithm to approximate
    the mapping function ![g(t, x)](img/3f1bc1c27f83ae5b847f8485a3814727.png) based
    on a set of collocation points ![x_{i,j}=x_j(T_i)](img/21d93d66d13592299edd86066918d8c0.png)
    for a given set of maturities ![T_i, i=1,...,m](img/a0a980c52556423df9d70abdfe05361d.png)
    and ![j=1,...,n](img/e5b30c05a440ec0f5bec2b027132bd79.png) interpolation points
    per maturity ![T_i](img/0b14d2773a21390d36e26cac3575a150.png). Let ![F_{S_{T_i}}(s)](img/4d6738ee49a1daba8678bf77d83d5f75.png)
    be the market implied CDF for a given expiry ![T_i](img/0b14d2773a21390d36e26cac3575a150.png).
    Then we get
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rcl}  F_{X_{T_i}}\left(x_{i,j}\right) &=& F_{S_{T_i}}\left(g(T_i,
    x_{i,j})\right) = F_{S_{T_i}}  \left(s_{i,j}\right) \nonumber \\ \Rightarrow s_{i,j}&=&F^{-1}_{S_{T_i}}\left(F_{X_{T_i}}(x_{i,j})\right)
    \nonumber \end{array}](img/539dfc0861e96986d2bf995f020e4a11.png)'
  prefs: []
  type: TYPE_IMG
- en: for the collocation points with ![s_{i,j}=g(T_i, x_{i,j})](img/09d7beec79c7a2c2313028872113982b.png).
  prefs: []
  type: TYPE_NORMAL
- en: The optimal collocation points are given by the abscissas of the Gaussian quadrature
    for the terminal distribution of ![X_{T_i}](img/be440dd146826fc96b85170fe4e13c1b.png).
    The simplest choice is a normally distribute kernel process ![X_t](img/bac49ad8e6c0a4d679f98639122d578f.png)
    like the Ornstein-Uhlenbeck process
  prefs: []
  type: TYPE_NORMAL
- en: '![dX_t = \kappa(\theta-X_t)dt + \sigma dW_t](img/e371c8c036fe11e44853873101b1daeb.png).'
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding collocation points of the Normal-CLV model are then given
    by
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rcl} x_j(t) &=& \mathbb{E}\left[X_t\right] + \sqrt{\mathbb{V}ar\left[X_t\right]}
    x_j^{\mathcal{N}(0,1)}  \nonumber \\ &=& \theta + \left(X_0 - \theta)e^{-\kappa
    t}\right) + \sqrt{\frac{\sigma^2}{2\kappa}\left(1-e^{-2\kappa t}\right)} x_j^{\mathcal{N}(0,1)},
    \ j=1,...,n\end{array}](img/a06b465580b3b248792efa2389ca3ff8.png)'
  prefs: []
  type: TYPE_IMG
- en: in which the collocation points ![x_j^{\mathcal{N}(0,1)}](img/8ef60cf059939554d792608da9ed01da.png)
    of the standard normal distribution can be calculated by QuantLib’s Gauss-Hermite
    quadrature implementation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Lagrange polynomials [3] are an efficient interpolation scheme to interpolate
    the mapping function ![g(t, x)](img/3f1bc1c27f83ae5b847f8485a3814727.png) between
    the collocation points
  prefs: []
  type: TYPE_NORMAL
- en: '![g(t, X_t) = \sum_{j=1}^N s_j (t)\prod_{k=1, j\neq k}^N \frac{X(t)-x_j(t)}{x_k(t)-x_j(t)}](img/5c7c4c35cf602167cc3c158501a42079.png)'
  prefs: []
  type: TYPE_IMG
- en: Strictly speaking Lagrange polynomials do not preserve monotonicity and one
    could also use monotonic interpolation schemes supported by QuantLib’s spline
    interpolation routines. As outlined in [2] this method can also be used to approximate
    the inverse CDF of an “expensive” distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Calibration of the Normal-CLV model to market prices is therefore pretty fast
    and straight forward as it takes the calibration of ![g(t, x_t)](img/6f25e33438698975fc801f70334b69ef.png).
  prefs: []
  type: TYPE_NORMAL
- en: Monte-Carlo pricing means simulating the trackable process ![X_t](img/bac49ad8e6c0a4d679f98639122d578f.png)
    and evaluate the  Lagrange polynomial if the value of the spot process ![S_t](img/1d564057c93bc399876bcac34123a321.png)
    is needed. Pricing via partial differential equation involves the one dimensinal
    PDE
  prefs: []
  type: TYPE_NORMAL
- en: '![\frac{\partial V}{\partial t} + \mu(x)\frac{\partial V}{\partial x} + \frac{1}{2}\sigma^2(x)\frac{\partial^2
    V}{\partial x^2}-rV = 0](img/b661d6810fc338425b8833f9242f9cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: with the terminal condition at maturity time ![T](img/6866d563ac5ae988f9a62db320fd2827.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![V(T, x_T) = \text{Payoff}\left(S_T=g(T,x_T)\right) ](img/605db840410df2fc8e9e04438cf63047.png)'
  prefs: []
  type: TYPE_IMG
- en: For plain vanilla options the upper and lower boundary condition is
  prefs: []
  type: TYPE_NORMAL
- en: '![\frac{\partial^2 V}{\partial x^2} = 0 \ \ \forall x\in\left\{x_{min},x_{max}\right\}](img/9a48225d6728b0fb0b2882a2bda1fe87.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Example 1: Pricing error for plain vanilla options**'
  prefs: []
  type: TYPE_NORMAL
- en: Market prices are given by the Black-Scholes-Merton model with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![S_0=100, r=0.1, q=0.04, \sigma=0.25](img/e2c0d9b1310cc3679696b6e03ffcb6e6.png).'
  prefs: []
  type: TYPE_NORMAL
- en: Normal-CLV process parameters are given by
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![\kappa=1.0, \theta=0.1,\sigma=0.5,x_0=0.1](img/d7fa7ffc371d4163ebde8d5c55e14fa3.png)'
  prefs: []
  type: TYPE_IMG
- en: Ten collocation points are used to define the mapping function ![g(t, x)](img/3f1bc1c27f83ae5b847f8485a3814727.png)
    and the time to maturity is one year. The diagram below shows the deviation of
    the implied volatility of the Normal-CLV price based on the PDE solution from
    the true value of 25%
  prefs: []
  type: TYPE_NORMAL
- en: '![clvpriceerror](img/3cdfdb69e18b377969a2c8410b5bf119.png)'
  prefs: []
  type: TYPE_IMG
- en: Even ten collocation points are already enough to obtain a very small pricing
    error. The advice in [2] to stretch the collocation grid has turned out to be
    very efficient if the number of collocation points gets larger.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 2: Forward volatility skew**'
  prefs: []
  type: TYPE_NORMAL
- en: Market prices are given by the Heston model with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![S_0=100, r=0.1, q=0.05, \nu_o=0.09, \kappa=1.0, \theta=0.06, \sigma=0.4,
    \rho=-0.75](img/8876640de7835a850a82d605d0a762cb.png).'
  prefs: []
  type: TYPE_NORMAL
- en: Normal-CLV process parameters are given by
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![\kappa=-0.075, \theta=0.05,\sigma=0.25,x_0=0.05](img/3c8b368d814578cb96fefe0cc0bcd1b2.png)'
  prefs: []
  type: TYPE_IMG
- en: The diagram below shows the implied volatility of an forward starting European
    option with moneyness varying from 0.5 to 2 and maturity date six month after
    the reset date.
  prefs: []
  type: TYPE_NORMAL
- en: '![hestonforward](img/5bd33622c388bc6a9b4a6ae653c0b21d.png)'
  prefs: []
  type: TYPE_IMG
- en: The shape of the forward volatility surface of the Normal-CLV model shares important
    similarities with the surfaces of the more complex Heston or Heston Stochastic
    Local Volatility (Heston-SLV) model with large mixing angles ![\eta](img/3d744e5faf1efbb1fd86f7d17ef67fec.png).
    But by the very nature of the Normal-CLV model, the forward volatility does not
    depend on the values of ![\theta, \sigma](img/227715ad1271e4ab2f943f3443755d65.png)
    or ![x_0](img/c9da0cd5b4ab1e2b208ec1c4a20c8c1b.png), which limits the variety
    of different forward skew dynamics this model can create. CLV models with non-normal
    kernel processes will support a greater variety.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 3: Pricing of Double-no-Touch options**'
  prefs: []
  type: TYPE_NORMAL
- en: Market prices are given by the Heston model with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![S_0=100, r=0.02, q=0.01, \nu_o=0.09, \kappa=1.0, \theta=0.06, \sigma=0.8\rho=-0.8](img/170416200f7ee08985d9894c3f2baf33.png).'
  prefs: []
  type: TYPE_NORMAL
- en: Normal-CLV process parameters are given by different ![\kappa](img/c4a59d75f76dfbea9fda1b0ae27cb387.png)
    values and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![\theta=100,\sigma=0.15,x_0=100.0](img/1ec5425f0ca67558b998f00f4b1e82e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Unsurprisingly the prices of 1Y Double-no-Touch options exhibit similar patterns
    with the Normal-CLV model and the Heston-SLV model as shown below in the “Moustache”
    graph. But the computational efforts using the Normal-CLV model are much smaller
    than the efforts for calibrating and solving the Heston-SLV model.
  prefs: []
  type: TYPE_NORMAL
- en: '![moustache.png](img/25f436dcca49fbeaadf9f7f729f59f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: The QuantLib implementation of the Normal-CLV model is available as a pull request
    [#117](https://github.com/lballabio/QuantLib/pull/117), the [Rcpp](https://cran.r-project.org/web/packages/Rcpp/index.html)
    based package [Rclv](http://hpc-quantlib.de/src/Rclv.tgz) contains the R interface
    to the QuantLib implementation and the demo code for all three examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[1] A. Grzelak, 2016, [The CLV Framework – A Fresh Look at Efficient Pricing
    with Smile](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2747541)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] L.A. Grzelak, J.A.S. Witteveen, M.Suárez-Taboada, C.W. Oosterlee,'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Stochastic Collocation Monte Carlo Sampler: Highly efficient sampling
    from “expensive” distributions](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2529691)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] J-P. Berrut, L.N. Trefethen,  [Barycentric Lagrange interpolation](https://people.maths.ox.ac.uk/trefethen/barycentric.pdf),
    SIAM Review, 46(3):501–517, 2004.'
  prefs: []
  type: TYPE_NORMAL
