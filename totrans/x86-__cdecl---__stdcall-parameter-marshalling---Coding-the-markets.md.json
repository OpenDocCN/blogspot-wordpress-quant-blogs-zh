["```\nbool cc_cdecl = true;                         // stdcall if false\nint parmBytes = ( parmCount - 1) * 4;         // parmCount includes ret val, so subtract 1\nint parmPop = ( cc_cdecl ? parmBytes : 0);    // number of bytes to pop off the stack after call\nvoid* rvInt = 0;                              // for receiving int or ptr return value\ndouble rvDbl = 0.0;                           // for a float return value from ST(0)\nint paddr = ( int)parms;                      // parms is void** array of parameters. Cast to int\n                                              // to prevent implicit ptr deref by asm\n```", "```\n// Then asm code to do a cdecl or stdcall dispatch and call xf.\n__asm {                      // push parms onto stack in reverse order\n        push eax             // save eax\n        mov eax, paddr       // point to start of parms\n        add eax, parmBytes   // point to last parm\n    pp: push [eax]           // stack a parm\n        sub eax, 4           // point to next parm\n        cmp eax, paddr       // have we hit the start yet?\n        jg pp                // if eax > parms goto pp\n        call xf              // invoke the function!\n        add esp, parmPop     // pop parms if cdecl\n        mov rvInt, eax       // int or ptr retvals are in eax\n        fst rvDbl            // float ret vals are in st0\n        pop eax              // restore eax\n }\n```"]