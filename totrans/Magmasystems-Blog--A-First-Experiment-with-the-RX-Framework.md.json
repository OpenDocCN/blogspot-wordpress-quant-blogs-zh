["```\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace RXStockGenerator\n{\n    class TestRX\n    {\n        public TestRX()\n        {\n            using (new StockPriceGenerator().Subscribe(q => Console.WriteLine(\"Quote: \" + q)))\n            {\n                Console.WriteLine(\"Press any key to unsubscribe\");\n                Console.ReadKey();\n            }\n        }\n    }\n\n    class StockPriceGenerator : IObservable<StockQuote>\n    {\n        private readonly Random m_random;\n\n        public StockPriceGenerator()\n        {\n            this.m_random = new Random();\n        }\n\n        public IDisposable Subscribe(IObserver<StockQuote> observer)\n        {\n            List<IObservable<StockQuote>> generators = new List<IObservable<StockQuote>>\n            {\n                this.Generate(\"AAPL\", 200.00, 100),\n                this.Generate(\"IBM\", 120.00, 150),\n                this.Generate(\"MSFT\", 30.00, 125),\n                this.Generate(\"GE\", 15.00, 175),\n            };\n\n            return generators.Merge().Subscribe(observer);\n        }\n\n        public IObservable<StockQuote> Generate(string symbol, double startPrice, int delay)\n        {\n            return Observable.Generate(\n                0,\n                i => i < 5,\n                _ => new StockQuote(symbol, startPrice + this.m_random.NextDouble()),\n                _ => TimeSpan.FromMilliseconds(delay),\n                i => i + 1);\n        }\n    }\n\n    class StockQuote\n    {\n        public string Symbol { get; set; }\n        public double Price { get; set; }\n\n        public StockQuote(string symbol, double price)\n        {\n            this.Symbol = symbol;\n            this.Price = price;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0}/{1:##.#0}\", this.Symbol, this.Price);\n        }\n    }\n}\n\n```"]