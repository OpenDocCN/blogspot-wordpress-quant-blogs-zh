- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 19:30:29'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: RethinkDB batch insert performance | Coding the markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://etrading.wordpress.com/2016/11/21/rethinkdb-batch-insert-performance/#0001-01-01](https://etrading.wordpress.com/2016/11/21/rethinkdb-batch-insert-performance/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: RethinkDB batch insert performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: November 21, 2016
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The forthcoming cloud version of SpreadServe uses a Tornado based server to
    persist a breakdown of all formulae used in a spreadsheet loaded by SpreadServe.
    For complex sheets I found that the insertion of many formulae in the formula
    table could be timeconsuming. In one test scenarion a multi-formula insert took
    5 minutes. So I checked out the RethinkDB’s [troubleshooting page](https://www.rethinkdb.com/docs/troubleshooting/)
    where there are some useful performance tips. Batch insertions with the recommended
    batch size of 200 brought the insert time down from 5 mins to 21 secs. Further
    improvements came from using soft durability and noreply, bringing the insert
    time down to ~3.5 secs. However, I found that my Tornado server couldn’t respond
    to incoming HTTP GETs while the insert coroutine was looping on the insert batches.
    I figured that noreply meant that the yield in the loop resumed immediately, without
    waiting for the reply IO from the DB. Taking out noreply allowed the single threaded
    server to handle HTTP GETs in the middle of an insert. If improved performance
    is necessary in future, splitting the Tornado server into two processes may be
    the way to go, but for current test scenarios performance is acceptable.
  prefs: []
  type: TYPE_NORMAL
