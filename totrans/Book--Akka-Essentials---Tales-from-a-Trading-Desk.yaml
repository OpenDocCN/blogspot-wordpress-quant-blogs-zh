- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 06:31:03'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Book: Akka Essentials | Tales from a Trading Desk'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mdavey.wordpress.com/2013/01/14/book-akka-essentials/#0001-01-01](https://mdavey.wordpress.com/2013/01/14/book-akka-essentials/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Book: Akka Essentials'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over the last few years the has been a renewed interested in the actor pattern. 
    In the Microsoft stack, both Microsoft and MSR have provide extensions to .NET
    to leverage the actor model.  Likewise, in the Java/Scala stack, [akka](http://akka.io/)
    and Typeseafe has gained some traction, with akka 2.1.0 recently release.  Within
    the financial version, the actor model is of considerable interested due to the
    complexity of the systems that are developed within both the sell-side and buy-side. 
    [Akka](http://www.amazon.co.uk/Akka-Essentials-Munish-Kumar-Gupta/dp/1849518289)
    [Essentials](http://www.packtpub.com/akka-java-applications-essentials/book) has
    therefore hit the shelves (for anyone who still buys a physical book) at the right
    time – especially if scroll down to the lower section of the akka home page, and
    view the list of “selection of production users” – UBS and Credit Suisse.
  prefs: []
  type: TYPE_NORMAL
- en: 'So to follow the historical format of book reviews used by this blog:'
  prefs: []
  type: TYPE_NORMAL
- en: Jonas Boner was a reviewed 🙂
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 10, “The JEE programming model of writing distributed applications is not
    the best fit for a scale-out application model”.  Classic statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 11, actor principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 30 and 46.  Java and Scale version of the same sample application.  Although
    Scala is in my view the preference for development, so of us have to live in the
    Java world during our day jobs.  Is Java the Cobol of the 21st Century?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 74.  Ability to swap and actors message loop functionality at run-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 90\. Supervisors strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 97.  Dispatchers via java.util.concurrent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 123.  Let it crash paradigm!  Its important to consider machine failure
    when deciding on supervision and monitoring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 171.  The age old money account transfer problem, but using STM’s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 248.  Typesafe Console.  If you haven’t fired up the console, read this
    chapter, and then think again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So to summaries, if you are looking to leverage akka in an up and coming projects,
    Akka Essentials is worth a read.  It should be noted that Akka 2.1.0 ([Coltrane](http://doc.akka.io/docs/akka/2.1.0/cluster/cluster-usage-java.html))
    provides experimental cluster support, which is key to building production ready
    Akka solutions, and thus isn’t covered in Akka Essentials.
  prefs: []
  type: TYPE_NORMAL
- en: ~ by mdavey on January 14, 2013.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Java](https://mdavey.wordpress.com/category/languages/java/)
  prefs: []
  type: TYPE_NORMAL
