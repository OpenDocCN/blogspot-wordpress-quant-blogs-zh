["```\n# get Japan yield data from the Ministry of\n# Finance Japan data goes back to 1974\n\nrequire(xts)\n# require(clickme)\nrequire(latticeExtra)\n\nurl <- \"http://www.mof.go.jp/english/jgbs/reference/interest_rate/\"\nfilenames <- paste(\"jgbcme\", c(\"\", \"_2010\", \"_2000-2009\", \n    \"_1990-1999\", \"_1980-1989\", \"_1974-1979\"), \".csv\", \n    sep = \"\")\n\n# load all data and combine into one jgb\n# data.frame\njgb <- read.csv(paste(url, filenames[1], sep = \"\"), \n    stringsAsFactors = FALSE)\nfor (i in 2:length(filenames)) {\n    jgb <- rbind(jgb, read.csv(paste(url, \"/historical/\", \n        filenames[i], sep = \"\"), stringsAsFactors = FALSE))\n}\n\n# now clean up the jgb data.frame to make a jgb\n# xts\njgb.xts <- as.xts(data.matrix(jgb[, 2:NCOL(jgb)]), \n    order.by = as.Date(jgb[, 1]))\ncolnames(jgb.xts) <- paste0(gsub(\"X\", \"JGB\", colnames(jgb.xts)), \n    \"Y\")\n\n# get Yen from the Fed\n# getSymbols('DEXJPUS',src='FRED')\n\nxtsMelt <- function(data) {\n    require(reshape2)\n\n    # translate xts to time series to json with date\n    # and data for this behavior will be more generic\n    # than the original data will not be transformed,\n    # so template.rmd will be changed to reflect\n\n    # convert to data frame\n    data.df <- data.frame(cbind(format(index(data), \n        \"%Y-%m-%d\"), coredata(data)))\n    colnames(data.df)[1] = \"date\"\n    data.melt <- melt(data.df, id.vars = 1, stringsAsFactors = FALSE)\n    colnames(data.melt) <- c(\"date\", \"indexname\", \"value\")\n    # remove periods from indexnames to prevent\n    # javascript confusion these . usually come from\n    # spaces in the colnames when melted\n    data.melt[, \"indexname\"] <- apply(matrix(data.melt[, \n        \"indexname\"]), 2, gsub, pattern = \"[.]\", replacement = \"\")\n    return(data.melt)\n    # return(df2json(na.omit(data.melt)))\n\n}\n\njgb.melt <- xtsMelt(jgb.xts[\"2012::\", ])\njgb.melt$date <- as.Date(jgb.melt$date)\njgb.melt$value <- as.numeric(jgb.melt$value)\njgb.melt$indexname <- factor(jgb.melt$indexname, levels = colnames(jgb.xts)) \n```", "```\np2 <- xyplot(value ~ date | indexname, data = jgb.melt, \n    type = \"l\", layout = c(length(unique(jgb.melt$indexname)), \n        1), panel = function(x, y, ...) {\n        panel.abline(h = c(min(y), max(y)))\n        panel.xyplot(x = x, y = y, ...)\n        panel.text(x = x[length(x)/2], y = max(y), \n            labels = levels(jgb.melt$indexname)[panel.number()], \n            cex = 0.7, pos = 3)\n    }, scales = list(x = list(tck = c(1, 0), alternating = 1), \n        y = list(tck = c(1, 0), lwd = c(0, 1))), strip = FALSE, \n    par.settings = list(axis.line = list(col = 0)), \n    xlab = NULL, ylab = \"Yield\", main = \"JGB Yields by Maturity Since Jan 2012\")\np2 + layer(panel.abline(h = pretty(jgb.melt$value), \n    lty = 3)) \n```", "```\np1 <- xyplot(value ~ date | indexname, data = jgb.melt, \n    type = \"l\")\np1 \n```", "```\n# add alpha to colors\naddalpha <- function(alpha = 180, cols) {\n    rgbcomp <- col2rgb(cols)\n    rgbcomp[4] <- alpha\n    return(rgb(rgbcomp[1], rgbcomp[2], rgbcomp[3], \n        rgbcomp[4], maxColorValue = 255))\n}\n\np3 <- xyplot(value ~ indexname, group = date, data = jgb.melt, \n    type = \"l\", lwd = 2, col = sapply(255/(as.numeric(Sys.Date() - \n        jgb.melt$date) + 1), FUN = addalpha, cols = brewer.pal(\"Blues\", \n        n = 9)[7]), main = \"JGB Yield Curve Evolution Since Jan 2012\")\n\nupdate(asTheEconomist(p3), scales = list(x = list(cex = 0.7))) + \n    layer(panel.text(x = length(levels(jgb.melt$indexname)), \n        y = 0.15, label = \"source: Japanese Ministry of Finance\", \n        col = \"gray70\", font = 3, cex = 0.8, adj = 1)) \n```"]