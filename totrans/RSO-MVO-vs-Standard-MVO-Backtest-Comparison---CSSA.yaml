- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 17:57:22'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: RSO MVO vs Standard MVO Backtest Comparison | CSSA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://cssanalytics.wordpress.com/2013/10/10/rso-mvo-vs-standard-mvo-backtest-comparison/#0001-01-01](https://cssanalytics.wordpress.com/2013/10/10/rso-mvo-vs-standard-mvo-backtest-comparison/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In a previous post I introduced [Random Subspace Optimization](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/
    "Random Subspace Optimization (RSO)") as a method to reduce dimensionality and
    improve performance versus standard optimization methods. The concept is theoretically
    sound and is  traditionally applied in machine learning to improve classification
    accuracy.  It makes sense that it would be useful for portfolio optimization.
     To test this method, I used a very naaive/simplistic RSO model where one selects
    “k” subspaces from the universe and running classic “[mean-variance](https://cssanalytics.wordpress.com/2013/10/03/mean-variance-optimization-and-statistical-theory/
    "Mean-Variance Optimization and Statistical Theory")” optimization (MVO) with
    “s” samples and averaging the portfolio weights found across all of the samples
    to produce a final portfolio. The MVO was run unconstrained (long and shorts permitted)
    to reduce computation time since there is a closed form solution.  Two datasets
    were used: the first is an 8 ETF universe used in previous studies for the [Minimum
    Correlation](https://cssanalytics.wordpress.com/2012/09/21/minimum-correlation-algorithm-paper-release/
    "Minimum Correlation ") and [Minimum Variance](https://cssanalytics.wordpress.com/2013/04/04/minimum-variance-algorithm-mva-test-drive/
    "Minimum Variance Algorithm (MVA) Test Drive") Algorithms, the second was using
    the S&P sector spyder ETFs. Here are the parameters and the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![rso comp](img/f9b92a64ac4befed5791819dcb6d4529.png)](https://cssanalytics.files.wordpress.com/2013/10/rso-comp.png)'
  prefs: []
  type: TYPE_NORMAL
- en: On these two universes, with this set of parameters, RSO mean-variance was a
    clear winner in terms of both returns and risk-adjusted returns– and the results
    are even more compelling when you factor the lower average exposure used as a
    function of averaging across 100 portfolios. Turnover is also more stable, which
    can be expected because of the averaging process. Results were best in these two
    cases when k<=3, but virtually all k outperformed the baseline. The choice of
    k is certainly a bit clunky (like in nearest neighbourhood analysis), and it needs
    to be either optimized or considered in relation to the number of assets in the
    universe. The averaging process across portfolios is also naaive, it doesn’t care
    whether the objective function is high or low for a given portfolio. There are
    a lot of ways to improve upon this baseline RSO version. I haven’t done extensive
    testing at this point, but theory and preliminary results suggest a modest improvement
    over baseline MVO (and other types) of optimizations. RSO is not per se a magic
    bullet, but in this case it appears better capable of handling noisy datasets
    at the very least- where matrix inversion used within typical unconstrained MVO
    can be unstable.
  prefs: []
  type: TYPE_NORMAL
