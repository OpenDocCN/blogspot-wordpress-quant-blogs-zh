- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 18:20:17'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Basic Anchored Oscillators | CSSA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://cssanalytics.wordpress.com/2010/08/02/basic-anchored-oscillators/#0001-01-01](https://cssanalytics.wordpress.com/2010/08/02/basic-anchored-oscillators/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To take a brief but related digression from the **Adaptive Time Machine**, I
    would like to discuss the importance of anchored versus rolling oscillators. Almost
    all conventional indicators are rolling–that is for example an rsi2 only looks
    at the current position of the market over the last two days without regard to
    what has happened before that. In relation to the different runs based entries
    and exits, it is not so obvious that a strategy such as entering on two days down
    and exiting on two days up could actually last for two weeks or more. This is
    because an up day that fails to follow through can occur numerous times prior
    to exit.  Furthermore, the entry stipulation of a down run of two days can also
    occur under similar circumstances. A down run could also occur after two very
    large down days, or perhaps two small down days. Clearly not all up or down runs
    are made equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact I would argue that one of the main reasons that traders sometimes “disagree”
    with what an indicator is saying is precisely for this same reason: often the
    current level fails to take into account what appears to be common sense to the
    trader. What we really want to do is to create an indicator “with a memory”  and
    also use different methods of normalization in order to avoid such situations.
    The Runs Oscillator [https://cssanalytics.wordpress.com/2010/07/26/runs-oscillator/](https://cssanalytics.wordpress.com/2010/07/26/runs-oscillator/)
    addressed the issue of normalizing run length, but being a rolling indicator,
    it fails to address some of the problems in the examples above.  Rolling indicators
    make life difficult for adaptive systems as well because we typically utilize
    some  performance selection criteria in order to identify the most favorable situations.
    If the comparable situation is not like past situations, then we may do better
    or worse than what was observed in the past. In a sense, this contributes to the
    noise involved with classification.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic anchored indicator will have both a trigger point as well as an exit
    point. Once a situation is triggered, we measure the distance traveled in terms
    of both time and price until an exit occurs. A simple example pertains to daily
    mean reversion as defined in this recent post by MarketSci: [http://marketsci.wordpress.com/2010/08/01/the-new-state-of-short-term-mean-reversion-july-2010/](http://marketsci.wordpress.com/2010/08/01/the-new-state-of-short-term-mean-reversion-july-2010/)
    as buying on down days and shorting on up days.  In this case for longs, the trigger
    would be one down day and the exit would be one up day. Once a trade was initiated
    (on one down day) we would measure the distance traveled since entry in % terms
    or atr, and also the days that have elapsed- in this case a down run- until an
    up day occurs (the exit).  This method of combined analysis that looks at magnitude
    (price) and stretch (time) underlies the DVI – which is also a rolling indicator.
    This is what makes the DVI so useful, but also- excepting the intentional smoothing-
    somewhat ineffective at identifying turning points. In this case, a complex anchored
    runs oscillator would consider also the distance travelled either during the trigger
    condition, following the trigger condition, the exit condition or all three. There
    is a lot in that last sentence to think about, in a subsequent post we will provide
    an example.'
  prefs: []
  type: TYPE_NORMAL
