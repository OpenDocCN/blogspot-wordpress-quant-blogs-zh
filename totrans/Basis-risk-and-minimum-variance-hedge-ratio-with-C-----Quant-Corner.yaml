- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 08:09:46'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Basis risk and minimum variance hedge ratio with C++ | Quant Corner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://quantcorner.wordpress.com/2011/03/04/basis-risk-and-minimum-variance-hedge-ratio-with-c/#0001-01-01](https://quantcorner.wordpress.com/2011/03/04/basis-risk-and-minimum-variance-hedge-ratio-with-c/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This time we leave **QuantLib** aside. We show that some basic financial calculations
    can be dealt with with C++.
  prefs: []
  type: TYPE_NORMAL
- en: 'We wish to write a piece of C++ code to calculate :'
  prefs: []
  type: TYPE_NORMAL
- en: – the **basis risk** of a portfolio made of 1 **spot** contract and a certain
    number of **futures** contracts
  prefs: []
  type: TYPE_NORMAL
- en: – and, we define another C++ function to compute the **minimum variance hedge**.
  prefs: []
  type: TYPE_NORMAL
- en: The **hedge ratio** (**h**) is the number of **futures** contracts one should
    use to hedge his exposure in the **spot market**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic risk** is the variance of the basis, the latter being the difference
    between the s**pot price** and the price of the **futures contract**.'
  prefs: []
  type: TYPE_NORMAL
- en: The **minimum variance hedge ratio** (**h***) is the hedge ratio that minimizes
    the basis risk.
  prefs: []
  type: TYPE_NORMAL
- en: The guy of [http://www.bionicturtle.com](http://www.bionicturtle.com/) explains
    all that nicely in a [video](http://www.youtube.com/watch?v=Bm54Lwd-27U) . And,
    what we do is writing the C++ code corresponding to the Excel spreadsheet in this
    video. Here is a similar [spreadsheet](https://quantcorner.wordpress.com/wp-content/uploads/2011/03/basis_risk_min_var_hedge.xlsx).
  prefs: []
  type: TYPE_NORMAL
- en: Below, we show our C++ code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
