["```\npackage com.mycompany;\n\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.jms.JmsComponent;\nimport org.apache.camel.impl.DefaultCamelContext;\nimport org.apache.commons.io.FileUtils;\nimport org.vertx.java.core.Handler;\nimport org.vertx.java.core.eventbus.EventBus;\nimport org.vertx.java.core.eventbus.Message;\nimport org.vertx.java.core.http.HttpServer;\nimport org.vertx.java.core.http.HttpServerRequest;\nimport org.vertx.java.core.http.RouteMatcher;\nimport org.vertx.java.core.json.JsonArray;\nimport org.vertx.java.core.json.JsonObject;\nimport org.vertx.java.platform.Verticle;\n\nimport javax.jms.*;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class CamelWebVerticle extends Verticle {\n    final ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"admin\", \"admin\", ActiveMQConnection.DEFAULT_BROKER_URL);\n\n    public void start() {\n        createCamelRouting();\n        createActiveMQConsumer();\n\n        final HttpServer httpServer = vertx.createHttpServer();\n        final RouteMatcher routeMatcher = createURLRouteMatcher();\n        httpServer.requestHandler(routeMatcher);\n\n        final JsonObject config = new JsonObject().putString(\"prefix\", \"/eventbus\");\n        final JsonArray inboundPermitted = new JsonArray();\n        inboundPermitted.add(new JsonObject().putString(\"address\", \"msg.client\"));\n\n        final JsonArray outboundPermitted = new JsonArray();\n        outboundPermitted.add(new JsonObject().putString(\"address\", \"msg.server\"));\n        outboundPermitted.add(new JsonObject().putString(\"address\", \"msg.client\"));\n\n        vertx.createSockJSServer(httpServer).bridge(config, inboundPermitted, outboundPermitted);\n        setupEventBusListener();\n\n        httpServer.listen(8888, \"localhost\");\n        container.logger().info(\"Webserver started, listening on port: 8888\");\n        container.logger().info(\"Verticle started\");\n    }\n\n    private void setupEventBusListener() {\n        final EventBus eb = vertx.eventBus();\n\n        // Register Handler 1\n        eb.registerLocalHandler(\"msg.client\", new Handler<Message<JsonObject>>() {\n            @Override\n            public void handle(Message<JsonObject> message) {\n                container.logger().info(\"Handler 1 (Local) received: \"\n                        + message.body().toString());\n            }\n\n        });\n\n        // Register Handler 2\n        eb.registerHandler(\"msg.client\", new Handler<Message<JsonObject>>() {\n            @Override\n            public void handle(Message<JsonObject> message) {\n                container.logger().info(\"Handler 2 (Shared) received: \"\n                        + message.body().toString());\n            }\n\n        });\n\n        eb.registerHandler(\"blotter.updates\", new Handler<Message<String>>() {\n            @Override\n            public void handle(Message<String> message) {\n                container.logger().info(\"Sent back data\");\n                message.reply(\"Data Ack!\");\n            }\n        });\n\n    }\n\n    private void createActiveMQConsumer() {\n        try {\n            final Connection connection = connectionFactory.createConnection();\n            connection.start();\n            // Create a Session\n            final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            // Create the destination\n            final Destination destination = session.createQueue(\"testMQDestination\");\n            // Create a MessageProducer from the Session to the Queue\n            final MessageConsumer consumer = session.createConsumer(destination);\n            consumer.setMessageListener(new MessageListener() {\n                @Override\n                public void onMessage(final javax.jms.Message message) {\n                    System.out.println(\"Received \" + message.toString());\n\n                    if (message instanceof TextMessage) {\n                        final  TextMessage textMessage = (TextMessage) message;\n                        // Send update to web client via eventbus\n                        vertx.eventBus().send(\"msg.server\", new JsonObject().putString(\"text\", \"Async message via ActiveMQ from OMS confirmed order submitted\"));\n                    }\n                }\n            });\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n    private void createCamelRouting() {\n        try {\n            final CamelContext context = new DefaultCamelContext();\n            context.addComponent(\"test-jms\", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));\n            context.addRoutes(new RouteBuilder() {\n                public void configure() {\n                    from(\"test-jms:queue:testMQ\").to(\"test-jms:queue:testMQDestination\");\n                }\n            });\n\n            context.start();\n\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n    private RouteMatcher createURLRouteMatcher() {\n        final RouteMatcher routeMatcher = new RouteMatcher();\n        routeMatcher.get(\"/getBlotterSOW\", new Handler<HttpServerRequest>() {\n            public void handle(final HttpServerRequest req) {\n\n                final JsonObject resp = new JsonObject();\n                resp.putString(\"text\", \"SOW from DB of trades\");\n\n                req.response().headers().add(\"Content-Type\", \"application/json; charset=utf-8\");\n                req.response().end(resp.toString());\n\n                vertx.eventBus().send(\"msg.server\", new JsonObject().putString(\"text\", \"Blotter SOW snapshot\"));\n            }\n        });\n\n        routeMatcher.get(\"/\", new Handler<HttpServerRequest>() {\n            public void handle(final HttpServerRequest req) {\n                final File f = new File(\"src/main/resources/web/index.html\");\n                System.out.println(f.getAbsolutePath());\n                try {\n                    // get the data from the filesystem and output to response\n                    String data = FileUtils.readFileToString(f);\n                    req.response().setStatusCode(200);\n                    req.response().putHeader(\"Content-Length\", Integer.toString(data.length()));\n                    req.response().write(data);\n                    req.response().end();\n                } catch (IOException e) {\n                    // assume file not found, so send 404\n                    req.response().setStatusCode(404);\n                    req.response().end();\n                }\n            }\n        });\n\n        routeMatcher.get(\"/submitOrder\", new Handler<HttpServerRequest>() {\n            public void handle(final HttpServerRequest req) {\n                try {\n                    // Create a Connection\n                    final Connection connection = connectionFactory.createConnection();\n                    connection.start();\n                    // Create a Session\n                    final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n                    // Create the destination\n                    final Destination destination = session.createQueue(\"testMQ\");\n                    // Create a MessageProducer from the Session to the Queue\n                    final MessageProducer producer = session.createProducer(destination);\n                    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n                    // Create a messages\n                    final TextMessage message = session.createTextMessage(\"New Order from a client\");\n                    producer.send(message);\n                    session.close();\n                    connection.close();\n                    System.out.println(\"Message sent to ActiveMQ\");\n\n                    final JsonObject resp = new JsonObject();\n                    resp.putString(\"text\", \"order sent\");\n                    req.response().headers().add(\"Content-Type\", \"application/json; charset=utf-8\");\n                    req.response().end(resp.toString());\n                } catch (Exception e) {\n                    System.out.println(e);\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        routeMatcher.noMatch(new Handler<HttpServerRequest>() {\n            public void handle(final HttpServerRequest req) {\n                final File f = new File(\"src/main/resources/web/\"+req.path());\n                System.out.println(f.getAbsolutePath());\n                try {\n                    // get the data from the filesystem and output to response\n                    String data = FileUtils.readFileToString(f);\n                    req.response().setStatusCode(200);\n                    req.response().putHeader(\"Content-Length\",Integer.toString(data.length()));\n                    req.response().write(data);\n                    req.response().end();\n                } catch (IOException e) {\n                    // assume file not found, so send 404\n                    req.response().setStatusCode(404);\n                    req.response().end();\n                }\n            }\n        });\n\n        return routeMatcher;\n    }\n}\n\n```", "```\n<html>\n<head>\n    <title>ActiveMQ Vertx Camel Web PoC</title>\n</head>\n\n<body>\n\n<form onsubmit=\"return false;\">\n    <input type=\"button\" id=\"connectButton\" value=\"Open connection\"/>\n</form>\n\n<div id=\"submitForm\">\n    <form onsubmit=\"return false;\">\n        Message:<input type=\"text\" id=\"sendMessage\" value=\"Equity Order\"/>\n        <input type=\"radio\" name=\"submissionType\" value=\"publish\"> Publish\n        <input type=\"radio\" name=\"submissionType\" value=\"send\" checked> Send\n        <input type=\"button\" id=\"submitButton\" value=\"Submit\"/>\n        <br>\n        <br>\n        <input type=\"button\" id=\"submitOrder\" value=\"Order\"/>\n        <input type=\"button\" id=\"getBlotterSOW\" value=\"Blotter SOW\"/>\n    </form>\n</div>\n\n<br>\n<br>\n<br>\n\nMessages received on browser handler:<br>\n<hr>\n<div id=\"received\" class=\"innerbox\" style=\"width: 400px; height: 275px;\">\n</div>\n\n<script src=\"js/jquery-1.7.1.min.js\"></script>\n<script src=\"js/sockjs-0.2.1.min.js\"></script>\n<script src=\"js/vertxbus.js\"></script>\n<script>\n\t\tvar eb = null;\n\t\tvar addressName = 'msg.server';\n\t\tvar addressClientName = 'msg.client';\n\n\t\tfunction submitMessage(type, address,  message) {\n\t\t\tif (eb) {\n\t\t\t\tvar json = {text: message};\n\t\t\t\tif (type == 'send') {\n\t\t\t\t\teb.send(addressClientName, {text: 'Send message: ' + message});\n\t\t\t\t} else {\n\t\t\t\t\teb.publish(addressClientName, {text: 'Publish message: ' + message});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction browserHandler(msg, replyTo) {\n\t\t\t$('#received').append(msg.text + \"<br>\");\n\t\t}\n\n\t\tfunction subscribe(address) {\n\t\t\tif (eb) {\n\t\t\t\teb.registerHandler(address, browserHandler);\n\t\t\t\t$('#subscribed').append($(\"<code>\").text(\"Address:\" + address));\n\t\t\t\t$('#subscribed').append($(\"</code><br>\"));\n\t\t\t}\n\t\t}\n\n\t\tfunction unsubscribe(address) {\n\t\t\tif (eb) {\n\t\t\t\teb.unregisterHandler(address, browserHandler);\n\t\t\t}\n\t\t}\n\n\t  \tfunction closeConn() {\n\t\t\tif (eb) {\n\t\t\t\teb.close();\n\t\t\t}\n\t\t\t$('#connectButton').val(\"Open Connection\");\n\t\t\t$(\"#connectButton\").on('click.openConnection', function() {\n\t\t\t\topenConn();\n\t\t\t});\n\t\t}\n\n\t  \tfunction openConn() {\n\t  \t  \teb = new vertx.EventBus(\"http://localhost:8888/eventbus\");\n\n\t  \t  \teb.onclose = function() {\n\t\t\t\teb = null;\n\t\t\t\t$('#submitForm').hide();\n\t\t\t};\n\n\t\t\teb.onopen = function() {\n\t\t\t\t$('#connectButton').val('Close Connection');\n\t\t\t\t$(\"#connectButton\").off('click.openConnection');\n\t\t\t\t$('#connectButton').on('click.closeConnection', function() {\n\t\t\t\t\t$(\"#connectButton\").off('click.closeConnection');\n\t\t\t\t\tcloseConn();\n\t\t\t\t});\n\n\t\t\t\t$('#submitForm').show();\n                subscribe(addressName);\n\n\t\t\t};\n\t\t}\n\n\t\t$(document).ready(function() {\n\t\t\t$('#submitForm').hide();\n\n\t\t\t$(\"#submitButton\").click(function() {\n\t\t\t\tsubmitMessage($(\"input[@name=submissionType]:checked\").val(), addressName, $(\"#sendMessage\").val());\n\t\t\t});\n\n\t\t\t$(\"#submitOrder\").click(function() {\n                $.ajax({\n                        type: \"GET\",\n                        url: \"submitOrder\",\n                        data: \"\",\n                        success: function(data) {\n                            browserHandler(data);\n                        }\n                    });\n\t\t    });\n\n\t\t\t$(\"#getBlotterSOW\").click(function() {\n                $.ajax({\n                        type: \"GET\",\n                        url: \"getBlotterSOW\",\n                        data: \"\",\n                        success: function(data) {\n                            browserHandler(data);\n                        }\n                    });\n\t\t    });\n\n            closeConn();\n        });\n\t</script>\n\n</body>\n</html>\n\n```"]