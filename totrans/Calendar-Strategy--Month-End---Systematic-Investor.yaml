- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 14:30:10'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Calendar Strategy: Month End | Systematic Investor'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://systematicinvestor.wordpress.com/2014/04/28/calendar-strategy-month-end/#0001-01-01](https://systematicinvestor.wordpress.com/2014/04/28/calendar-strategy-month-end/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Calendar Strategy is a very simple strategy that buys an sells at the predetermined
    days, known in advance. Today I want to show how we can easily investigate performance
    at and around Month End days.
  prefs: []
  type: TYPE_NORMAL
- en: First let’s load historical prices for SPY from Yahoo Fiance and compute SPY
    perfromance at the month-ends. I.e. strategy will open long position at the close
    on the 30th and sell position at the close on the 31st.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Please note that above, in the bt.run.share call, I set do.lag parameter equal
    to zero (the default value for the do.lag parameter is one). The reason for default
    setting equal to one is due to signal (decision to trade) is derived using all
    information available today, so the position can only be implement next day. I.e.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: However, in case of the calendar strategy there is no need to lag signal because
    the trade day is known in advance. I.e.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, I created two functions to help with signal creation and strategy testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Above, T0 is a calendar strategy that buys on 30th and sells on 31st. I.e. position
    is only held on a month end day. P1 and P2 are two strategies that buy a day prior
    and two days prior correspondingly. N1 and N2 are two strategies that buy a day
    after and two days after correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[![plot1](img/d51c50acb92a9002039c12feb4f43f17.png)](https://systematicinvestor.wordpress.com/wp-content/uploads/2014/04/plot11.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![plot2](img/ec98f2ac18b175409b655990b03e4bff.png)](https://systematicinvestor.wordpress.com/wp-content/uploads/2014/04/plot21.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The N1 strategy, buy on 31st and sell on the 1st next month seems to be working
    best for SPY.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s look at the actual trades:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![plot3](img/b39ff87b24429f673ae03ea809c2754a.png)](https://systematicinvestor.wordpress.com/wp-content/uploads/2014/04/plot3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The P2 strategy enters position at the close 3 days before the month end and
    exits positions at the close 2 days before the month end. I.e. the performance
    is due to returns only 2 days before the month end.
  prefs: []
  type: TYPE_NORMAL
- en: With this post I wanted to show how easily we can study calendar strategy performance
    using the [Systematic Investor Toolbox](https://systematicinvestor.wordpress.com/systematic-investor-toolbox/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, I will demonstrate calendar strategy applications to variety of important
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: To view the complete source code for this example, please have a look at the
    [bt.calendar.strategy.month.end.test() function in bt.test.r at github](https://github.com/systematicinvestor/SIT/blob/master/R/bt.test.r).
  prefs: []
  type: TYPE_NORMAL
