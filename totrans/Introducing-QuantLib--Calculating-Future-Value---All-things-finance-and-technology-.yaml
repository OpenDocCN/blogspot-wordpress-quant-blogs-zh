- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-18 06:47:07'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 06:47:07
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Introducing QuantLib: Calculating Future Value | All things finance and technology…'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍QuantLib：计算未来价值 | 所有关于金融和科技的事物…
- en: 来源：[https://mhittesdorf.wordpress.com/2013/02/11/introducing-quantlib-calculating-future-value/#0001-01-01](https://mhittesdorf.wordpress.com/2013/02/11/introducing-quantlib-calculating-future-value/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mhittesdorf.wordpress.com/2013/02/11/introducing-quantlib-calculating-future-value/#0001-01-01](https://mhittesdorf.wordpress.com/2013/02/11/introducing-quantlib-calculating-future-value/#0001-01-01)
- en: 'Welcome back. In my last post I showed how to calculate the future value of
    a loan, that is the amount owed when the loan is due assuming a one year term
    at a 5% annual rate compounded annually. The code is repeated below:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来。在上一篇文章中，我展示了如何计算贷款的未来价值，即在贷款到期时，假设一年期限，5%的年利率，每年复利一次，所欠的金额。下面重复了这段代码：
- en: '#include <ql/quantlib.hpp>'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <ql/quantlib.hpp>'
- en: '#include <iostream>'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <iostream>'
- en: '#define BOOST_AUTO_TEST_MAIN'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '#define BOOST_AUTO_TEST_MAIN'
- en: '#include <boost/test/unit_test.hpp>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <boost/test/unit_test.hpp>'
- en: BOOST_AUTO_TEST_CASE(testCalculateLoanPayment) {
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: BOOST_AUTO_TEST_CASE(testCalculateLoanPayment) {
- en: typedef FixedRateCoupon Loan;
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: typedef FixedRateCoupon Loan;
- en: Natural lengthOfLoan = 365;
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 贷款期限Natural lengthOfLoan = 365;
- en: Real loanAmount = 100.0;
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际贷款金额Real loanAmount = 100.0;
- en: Rate rate = .05;
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 利率 = .05;
- en: Date today = Date::todaysDate();
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 日期today = Date::todaysDate();
- en: Date paymentDate = today + lengthOfLoan;
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 支付日期支付Date = today + lengthOfLoan;
- en: Loan loan(paymentDate, loanAmount, rate, ActualActual(), today, paymentDate);
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Loan loan(paymentDate, loanAmount, rate, ActualActual(), today, paymentDate);
- en: Real payment = loanAmount + loan.accruedAmount(paymentDate);
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 实际支付金额 = 贷款金额 + 贷款.累积金额(支付日期);
- en: std::cout << “Payment due in ” << lengthOfLoan << ” days on loan amount of $”
    <<
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: std::cout << “Payment due in ” << lengthOfLoan << ” days on loan amount of $”
    <<
- en: 'loanAmount << ” at annual rate of ” << rate*100 << “% is: $” << payment <<
    std::endl;'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'loanAmount << ” at annual rate of ” << rate*100 << “% is: $” << payment <<
    std::endl;'
- en: '}'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Let’s go through this code and highlight some of the key statements. First and
    most important is the class that represents the loan, [FixedRateCoupon](http://quantlib.org/reference/class_quant_lib_1_1_fixed_rate_coupon.html
    "FixedRateCoupon").  The FixedRateCoupon class models a payment where the dollar
    amount due at the payment date is specified at the inception of the loan.  Our
    simple loan has one payment, the premium plus the interest, which is owed the
    lender when the loan is due.  I aliased the FixedRateCoupon class with a typedef
    to create a Loan abstraction that, hopefully, makes subsequent code more intuitive.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分析这段代码并突出一些关键语句。首先，也是最重要的是代表了贷款的类，[FixedRateCoupon](http://quantlib.org/reference/class_quant_lib_1_1_fixed_rate_coupon.html
    "FixedRateCoupon"). FixedRateCoupon类模拟了一种在支付日期到期时规定的美元金额的支付。我们的简单贷款有一次支付，即本金和利息，在贷款到期时归贷款人所有。我用typedef将FixedRateCoupon类别名称为Loan，希望这使后续代码更直观。
- en: The next several lines just define the loan’s term, premium and interest rate
    using specialized QuantLib data types, such as [Natural](http://quantlib.org/reference/group__types.html)
    and [Real](http://quantlib.org/reference/group__types.html).  In the next two
    lines, today’s date is established and the payment date is calculated with respect
    to today’s date.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几行只是定义了贷款的期限、本金和利率，使用像Natural和Real这样的 specialized QuantLib数据类型。在接下来的两行中，确定了今天的日期，并计算了相对于今天日期的支付日期。
- en: In the following line, an instance of the Loan class is declared, given the
    loan parameters previously defined. The [ActualActua](http://quantlib.org/reference/class_quant_lib_1_1_actual_actual.html)l()
    argument is the ‘day count’ convention for the loan. I’ll cover day count conventions
    in a future post, but suffice it to say that different types of loans are priced
    using different day count conventions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行中，声明了一个Loan类的实例，给出了之前定义的贷款参数。ActualActual()参数是贷款的“日计数”约定。我在未来的文章中介绍日计数约定，但足以说明不同类型的贷款使用不同的日计数约定。
- en: Finally, the final payment is calculated by adding the interest due on the loan,
    obtained with the accruedAmount() method, to the loan principal. As is probably
    obvious, the argument to accruedAmount() is the date that the loan matures and
    the loan repayment is due.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过将使用accruedAmount()方法获得的贷款利息与贷款本金相加来计算最终支付金额。如所料，accruedAmount()的参数是贷款到期日期，贷款还款到期日期。
- en: I hope that the code makes sense. If you have any questions about anything that
    I haven’t covered, I encourage you to consult the QuantLib [documentation](http://quantlib.org/reference/annotated.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望代码是清晰的。如果您有任何关于我没有涵盖的任何问题的疑问，我鼓励您查阅QuantLib的[文档](http://quantlib.org/reference/annotated.html)。
- en: Rather than jump into the calculation of present value and interest rates as
    I had originally planned, I will instead defer those topics to my next post. Thanks
    for visiting my blog and feel free to leave a comment or question.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与其像我最初计划的那样直接跳入现值和利率的计算，我反而会将这些话题推迟到我的下一篇文章中讨论。感谢访问我的博客，欢迎留下评论或提问。
- en: About Mick Hittesdorf
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于Mick Hittesdorf
- en: I'm a versatile technical leader with a passion for data analytics, data science
    and Big Data technology. I have experience working for both large and small organizations,
    in a variety of roles. I've been responsible for the management and operations
    of a global data science and analytics platform, developed low latency, proprietary
    trading systems, managed software development teams, defined enterprise architecture
    strategies, written white papers and blogs, published articles in industry journals
    and delivered innovative solutions to clients, both in a consulting and technical
    sales capacity. My current areas of focus include Big Data, data engineering,
    data science, R, and Cloud computing
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一位多才多艺的技术领导者，对数据分析、数据科学和大数据技术充满热情。我在大型和小型组织中都有工作经验，担任过各种角色。我曾负责管理一个全球数据科学和分析平台，开发了低延迟的专有交易系统，管理过软件开发团队，制定了企业架构策略，撰写了白皮书和博客，在行业期刊上发表过文章，并以咨询和技术销售的身份向客户提供了创新的解决方案。我当前的关注领域包括大数据、数据工程、数据科学、R和云计算。
