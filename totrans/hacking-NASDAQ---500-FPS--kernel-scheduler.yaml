- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-13 00:06:59'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-13 00:06:59'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: kernel scheduler'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hackers在 500 FPS 下的 NASDAQ：内核调度程序
- en: 来源：[http://hackingnasdaq.blogspot.com/2010/01/kernel-scheduler.html#0001-01-01](http://hackingnasdaq.blogspot.com/2010/01/kernel-scheduler.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2010/01/kernel-scheduler.html#0001-01-01](http://hackingnasdaq.blogspot.com/2010/01/kernel-scheduler.html#0001-01-01)
- en: 'The double peek in the Rx -> recvfrom() specifically the kernel -> userland
    switch looked suspiciously like some sort of core/hardware interaction. So, what
    happens if we change the # cores. Its really simple to do, just add maxcpus=0
    to the kernel boot command. And thus the following plots are generated'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Rx -> recvfrom() 中的双峰看起来有点可疑，特别是内核 -> 用户空间的切换，这看起来像某种核/硬件交互。那么，如果我们改变核心数量会发生什么呢？这做起来很简单，只需要将
    maxcpus=0 添加到内核引导命令中。于是生成了以下图表
- en: '[![](img/b759052c957861576d07e54f7a8a86e1.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_y8QiV_4GJCXfUQpXuiw1Rexij9F-eXyHKFAx0YYe4wFBZE61zqGJoG0O-mVG_-gCyWNkX_O84_YrYidD1JiLTUnto7cSPYRMCDZNVkW4SScSZbeNwv-tPwjFBpojGWjbkEL_MWTQVA/s1600-h/cpu2_2_send.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/b759052c957861576d07e54f7a8a86e1.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_y8QiV_4GJCXfUQpXuiw1Rexij9F-eXyHKFAx0YYe4wFBZE61zqGJoG0O-mVG_-gCyWNkX_O84_YrYidD1JiLTUnto7cSPYRMCDZNVkW4SScSZbeNwv-tPwjFBpojGWjbkEL_MWTQVA/s1600-h/cpu2_2_send.png)'
- en: 2 Core sendto() -> Tx Desc
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2 核心 sendto() -> Tx Desc
- en: '[![](img/b48e0c319427e16546d8820bb29caa6b.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjf6c2RM_fMKYNT5DrPZD9d-2aQlnfZfWSLTBGUY-xgww6XTYoCA-XboC_9LKBlyZmzH9a6cT2c4eD9VYFlAMdDZEpT6P2Uoj3v7ClochHRb-NaluKys5vFKOj9d0WNPrdEAPjvJphvbQ/s1600-h/cpu1_2_send.png)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/b48e0c319427e16546d8820bb29caa6b.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjf6c2RM_fMKYNT5DrPZD9d-2aQlnfZfWSLTBGUY-xgww6XTYoCA-XboC_9LKBlyZmzH9a6cT2c4eD9VYFlAMdDZEpT6P2Uoj3v7ClochHRb-NaluKys5vFKOj9d0WNPrdEAPjvJphvbQ/s1600-h/cpu1_2_send.png)'
- en: 1 Core sendto() -> Tx Desc
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 1 核心 sendto() -> Tx Desc
- en: Which is kind of interesting, not sure how/why the 1 Core sendto() has quite
    a few sample points < 1,000ns where the 2 Core version has none, other than that
    nothing too exciting.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点有趣，不太确定为什么 1 核心 sendto() 具有很多 < 1,000ns 的采样点，而 2 核心版本则一个没有，除此之外并没有什么激动人心的事情。
- en: '[![](img/7ee75350d0bbdfaca5bf82ad464ac66c.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg9aTngKHtLqtcMoY0LLR9AT2yDX3uwQe9H4-fcSG4HHJwpyzfCGGpd_JDEeG5Xg6dh2zHOmtwzJKeh6KkafPDWgoWQmjHYqITMMTIXrY8eGruJ0nTDLlGKY_gcTi9i2DC5r_uWrkdIFQ/s1600-h/cpu2_3_recv.png)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/7ee75350d0bbdfaca5bf82ad464ac66c.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg9aTngKHtLqtcMoY0LLR9AT2yDX3uwQe9H4-fcSG4HHJwpyzfCGGpd_JDEeG5Xg6dh2zHOmtwzJKeh6KkafPDWgoWQmjHYqITMMTIXrY8eGruJ0nTDLlGKY_gcTi9i2DC5r_uWrkdIFQ/s1600-h/cpu2_3_recv.png)'
- en: 2 Core Rx Intr -> recvfrom()
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 2 核心 Rx 间断 -> recvfrom()
- en: '[![](img/fb9492270db332d7003a46c949c13364.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgY0LzPCCxW11uHj5RtgFYGzTNBTdM6QWbm7BfABAYpW4zqisagIhqtkOzzH-No6rxamCwhTuVNkIbof__62j_ZFS_YVBnJz9wldlts1_7YgCuOgLPMsmfUZQ1BVmD2_i1MUSbaEhWAlA/s1600-h/cpu1_2_recv.png)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/fb9492270db332d7003a46c949c13364.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgY0LzPCCxW11uHj5RtgFYGzTNBTdM6QWbm7BfABAYpW4zqisagIhqtkOzzH-No6rxamCwhTuVNkIbof__62j_ZFS_YVBnJz9wldlts1_7YgCuOgLPMsmfUZQ1BVmD2_i1MUSbaEhWAlA/s1600-h/cpu1_2_recv.png)'
- en: 1 Core Rx Intr -> recvfrom()
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 1 核心 Rx 间断 -> recvfrom()
- en: OTOH receive shows quite a substantial change and as we suspected, it goes from
    a double peek, to a single peek assumed to be kernel -> userland signaling behaviour. 
    And ...
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，接收显示出相当大的改变，正如我们所怀疑的，它从双峰变为单峰，假定为内核 -> 用户空间的信号行为。而 ...
- en: '[![](img/f5a80f812dbfc93ce916bcb9e14ccd6d.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinoDiuMGFZP8tD7ai03fmrUkc9ej4eDYrHa7kuB9PiTSjZ9h1pGZp-8PcwO4at2G8JoLXMSkp9p240Vw7lXmkL0UrbZnrpzcPAf-a9X2pQrcB4Y6V3Ha80tONlLS7qiNCHq4itFMr3dA/s1600-h/recv_2core.png)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/f5a80f812dbfc93ce916bcb9e14ccd6d.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinoDiuMGFZP8tD7ai03fmrUkc9ej4eDYrHa7kuB9PiTSjZ9h1pGZp-8PcwO4at2G8JoLXMSkp9p240Vw7lXmkL0UrbZnrpzcPAf-a9X2pQrcB4Y6V3Ha80tONlLS7qiNCHq4itFMr3dA/s1600-h/recv_2core.png)'
- en: 2 Core udp finish kernel space -> userspace recvfrom()
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2 核心 udp 完成内核空间 -> 用户空间 recvfrom()
- en: '[![](img/62a1ad5a1fe97f7082b5c30b2923f79d.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZTx-0auRPLn1p1P_kJAnlhpNZrvSlqUmzvPgaQVRU7XKztMdGI2staWqSXxEOCnJ90ntH5IuuYJps7N8_CqBFRXXrRUfnVefWhZRaiJg7CMhCmGKuOND5qSuG4-VImAWYFlw6UfxoHw/s1600-h/recv_1core.png)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/62a1ad5a1fe97f7082b5c30b2923f79d.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZTx-0auRPLn1p1P_kJAnlhpNZrvSlqUmzvPgaQVRU7XKztMdGI2staWqSXxEOCnJ90ntH5IuuYJps7N8_CqBFRXXrRUfnVefWhZRaiJg7CMhCmGKuOND5qSuG4-VImAWYFlw6UfxoHw/s1600-h/recv_1core.png)'
- en: 1 Core udp finish kernel space -> userspace recvfrom()
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 1 核心 udp 完成内核空间 -> 用户空间 recvfrom()
- en: '... the plots speak for them self. Strangely, adding cores in some cases increases
    latency (the 2nd peek),. No idea whats going on, but keep in mind this is a blocking
    recvfrom() call so its obviously related to how linux scheduler deals with signals.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '...这些图表说明了问题。奇怪的是，在某些情况下，增加核心会增加延迟（第二个峰值）。不知道出了什么问题，但请记住这是一个阻塞的recvfrom()调用，显然与Linux调度程序处理信号有关。'
