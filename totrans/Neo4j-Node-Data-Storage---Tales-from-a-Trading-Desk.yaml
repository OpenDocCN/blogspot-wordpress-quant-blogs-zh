- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:35:28'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j Node Data Storage | Tales from a Trading Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mdavey.wordpress.com/2016/03/14/neo4j-node-data-storage/#0001-01-01](https://mdavey.wordpress.com/2016/03/14/neo4j-node-data-storage/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Neo4j Node Data Storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Neo4j](http://neo4j.com/) (graph database) is cool piece of technology.  Graph
    databases,  need to be used appropriately, they like blockchain, and other technologies
    in the sweet store, are not silver bullets in their own right.'
  prefs: []
  type: TYPE_NORMAL
- en: When considering what to store in a graph database, its easy to leverage the
    nodes and linkage between nodes, relationships, to generate a graph, and traverse
    a graph.  What is unclear, or not well documented, is how much data you should
    store on nodes. For example,  Christophe Willemsen [posting](http://graphaware.com/neo4j/2015/01/16/neo4j-graph-model-design-labels-versus-indexed-properties.html)
    on GraphAware with regards to using Neo4j to model blogs with postings that are
    followed by users has clear graph benefits.  What isn’t clear is if the postings
    themselves which could be lengthy in terms of text, and may include images at
    a minimum, should also be stored on the post node as a [property/label](http://stackoverflow.com/questions/31028504/what-is-the-difference-between-a-label-and-a-property-in-neo4j)?
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub [neo4j-contrib/neo4j-faq](https://github.com/neo4j-contrib/neo4j-faq)
    offer the following, which maybe relevant:'
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j is currently not suitable for storing BLOBs/CLOBs. Nodes, relationships,
    and properties are not co-located on disk. This might be introduced in the future.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The 1st edition (unfortunately I don’t have the latest version) of [Graph Databases](http://graphdatabases.com/)
    by Ian Robinson, Jim Webber & Emil Eifrem provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The node store file stores node records
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Like most of the Neo4j store files, the node store is a fixed-size record store,
    where each record is 9 bytes in length
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Correspondingly, relationships are stored in the relationship store file.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The relationship store consists of fixed-size records—in this case each record
    is 33 bytes long.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In addition to the node and relationship stores, which contain the graph structure,
    we have the property store files. These store the user’s key-value pairs. Recall
    that Neo4j, being a property graph database, allows properties—name-value pairs—to
    be attached to both nodes and relationships. The property stores, therefore, are
    referenced from both node and relationship records.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Neo4j supports store optimizations, whereby it inlines some properties into
    the property store file directly. This happens when property data can be encoded
    to fit in one or more of a record’s four property blocks. In practice this means
    that data like phone numbers and zip codes can be inlined in the property store
    file directly, rather than being pushed out to the dynamic stores.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Back to the Christophe Willemsen article, should the postings be stored in Neo4j,
    or outside with a relevant ID to allow Neo4j linkage?
  prefs: []
  type: TYPE_NORMAL
- en: ~ by mdavey on March 14, 2016.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Data](https://mdavey.wordpress.com/category/data/)
  prefs: []
  type: TYPE_NORMAL
