- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-13 00:07:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月13日 00:07:12
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: Live and times of an Rx packet'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hacking NASDAQ @ 500 FPS：Rx 数据包的实时情况
- en: 来源：[http://hackingnasdaq.blogspot.com/2010/01/live-and-times-of-rx-packet.html#0001-01-01](http://hackingnasdaq.blogspot.com/2010/01/live-and-times-of-rx-packet.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2010/01/live-and-times-of-rx-packet.html#0001-01-01](http://hackingnasdaq.blogspot.com/2010/01/live-and-times-of-rx-packet.html#0001-01-01)
- en: To complete the picture we need to look at the Rx packet flow, from when linux
    receives the Rx interrupt to when the user gets the packet from recvfrom(). First
    up is the high level view, total time from interrupt acknowledge -> recvfrom().
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完善图片，我们需要查看 Rx 数据包流的全过程，从 Linux 接收 Rx 中断到用户从 recvfrom() 中获得数据包。首先是高层次的视图，从中断确认
    -> recvfrom() 的总时间。
- en: intr ack -> recvfrom()
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: intr ack -> recvfrom()
- en: And it looks fairly similar to our other plots. This has NAPI disabled and separate
    Rx/Tx handlers, its interesting that using NAPI the latency goes lower(18,000ns)
    and higher(35,000ns) presumably luck of the draw when polling @ 300Hz (softirq).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个看起来跟我们的其它图表相当相似。禁用 NAPI 并使用单独的 Rx/Tx 处理程序后，有趣的是使用 NAPI 时延迟会更低（18,000ns），高（35,000ns），可能是在
    300Hz（softirq）轮询时的变化。
- en: Whan happens after linux receives the irq? the network drivers irq hander is
    invoked where it acknowedges and clears the interrupt. Nothing particuarly interesting
    yet does take quite a bit of time doing... something? L1/L2 miss reloads? or just
    latency of reading registers? not sure. Plot is below, around 600ns or so
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 接收中断后发生了什么？网络驱动程序的 irq 处理程序被调用，确认和清除中断。目前还没有特别有趣的地方，但显然在做某些事情花了很多时间… 是
    L1/L2 的未命中更新？还是仅仅是读取寄存器的延迟？不清楚。下图所示，大约在 600ns 左右。
- en: '[![](img/e19fd0dac43ef73169d0cd284b257d19.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjrjmSjmadMJPsW_LBCxmfOms9Vvrfo29LKQvRaLbvlLoTUV2ZOuBVrHw0kOQKDP3R6So-1OU_ETyvjpPHOKKPywIv6DVMuMkWWwdfcrLgmtbI9TCJKd0eUIpZ-Wm0CIrMCY7EdRHWJEw/s1600-h/recv_irq2clear.png)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/e19fd0dac43ef73169d0cd284b257d19.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjrjmSjmadMJPsW_LBCxmfOms9Vvrfo29LKQvRaLbvlLoTUV2ZOuBVrHw0kOQKDP3R6So-1OU_ETyvjpPHOKKPywIv6DVMuMkWWwdfcrLgmtbI9TCJKd0eUIpZ-Wm0CIrMCY7EdRHWJEw/s1600-h/recv_irq2clear.png)'
- en: irq vector -> driver Rx clear
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: irq 矢量 -> 驱动程序 Rx 清除
- en: After the intr has been cleared, the driver reads in the Rx descriptors and
    uses the CPU to copy the packet (from device DMA ring buffer) onto the usual socket
    RECV buffer.This (RECV) buffer is the one people usually talk about when discussing
    sockets.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 中断清除后，驱动程序读入了 Rx 描述符，并使用 CPU 将数据包（从设备 DMA 环形缓冲区）复制到通常的套接字 RECV 缓冲区中。这个（RECV）缓冲区是讨论套接字时人们常说的内容。
- en: device buffer -> socket buffer copy
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设备缓冲 -> 套接字缓冲复制
- en: As you can see (above) the histogram is a bit weird, a clear chunk followed
    by this longtail of stuff. Guessing this is partially ddr fetch latency, atleast
    the 1000ns part as its only copying 128B + UDP + IP + Ethernet - not much. Also
    destination mem address might not be aligned correctly to enable write combining,
    so its doing a RMW + miss on the source fetch, hope not but its an old x86 processor.The
    flat 2500ns might be unmapping the packets DMA area, where some sort of kernel
    / pci functions are at work. On a side note, not sure why it unmapps it, and then
    re-mapps it when the Rx descriptor is free and ready, surely its not for security?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见（如上图所示），这个直方图有些奇怪，一片清晰的区域后面跟着一长串的东西。猜测部分是 DDR 取数据延迟，至少 1000ns 的部分是因为只有 128B
    + UDP + IP + 以太网，不多。并且目标内存地址可能没有正确对齐以启用写组合，所以它做了读修改写 + 源数据获取未命中，但愿不是，因为这是一块旧的
    x86 处理器。2500ns 理所当然是取消数据包的 DMA 区域，一些内核/PCI 功能在工作。顺便说一句，不清楚为什么会取消，然后在 Rx 描述符空闲和准备好时重新映射，应该不是为了安全性吧？
- en: After the payload has been copied, it does IP processing / sanity checking 
    which is a very small profile so no plot included - it caches all ip/device/socket 
    info from the previous packet.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在传输完载荷后，进行 IP 处理 / 容错检查，这部分内存很小，所以不包含图表 - 它缓存上一个数据包的所有 IP/设备/套接字信息。
- en: netfilter PRE_ROUTING
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: netfilter PRE_ROUTING
- en: Once IP processing is done its off to the netfilter. PRE_ROUTING is quite minimal
    (above) does nothing - no rules are defined.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: IP 处理完成之后，进入 netfilter。PRE_ROUTING 非常简单（如上图所示），不包含任何规则定义。
- en: '[![](img/6ce74455d6b3d5e342806923f204de03.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjf8PuxUcPd43ZjYw79tAL-aRt7iCJgfSSH90SeDwzj6ffuU3hdxaNWyqCMDnEQWizpP3mvYLA4TtIxJUiUzPEJBmU2BbNm3RI2mHraJHi_Z2ZvUZ8i8Aoi_Ro6ojStnPomKjcIfflREA/s1600-h/recv_netfilter_local.png)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/6ce74455d6b3d5e342806923f204de03.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjf8PuxUcPd43ZjYw79tAL-aRt7iCJgfSSH90SeDwzj6ffuU3hdxaNWyqCMDnEQWizpP3mvYLA4TtIxJUiUzPEJBmU2BbNm3RI2mHraJHi_Z2ZvUZ8i8Aoi_Ro6ojStnPomKjcIfflREA/s1600-h/recv_netfilter_local.png)'
- en: netfiler LOCAL_IN
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: netfiler LOCAL_IN
- en: And the same for LOCAL_IN (above) does basically nothing too - no rules are
    defined.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于LOCAL_IN（上文），基本上什么都不做 - 没有定义规则。
- en: '[![](img/4cb9ed88098bde13ce1e60e755a5ae8b.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6isItXqvu-KI96_OxwGMj20UgcgLObo-9acSqUEhcTeIvMPrQAIMsm5cKgk0w5JWvo9lqsqIGZzU2sT8eOa-KCwuIiMrGGiuJsAL312OIaKvX7Jd1v-big0wg6KeYSlPtxIxSNuoEfg/s1600-h/recv_udp.png)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/4cb9ed88098bde13ce1e60e755a5ae8b.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6isItXqvu-KI96_OxwGMj20UgcgLObo-9acSqUEhcTeIvMPrQAIMsm5cKgk0w5JWvo9lqsqIGZzU2sT8eOa-KCwuIiMrGGiuJsAL312OIaKvX7Jd1v-big0wg6KeYSlPtxIxSNuoEfg/s1600-h/recv_udp.png)'
- en: udp processing
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: UDP处理
- en: Finally UDP processing(above) things get interesting. Firstly the spread on
    the plot is quite large, so somethings going on there. The really interesting
    part is the height - probably hard to see, but theres is a 100% column is time
    bin 0\. E.g. most of the time, udp processing is extremely low, then occasionally
    it does *something*. Not sure what but definitely a case for investigation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后UDP处理（上文）变得有趣。首先，图表的分布范围非常大，所以肯定有问题。真正有趣的部分是高度 - 可能很难看到，但时间间隔0中有一个100%的列。例如，大部分时间，udp处理非常低，然后偶尔会做些*事情*。不确定是什么，但绝对值得调查。
- en: '[![](img/2866d142df7eb9eaa2301fb0bd80339c.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCut-R0ZEapP7Mk3WgFexq_x6lLic54_8Jg4jz2cxPeI3l-PYOunsl4DlJcghG3q_0qhyOA0RBVGCh5B5YmK99kjk6jgf65XXx1KpZZbhYuys7nKvIUJlRYL5zBAjmyzCXDvIaNt56ew/s1600-h/recv_ipudp2user.png)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/2866d142df7eb9eaa2301fb0bd80339c.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCut-R0ZEapP7Mk3WgFexq_x6lLic54_8Jg4jz2cxPeI3l-PYOunsl4DlJcghG3q_0qhyOA0RBVGCh5B5YmK99kjk6jgf65XXx1KpZZbhYuys7nKvIUJlRYL5zBAjmyzCXDvIaNt56ew/s1600-h/recv_ipudp2user.png)'
- en: UDP (kernel) -> recvfrom(user)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: UDP（内核）-> recvfrom（用户）
- en: Finally the packet arrives in userspace(above) which is the source of our 2
    peeks in total latency. The reason for this ? not sure, likely related the blocking/signaling
    behaviour of the blocking recvfrom() call. Possible theory for size and pitch
    is the softirq timer frequency (300Mhz default). Where a quick tests is to increase/decrease
    this frequency, rebuild kernel, run, test and check the result.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，数据包到达用户空间（上文），这是我们总延迟中的两个峰值的来源。原因是？不太确定，可能与阻塞/信令行为的阻塞recvfrom()调用有关。大小和频率的可能理论是softirq定时器频率（300Mhz默认）。快速测试是增加/减少此频率，重建内核，运行测试并检查结果。
- en: Rx latency summary
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Rx延迟摘要
- en: Its difficult to summarize each module with a single digit as the stdev for
    each component can vary significantly, however the above is a rough guide for
    a non-napi configured driver and stack on 2.6.30.10\. Its really hard to reproduce
    the exact numbers, just booting the stock arch-linux distro kernel, which is the
    source .config file for this 2.6.30.10 kernel shows a wildly different profile.
    Or reloading the Network driver to many times causes weirdness, such is life when
    theres a metric ton of code running.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很难用单个数字总结每个模块，因为每个组件的标准偏差可能会有很大变化，但以上是对非napi配置驱动程序和2.6.30.10堆栈的粗略指南。准确复现这些数字非常困难，只需启动存档的arch-linux发行版内核，这是该2.6.30.10内核的源.config文件，显示了完全不同的配置文件。或者多次重新加载网络驱动程序会导致奇怪的事情发生，这就是当有大量代码运行时的生活。
- en: Line count on C files for linux-2.6.30.10/net clocks in at around 912K LOC.
    net/ipv4 clocks in 128K LOC ...  obviously Ethernet+IP/UDP+Intel e1000e is a fraction
    of that but even 20k LOC is a significant chunk of logic to make tuning at the
    microsecond level truly a fine art.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Linux-2.6.30.10/net中的C文件行数大约为912K LOC。 net/ipv4中有128K LOC……显然Ethernet+IP/UDP+Intel
    e1000e只是其中的一部分，但即使20k LOC也是使微秒级调整成为真正艺术的重要逻辑块。
