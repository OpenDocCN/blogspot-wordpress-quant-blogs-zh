["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\n\ttickers = 'SPY'\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\n\tbt.prep(data, align='keep.all', dates='1994::')\n\n\t#*****************************************************************\n\t# Buy and Hold\n\t#****************************************************************** \n\tprices = data$prices\n\tmodels = list()\n\n\tdata$weight[] = 1\n\tmodels$buy.hold = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Buy and Hold with target 10% Volatility\n\t#****************************************************************** \n\tret.log = bt.apply.matrix(data$prices, ROC, type='continuous')\n\thist.vol = sqrt(252) * bt.apply.matrix(ret.log, runSD, n = 60)\n\n\tdata$weight[] = 0.1 / hist.vol\n\tmodels$buy.hold.volatility.weighted = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Buy and Hold with target 10% Volatility and Max Total leverage 100%\n\t#****************************************************************** \t\t\n\tdata$weight[] = 0.1 / hist.vol\n\t\trs = rowSums(data$weight)\n\t\tdata$weight[] = data$weight / iif(rs > 1, rs, 1) \t\t\t\n\tmodels$buy.hold.volatility.weighted.100 = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Same, rebalanced Monthly\n\t#****************************************************************** \n\tperiod.ends = endpoints(prices, 'months')\n\t\tperiod.ends = period.ends[period.ends > 0]\n\n\tdata$weight[] = NA\n\tdata$weight[period.ends,] = 0.1 / hist.vol[period.ends,]\n\t\trs = rowSums(data$weight[period.ends,])\n\t\tdata$weight[period.ends,] = data$weight[period.ends,] / iif(rs > 1, rs, 1) \t\t\t\n\tmodels$buy.hold.volatility.weighted.100.monthly = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \n\t# Plot perfromance\n\tplotbt(models, plotX = T, log = 'y', LeftMargin = 3)\t    \t\n\t\tmtext('Cumulative Performance', side = 2, line = 1)\n\n\tplotbt.custom.report.part2(rev(models))\n\n\t# Plot Portfolio Turnover for each strategy\n\tlayout(1)\n\tbarplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover', plotX = F, label='both')\n\n```", "```\n\n\t#*****************************************************************\n\t# Next let's examine other volatility measures\n\t#****************************************************************** \n\tmodels = models[c('buy.hold' ,'buy.hold.volatility.weighted.100.monthly')]\n\n\t# TTR volatility calc types\n\tcalc = c(\"close\", \"garman.klass\", \"parkinson\", \"rogers.satchell\", \"gk.yz\", \"yang.zhang\")\n\n\tohlc = OHLC(data$SPY)\n\tfor(icalc in calc) {\n\t\tvol = volatility(ohlc, calc = icalc, n = 60, N = 252)\n\n\t\tdata$weight[] = NA\n\t\tdata$weight[period.ends,] = 0.1 / vol[period.ends,]\n\t\t\trs = rowSums(data$weight[period.ends,])\n\t\t\tdata$weight[period.ends,] = data$weight[period.ends,] / iif(rs > 1, rs, 1) \t\t\t\n\t\tmodels[[icalc]] = bt.run.share(data, clean.signal=T)\n\t}\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \n\t# Plot performance\n\tplotbt(models, plotX = T, log = 'y', LeftMargin = 3)\t    \t\n\t\tmtext('Cumulative Performance', side = 2, line = 1)\n\n\tplotbt.strategy.sidebyside(models)\n\n```", "```\n\n\t#*****************************************************************\n\t# Volatility Position Sizing applied to MA cross-over strategy's Equity Curve\n\t#****************************************************************** \n\tmodels = list()\t\n\n\tsma.fast = SMA(prices, 50)\n\tsma.slow = SMA(prices, 200)\n\tweight = iif(sma.fast >= sma.slow, 1, -1)\n\n\tdata$weight[] = weight\n\tmodels$ma.crossover = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Target 10% Volatility\n\t#****************************************************************** \n\tret.log = bt.apply.matrix(models$ma.crossover$equity, ROC, type='continuous')\n\thist.vol = sqrt(252) * bt.apply.matrix(ret.log, runSD, n = 60)\n\n\tdata$weight[] = NA\n\t\tdata$weight[period.ends,] = (0.1 / hist.vol[period.ends,]) * weight[period.ends,]\n\t\t# limit total leverage to 100%\t\t\n\t\trs = rowSums(data$weight[period.ends,])\n\t\tdata$weight[period.ends,] = data$weight[period.ends,] / iif(abs(rs) > 1, abs(rs), 1) \t\t\t\n\tmodels$ma.crossover.volatility.weighted.100.monthly = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \n\t# Plot perfromance\n\tplotbt(models, plotX = T, log = 'y', LeftMargin = 3)\t    \t\n\t\tmtext('Cumulative Performance', side = 2, line = 1)\n\n\tplotbt.custom.report.part2(rev(models))\n\n```", "```\n\n\t#*****************************************************************\n\t# Apply Volatility Position Sizing Timing stretegy by M. Faber\n\t#****************************************************************** \n\ttickers = spl('SPY,QQQ,EEM,IWM,EFA,TLT,IYR,GLD')\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\n\tbt.prep(data, align='remove.na', dates='1994::')\n\n\t#*****************************************************************\n\t# Code Strategies\n\t#****************************************************************** \n\tprices = data$prices   \n\t\tn = ncol(prices)\n\tmodels = list()\n\n\tperiod.ends = endpoints(prices, 'months')\n\t\tperiod.ends = period.ends[period.ends > 0]\n\n\t#*****************************************************************\n\t# Equal Weight\n\t#****************************************************************** \n\tdata$weight[] = NA\n\t\tdata$weight[period.ends,] = ntop(prices[period.ends,], n)\n\t\tdata$weight[1:200,] = NA\n\tmodels$equal.weight = bt.run.share(data, clean.signal=F)\n\n\t#*****************************************************************\n\t# Timing by M. Faber\n\t#****************************************************************** \n\tsma = bt.apply.matrix(prices, SMA, 200)\n\n\tweight = ntop(prices, n) * (prices > sma)\n\tdata$weight[] = NA\n\t\tdata$weight[period.ends,] = weight[period.ends,]\n\tmodels$timing = bt.run.share(data, clean.signal=F)\n\n\t#*****************************************************************\n\t# Timing with target 10% Volatility\n\t#****************************************************************** \n\tret.log = bt.apply.matrix(models$timing$equity, ROC, type='continuous')\n\thist.vol = bt.apply.matrix(ret.log, runSD, n = 60)\n\t\thist.vol = sqrt(252) * as.vector(hist.vol)\n\n\tdata$weight[] = NA\n\t\tdata$weight[period.ends,] = (0.1 / hist.vol[period.ends]) * weight[period.ends,]\n\t\trs = rowSums(data$weight)\n\t\tdata$weight[] = data$weight / iif(rs > 1, rs, 1) \t\t\t\t\n\t\tdata$weight[1:200,] = NA\n\tmodels$timing.volatility.weighted.100.monthly = bt.run.share(data, clean.signal=T)\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \n\t# Plot perfromance\n\tplotbt(models, plotX = T, log = 'y', LeftMargin = 3)\t    \t\n\t\tmtext('Cumulative Performance', side = 2, line = 1)\n\n\tplotbt.custom.report.part2(rev(models))\n\n```"]