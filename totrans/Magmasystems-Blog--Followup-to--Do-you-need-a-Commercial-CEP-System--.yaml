- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 04:57:18'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Magmasystems Blog: Followup to "Do you need a Commercial CEP System?"'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://magmasystems.blogspot.com/2008/11/followup-to-do-you-need-commercial-cep.html#0001-01-01](http://magmasystems.blogspot.com/2008/11/followup-to-do-you-need-commercial-cep.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Richard Bentley of
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: has a
  prefs: []
  type: TYPE_NORMAL
- en: '[great post](http://apama.typepad.com/my_weblog/2008/11/fx-a-cep-succes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: in which he details the various uses of
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: in a number of financial companies. Richard's post and Tim Bass's
  prefs: []
  type: TYPE_NORMAL
- en: '[companion post](http://www.thecepblog.com/2008/11/15/will-commercial-cep-engines-replace-algorithmic-trading-platforms/)'
  prefs: []
  type: TYPE_NORMAL
- en: are two additional ways of thinking about the viability of commercial
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engines.
  prefs: []
  type: TYPE_NORMAL
- en: My previous post concluded that
  prefs: []
  type: TYPE_NORMAL
- en: 1) If I had a large team of developers, AND I had a number of
  prefs: []
  type: TYPE_NORMAL
- en: pre
  prefs: []
  type: TYPE_NORMAL
- en: -written frameworks that provided input and output adapters, AND I had a relatively
    easy use case (
  prefs: []
  type: TYPE_NORMAL
- en: ie
  prefs: []
  type: TYPE_NORMAL
- en: ': simple aggregations, simple pricing, etc), AND if there was no existing vendor
    solution, then I would prefer to write everything ourselves. (All four conditions
    need to be satisfied.) I would choose this path because it gives us the maximum
    amount of control over the engine.'
  prefs: []
  type: TYPE_NORMAL
- en: 2) If I had a small team of developers, and money was no object, and if there
    was no existing vendor solution, then I would purchase a
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine from a vendor. If money was tight, I would probably opt for
  prefs: []
  type: TYPE_NORMAL
- en: Esper
  prefs: []
  type: TYPE_NORMAL
- en: . I would have to balance my budget with the lost opportunity cost. If the opportunity
    cost was a lot greater, then I might go for a vertical
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: application, if one existed.
  prefs: []
  type: TYPE_NORMAL
- en: If I needed an
  prefs: []
  type: TYPE_NORMAL
- en: algo
  prefs: []
  type: TYPE_NORMAL
- en: trading application and a
  prefs: []
  type: TYPE_NORMAL
- en: generc CEPengine
  prefs: []
  type: TYPE_NORMAL
- en: ', why not use'
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: '?'
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: has been in a sweet spot for a long time, and Richard Bentley has seen the fruits
    of this. They have offered a generic
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: solution for a while, but their claim to fame is that people like John Bates
    and Mark Palmer helped to create a trading-solution-in-a-box. When I hear people
    at my firm talk about
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: ', they talk about it as if it were its own class of applications, much in the
    way people refer to Ketchup now instead of'
  prefs: []
  type: TYPE_NORMAL
- en: Catsup
  prefs: []
  type: TYPE_NORMAL
- en: . They don't even know that
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: is related to
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Where do I think the future of
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: lies? In building blocks that you can choose from in order to create applications.
    A risk management block, an
  prefs: []
  type: TYPE_NORMAL
- en: algo
  prefs: []
  type: TYPE_NORMAL
- en: trading block, a pricing block, a FIX processing block, a market surveillance
    block. These might be sold like
  prefs: []
  type: TYPE_NORMAL
- en: Legos
  prefs: []
  type: TYPE_NORMAL
- en: . You choose an
  prefs: []
  type: TYPE_NORMAL
- en: algo
  prefs: []
  type: TYPE_NORMAL
- en: trading block, which comes with the engine,
  prefs: []
  type: TYPE_NORMAL
- en: pre
  prefs: []
  type: TYPE_NORMAL
- en: -written code, a market data adapter of your choice, and a FIX adapter. You
    can snap in a risk management block. You can snap in a P&L block. All of these
    blocks come with source code so that you can tune them.
  prefs: []
  type: TYPE_NORMAL
- en: These
  prefs: []
  type: TYPE_NORMAL
- en: pre
  prefs: []
  type: TYPE_NORMAL
- en: -written blocks will have been written, tuned, and verified by the vendor. There
    would be less of a chance of a developer struggling with Streaming
  prefs: []
  type: TYPE_NORMAL
- en: SQL
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: This is something that I always thought would be done by an enterprising third
    party. However, the vendors themselves are moving in this direction. They are
    all trying to catch up to
  prefs: []
  type: TYPE_NORMAL
- en: Apama
  prefs: []
  type: TYPE_NORMAL
- en: in the financial arena, while trying to maintain their excellence in their offering
    of a general purpose
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: engine.
  prefs: []
  type: TYPE_NORMAL
- en: So far, I have selfishly focused on financial applications. However, there are
    many
  prefs: []
  type: TYPE_NORMAL
- en: CEP
  prefs: []
  type: TYPE_NORMAL
- en: applications in other industries, like gaming, transportation, and defense.
    All of them share the same characteristics. Monitor a bunch of real-time actions
    and warn when a certain condition is true. So, a generic surveillance block would
    be great. The surveillance block might come with a choice of adapters for the
    most popular sensors . (Tim Bass can tell me if I have been smoking crack here.)
  prefs: []
  type: TYPE_NORMAL
- en: It may be very difficult to come up with an "application block" that will solve
    all facets of a domain correctly. Can you come up with a risk management app block
    that can be used right out of the box? Probably not. However, a thoughtful architecture,
    combined with lots of market research, and combined with lot of extensibility
    points in the application block, will probably go a long way. In that sense, the
    vendors should look at how Microsoft
  prefs: []
  type: TYPE_NORMAL
- en: architected
  prefs: []
  type: TYPE_NORMAL
- en: their
  prefs: []
  type: TYPE_NORMAL
- en: '[Enterprise Application Blocks](http://msdn.microsoft.com/en-us/library/cc467894.aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: ©2008 Marc Adler - All Rights Reserved.
  prefs: []
  type: TYPE_NORMAL
- en: All opinions here are personal, and have no relation to my employer.
  prefs: []
  type: TYPE_NORMAL
