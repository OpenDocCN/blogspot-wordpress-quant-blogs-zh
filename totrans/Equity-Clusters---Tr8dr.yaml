- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 15:35:30'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Equity Clusters | Tr8dr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tr8dr.wordpress.com/2009/12/30/equity-clusters/#0001-01-01](https://tr8dr.wordpress.com/2009/12/30/equity-clusters/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: December 30, 2009 · 8:32 pm
  prefs: []
  type: TYPE_NORMAL
- en: I am putting together some portfolios to be auto-traded using a dynamic portfolio
    asset allocation algo.   I had put together a maximum spanning tree (shown in
    a previous posting) to observe relationships between securities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this iteration have gone further:'
  prefs: []
  type: TYPE_NORMAL
- en: Heatmap colors to indicate average volatility levels for a given security relative
    to others
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maximum spanning tree clusters to reveal which diversification group a given
    asset belongs to
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edge thickness indicates strength of relationship
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I am interested in both the diversity and the volatility profile of the asset
    pool.   I will pick the majority of assets from the set with mid-range volatility
    (oranges), as opposed to low vol (reds), and high vol (yellows).    Classifying
    the asset set into clusters based on correlations provides an automated way of
    observing the diversification group the asset belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: '**Algorithm**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The algorithm is loosely as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: calculate lower-triangular correlation matrix of returns for, say, s&p 500 stocks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: sort in descending order by correlation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: set up graph structure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: loop through correlations selecting pairs of assets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if neither in graph add as new cluster pair
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: if one in graph and other not, attach new to existing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: if both in graph but size of clusters < min cluster size, merge clusters
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: repeat until all assets accounted for **and** all clusters have size >= min
    cluster size
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: annotate & plot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Clusters (daily returns)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the clusters the algorithm produced:'
  prefs: []
  type: TYPE_NORMAL
- en: Of course this can be applied to any asset set.  Thought is a useful visualization,
    though there are many other dimensions of interest.
  prefs: []
  type: TYPE_NORMAL
