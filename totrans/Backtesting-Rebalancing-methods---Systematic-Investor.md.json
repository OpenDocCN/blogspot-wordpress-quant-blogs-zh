["```\n\n# Load Systematic Investor Toolbox (SIT)\nsetInternet2(TRUE)\ncon = gzcon(url('https://github.com/systematicinvestor/SIT/raw/master/sit.gz', 'rb'))\n\tsource(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\n\ttickers = spl('SPY,TLT')\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1900-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\n\tbt.prep(data, align='remove.na', dates='1900::2011')\n\n\t#*****************************************************************\n\t# Code Strategies\n\t#****************************************************************** \n\tprices = data$prices   \n\tnperiods = nrow(prices)\n\ttarget.allocation = matrix(c(0.5, 0.5), nrow=1)\n\n\t# Buy & Hold\t\n\tdata$weight[] = NA\t\n\t\tdata$weight[1,] = target.allocation\n\t\tcapital = 100000\n\t\tdata$weight[] = (capital / prices) * data$weight\n\tbuy.hold = bt.run(data, type='share', capital=capital)\n\n\t# Rebalance periodically\n\tmodels = list()\n\tfor(period in spl('months,quarters,years')) {\n\t\tdata$weight[] = NA\t\n\t\t\tdata$weight[1,] = target.allocation\n\n\t\t\tperiod.ends = endpoints(prices, period)\n\t\t\t\tperiod.ends = period.ends[period.ends > 0]\t\t\n\t\t\tdata$weight[period.ends,] = repmat(target.allocation, len(period.ends), 1)\n\n\t\t\tcapital = 100000\n\t\t\tdata$weight[] = (capital / prices) * data$weight\n\t\tmodels[[period]] = bt.run(data, type='share', capital=capital)\t\n\t}\n\tmodels$buy.hold = buy.hold\t\t\t\t\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \t\t\n\tplotbt.custom.report(models)\t\t\n\n\t# Plot BuyHold and Monthly Rebalancing Weights\n\tlayout(1:2)\n\tplotbt.transition.map(models$buy.hold$weight, 'buy.hold', spl('red,orange'))\n\t\tabline(h=50)\n\tplotbt.transition.map(models$months$weight, 'months', spl('red,orange'))\n\t\tabline(h=50)\n\n\t# helper function to create barplot with labels\n\tbarplot.with.labels <- function(data, main, plotX = TRUE) {\n\t\tpar(mar=c( iif(plotX, 6, 2), 4, 2, 2))\n\t\tx = barplot(100 * data, main = main, las = 2, names.arg = iif(plotX, names(data), ''))\n\t\ttext(x, 100 * data, round(100 * data,1), adj=c(0.5,1), xpd = TRUE)\n\t}\n\t# Plot Portfolio Turnover for each Rebalancing method\n\tlayout(1)\n\tbarplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover')\n\n```", "```\n\n# Rebalancing method based on maximum deviation\nbt.max.deviation.rebalancing <- function\n(\n\tdata, \n\tmodel, \n\ttarget.allocation, \n\tmax.deviation = 3/100, \n\trebalancing.ratio = 0\t# 0 means rebalance all-way to target.allocation\n\t\t\t\t# 0.5 means rebalance half-way to target.allocation\n) \n{\n\tstart.index = 1\n\tnperiods = nrow(model$weight)\n\taction.index = rep(F, nperiods)\n\n\twhile(T) {\t\n\t\t# find rows that violate max.deviation\n\t\tweight = model$weight\n\t\tindex = which( apply(abs(weight - repmat(target.allocation, nperiods, 1)), 1, max) > max.deviation)\t\n\n\t\tif( len(index) > 0 ) {\n\t\t\tindex = index[ index > start.index ]\n\n\t\t\tif( len(index) > 0 ) {\n\t\t\t\taction.index[index[1]] = T\n\n\t\t\t\tdata$weight[] = NA\t\n\t\t\t\t\tdata$weight[1,] = target.allocation\n\n\t\t\t\t\ttemp = repmat(target.allocation, sum(action.index), 1)\n\t\t\t\t\tdata$weight[action.index,] = temp + \n\t\t\t\t\t\trebalancing.ratio * (weight[action.index,] - temp)\t\t\t\t\t\n\n\t\t\t\t\tcapital = 100000\n\t\t\t\t\tdata$weight[] = (capital / data$prices) * data$weight\n\t\t\t\tmodel = bt.run(data, type='share', capital=capital, silent=T)\t\n\t\t\t\tstart.index = index[1]\n\t\t\t} else break\t\t\t\n\t\t} else break\t\t\n\t}\n\treturn(model)\n}\n\n```", "```\n\n\t#*****************************************************************\n\t# Code Strategies that rebalance based on maximum deviation\n\t#****************************************************************** \n\n\t# rebalance to target.allocation when portfolio weights are 5% away from target.allocation\n\tmodels$smart5.all = bt.max.deviation.rebalancing(data, buy.hold, target.allocation, 5/100, 0) \n\n\t# rebalance half-way to target.allocation when portfolio weights are 5% away from target.allocation\n\tmodels$smart5.half = bt.max.deviation.rebalancing(data, buy.hold, target.allocation, 5/100, 0.5) \n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \t\t\t\t\t\t\n\t# Plot BuyHold, Years and Max Deviation Rebalancing Weights\t\n\tlayout(1:4)\n\tplotbt.transition.map(models$buy.hold$weight, 'buy.hold', spl('red,orange'))\n\t\tabline(h=50)\n\tplotbt.transition.map(models$smart5.all$weight, 'Max Deviation 5%, All the way', spl('red,orange'))\n\t\tabline(h=50)\n\tplotbt.transition.map(models$smart5.half$weight, 'Max Deviation 5%, Half the way', spl('red,orange'))\n\t\tabline(h=50)\n\tplotbt.transition.map(models$years$weight, 'years', spl('red,orange'))\n\t\tabline(h=50)\n\n\t# Plot Portfolio Turnover and Maximum Deviation for each Rebalancing method\n\tlayout(1:2)\n\tbarplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover', F)\n\tbarplot.with.labels(sapply(models, compute.max.deviation, target.allocation), 'Maximum Deviation from Target Mix')\n\n\t# Plot Strategy Statistics  Side by Side\n\tplotbt.strategy.sidebyside(models)\n\n```"]