["```\n#include <cstdlib>\n#include <iostream>\n#define BOOST_AUTO_TEST_MAIN\n#include <boost/test/unit_test.hpp>\n#include <boost/detail/lightweight_test.hpp>\n#include <ql/quantlib.hpp>\n#include <vector>\n#include <boost/math/distributions.hpp>\n#include <ql/instruments/bonds/fixedratebond.hpp> \n#include <ql/pricingengines/bond/bondfunctions.hpp>\n#include <boost/format.hpp>\n\nBOOST_AUTO_TEST_CASE(testCalculateBondDurationAndConvexity) {\nCalendar calendar = UnitedStates(UnitedStates::GovernmentBond);\nconst Natural settlementDays = 3;\nDate today = Date::todaysDate();\nDate issueDate = today;\nDate terminationDate = issueDate + Period(3, Years);\nRate rate = .03;\n\nInterestRate couponRate(.05, ActualActual(ActualActual::Bond), \nCompounded, Annual);\nReal faceValue = 100.0;\nstd::vector<InterestRate> coupons(3, couponRate);\nSchedule schedule(issueDate, terminationDate, Period(Annual), \ncalendar,\nUnadjusted, Unadjusted, DateGeneration::Backward, false);\nFixedRateBond fixedRateBond(settlementDays, faceValue, schedule, \ncoupons);\nboost::shared_ptr<YieldTermStructure> flatForwardRates(\nnew FlatForward(issueDate,rate, ActualActual(ActualActual::Bond), Compounded, Annual));\nHandle<YieldTermStructure> flatTermStructure(flatForwardRates);\nboost::shared_ptr<PricingEngine> bondEngine(\nnew DiscountingBondEngine(flatTermStructure));\nfixedRateBond.setPricingEngine(bondEngine);\n\n//calculate bond price\nReal price = fixedRateBond.NPV();\nstd::cout << \"Bond price: \" << price << std::endl;\n\n//calculate yield to maturity (YTM)/internal rate of return (IRR)\nReal ytm = fixedRateBond.yield(ActualActual(ActualActual::Bond), \nCompounded, Annual);\nstd::cout << \"yield to maturity: \" << ytm << std::endl;\n\n//calculate Macaulay duration\nInterestRate yield(ytm, ActualActual(ActualActual::Bond), \nCompounded, Annual);\nTime macDuration = BondFunctions::duration(fixedRateBond, yield, \nDuration::Macaulay, today);\nstd::cout << \"Macaulay duration: \" << macDuration << std::endl;\n\n//calculate modified duration\nTime modDuration = -1 * BondFunctions::duration(fixedRateBond, yield, \nDuration::Modified, today);\nstd::cout << \"Modified duration: \" << modDuration << std::endl;\n\n//calculate convexity\nReal convexity = BondFunctions::convexity(fixedRateBond, yield, \ntoday);\nstd::cout << \"Convexity: \" << convexity << std::endl;\n\n//estimate new bond price for an increase in interest rate of 1% \n//using modified duration\nReal priceDuration = price + price * (modDuration * .01);\nstd::cout << boost::format(\"Estimated bond price using only duration (rate up .01): %.2f \") %\npriceDuration << std::endl;\n\n//estimate new bond price for an increase in interest rate of 1% \n//using duration and convexity\nReal priceConvexity = price + price * (modDuration * .01 + (.5 * convexity * std::pow(.01, 2)));\nstd::cout << boost::format(\"Estimated bond price using duration \nand convexity (rate up .01): %.2f\") % priceConvexity << std::endl;\n\n}\n```"]