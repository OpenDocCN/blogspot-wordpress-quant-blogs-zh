["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\n\tdata <- new.env()\n\tgetSymbols('SPY', src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)\n\t\tdata$SPY = adjustOHLC(data$SPY, use.Adjusted=T)\t\t\t\t\t\t\t\n\tbt.prep(data)\n\n\t#*****************************************************************\n\t# Setup\n\t#****************************************************************** \t\t\n\tnperiods = nrow(data$prices)\n\n\tmodels = list()\n\n\trets = ROC(Ad(data$SPY))\n\t\trets[1] = 0\n\n\t# use 10 years: 1993:2002 for training\t\n\tin.sample.index = '1993::2002'\n\tout.sample.index = '2003::'\n\n\tin.sample = rets[in.sample.index]\n\tout.sample = rets[out.sample.index]\n\tout.sample.first.date = nrow(in.sample) + 1\n\n\t#*****************************************************************\n\t# Fit Model\n\t#****************************************************************** \t\t\n\tload.packages('RHmm')\t\n\tfit = HMMFit(in.sample, nStates=2)\n\n\t# find states\n\tstates.all = rets * NA\n\tstates.all[] = viterbi(fit, rets)$states\n\n\t#*****************************************************************\n\t# Code Strategies\n\t#****************************************************************** \n\tdata$weight[] = NA\n\t\tdata$weight[] = iif(states.all == 1, 0, 1)\n\t\tdata$weight[in.sample.index] = NA\n\tmodels$states.all = bt.run.share(data)\n\n\t# create plot\n\tplotbt.custom.report.part1(models) \n\n```", "```\n\n\t#*****************************************************************\n\t# Find problem - results are too good\n\t#****************************************************************** \t\t\n\t# The viterbi function need to see all data to compute the most likely sequence of states\n\t# http://en.wikipedia.org/wiki/Viterbi_algorithm\n\n\t# We can use expanding window to determine the states\n\tstates.win1 = states.all * NA\n\tfor(i in out.sample.first.date:nperiods) {\n\t\tstates.win1[i] = last(viterbi(fit, rets[1:i])$states)\n\t\tif( i %% 100 == 0) cat(i, 'out of', nperiods, '\\n')\n\t}\n\n\t# Or we can refit model over expanding window as suggested in the\n\t# Regime Shifts: Implications for Dynamic Strategies by M. Kritzman, S. Page, D. Turkington\n\t# Out-of-Sample Analysis, page 8\n\tinitPoint = fit$HMM\n\tstates.win2 = states.all * NA\n\tfor(i in out.sample.first.date:nperiods) {\n\t\tfit2 = HMMFit(rets[2:i], nStates=2, control=list(init='USER', initPoint = initPoint))\n\t\t\tinitPoint = fit2$HMM\n\t\tstates.win2[i] = last(viterbi(fit2, rets[2:i])$states)\n\t\tif( i %% 100 == 0) cat(i, 'out of', nperiods, '\\n')\n\t}\n\n\t#*****************************************************************\n\t# Plot States\n\t#****************************************************************** \t\t\t\n\tlayout(1:3)\n\tcol = col.add.alpha('white',210)\n\tplota(states.all[out.sample.index], type='s', plotX=F)\n\t\tplota.legend('Implied States based on all data', x='center', bty='o', bg=col, box.col=col,border=col,fill=col,cex=2)\n\tplota(states.win1[out.sample.index], type='s')\n\t\tplota.legend('Implied States based on rolling window', x='center', bty='o', bg=col, box.col=col,border=col,fill=col,cex=2)\n\tplota(states.win2[out.sample.index], type='s')\n\t\tplota.legend('Implied States based on rolling window(re-fit)', x='center', bty='o', bg=col, box.col=col,border=col,fill=col,cex=2)\n\n```", "```\n\n\t#*****************************************************************\n\t# Code Strategies\n\t#****************************************************************** \t\t\n\tdata$weight[] = NA\n\t\tdata$weight[] = iif(states.win1 == 1, 0, 1)\n\t\tdata$weight[in.sample.index] = NA\n\tmodels$states.win1 = bt.run.share(data)\n\n\tdata$weight[] = NA\n\t\tdata$weight[] = iif(states.win2 == 1, 0, 1)\n\t\tdata$weight[in.sample.index] = NA\n\tmodels$states.win2 = bt.run.share(data)\n\n\t#*****************************************************************\n\t# Create report\n\t#****************************************************************** \t\t\t\n\tplotbt.custom.report.part1(models) \n\n```"]