- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:56:53'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Liquidity Management Through Actors and Futures | Tales from a Trading Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2013/11/28/liquidity-management-through-actors-and-futures/#0001-01-01](https://mdavey.wordpress.com/2013/11/28/liquidity-management-through-actors-and-futures/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Based on the coolness of Typesafe‚Äôs recent [blog](http://typesafe.com/blog)
    postings on [akka](http://doc.akka.io/docs/akka/snapshot/scala/actors.html), and
    a little time late one day recently ‚Äì actually I think it was post midnight, but
    who‚Äôs counting.¬† I decided to take the standard liquidity management [high](http://wp.marketfactory.net/aggregator/)
    level [architecture](http://www.smart-trade.net/products/liquidityfx/), and implement
    the simple/basic flow using akka with [futures](http://doc.akka.io/docs/akka/snapshot/scala/futures.html).¬†
    Similar to the view provided by the recent Typesafe [survey](http://typesafe.com/blog/akka-survey-2013-and-roadmap-update),
    I failed to leverage [TestKit](http://doc.akka.io/docs/akka/current/scala/testing.html)
    üò¶
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ~ by mdavey on November 28, 2013.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Tags: [akka](https://mdavey.wordpress.com/tag/akka/)'
  prefs: []
  type: TYPE_NORMAL
