- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:33:37'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Lake Architecture: Stream Centric | Tales from a Trading Desk'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2016/04/26/data-lake-architecture-stream-centric/#0001-01-01](https://mdavey.wordpress.com/2016/04/26/data-lake-architecture-stream-centric/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Data Lake Architecture: Stream¬†Centric'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are numerous mays to create and feed your data lake. ¬†One theme that
    is particularly interesting leverages Apache Kafka, and is well documented in
    ‚ÄúPutting Apache Kafka To Use: A Practical Guide to Building a Stream Data [Platform](http://www.confluent.io/blog/stream-data-platform-1/)‚Äú.
    ¬†The article does a good job of explaining the ad-hoc road:'
  prefs: []
  type: TYPE_NORMAL
- en: ‚Äúpiping between systems and applications on an as needed basis and shoe-horned
    any asynchronous processing into request-response web services. ‚Äú
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Which turns into an interesting [diagram](http://cdn2.hubspot.net/hub/540072/file-3062870508-png/blog-files/data-flow-ugly.png)
    üôÇ
  prefs: []
  type: TYPE_NORMAL
- en: 'The article then goes onto Version 2, appropriately names ‚ÄúKafka stuff‚Äù which
    has an improved [architecture](http://cdn2.hubspot.net/hub/540072/file-3062870518-png/blog-files/stream_data_platform.png),
    with well defined flows and patterns ‚Äì ‚Äústream-centric data architecture‚Äù, and
    benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Integration**: The stream data platform captures streams of events or
    data changes and feeds these to other data systems such as relational databases,
    key-value stores, Hadoop, or the data warehouse.'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Stream processing**: It enables continuous, real-time processing and transformation
    of these streams and makes the results available system-wide.'
  prefs:
  - PREF_OL
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the case of leveraging [H2O](http://www.h2o.ai/), this offer the ability
    to leverage Flow through SparkingWater on top of Apache Spark and the Data Lake
    (HDFS), and also off Apache Kafka streaming using the H2O POJO‚Äôs, opening up the
    opportunity for real-time pushed business insight to the User Experience.
  prefs: []
  type: TYPE_NORMAL
- en: '[Both](http://www.confluent.io/blog/stream-data-platform-1/) [articles](http://www.confluent.io/blog/stream-data-platform-2/)
    are well worth a read.'
  prefs: []
  type: TYPE_NORMAL
- en: Curious if any readers have found an improved approach over Apache Kafka to
    solve the Data [Lake](http://searchbusinessanalytics.techtarget.com/feature/Building-a-data-lake-architecture-can-drag-unprepared-users-under)
    data integration problem, and likewise the Machine Learning solution.
  prefs: []
  type: TYPE_NORMAL
- en: ~ by mdavey on April 26, 2016.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Data](https://mdavey.wordpress.com/category/data/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Tags: [DataLake](https://mdavey.wordpress.com/tag/datalake/), [MachineLearning](https://mdavey.wordpress.com/tag/machinelearning/)'
  prefs: []
  type: TYPE_NORMAL
