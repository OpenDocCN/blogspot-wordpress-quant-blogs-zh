- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 06:46:11'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Introducing QuantLib: Black-Scholes and the Greeks | All things finance and
    technology…'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mhittesdorf.wordpress.com/2013/07/29/introducing-quantlib-black-scholes-and-the-greeks/#0001-01-01](https://mhittesdorf.wordpress.com/2013/07/29/introducing-quantlib-black-scholes-and-the-greeks/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As I wrote the title of this post, I couldn’t help but think of the classic
    Elton John song, Bennie and the Jets (cue music…) Bennie.. Bennie.. Bennie and
    the Je..e.ets. Elton John’s hit song was recorded in May of 1973\. The Black-Scholes
    model was first published in a 1973 paper titled “The Pricing of Options and Corporate
    Liabilities”. Elton John went on to become an international pop superstar while
    Myron Scholes and another key contributor to the development of the Black-Scholes
    equation, Robert Merton, went on to win the Nobel Prize in Economics. Maybe some
    musically inclined option quants can come up with a silly parody something like
    “Black-Scholes.. Black-Scholes.. Black-Scholes and the Gre..ee..eeks”.
  prefs: []
  type: TYPE_NORMAL
- en: My awful attempt at humor aside, it’s beyond dispute that the Black-Scholes
    equation revolutionized derivatives pricing and established Fischer Black, Myron
    Scholes and Robert Merton as the ‘rock stars’ of modern finance.
  prefs: []
  type: TYPE_NORMAL
- en: The Black-Scholes Equation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So let’s take a closer look at the Black-Scholes equation. First, it is important
    to understand the basic assumptions of the Black-Scholes model, which I’ve taken
    from the excellent book, “[Options, Futures and Other Derivatives](http://www.amazon.com/Options-Futures-Other-Derivatives-6th/dp/0131499084/ref=sr_1_3?s=books&ie=UTF8&qid=1375158629&sr=1-3&keywords=options+futures+and+other+derivatives)”,
    by John Hull:'
  prefs: []
  type: TYPE_NORMAL
- en: The underlying asset price follows a ‘random walk’ in accordance with a process
    known as Geometric Brownian Motion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shorts sales are permitted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No transaction costs are incurred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No dividends are paid prior to expiration of the option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security trading is continuous, with no jumps in the underlying asset price
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The risk-free interest rate, r, is constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first assumption leads to a model of stock price behavior that I briefly
    touched on in my last post in which the underlying asset’s return is assumed to
    be constant and normally distributed, the asset’s price is lognormally distributed
    and its volatility is constant. The discrete time version of the lognormal model
    of stock prices is described by the equation below, which is also the starting
    point for the derivation of the Black-Scholes differential equation, where delta
    S is the change in stock price over an instantaneous period of time, t, mu represents
    the underlying return, sigma its volatility and delta z is a normally distributed
    random (stochastic) variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![discretetimestockpricemodel](img/7ac4638b6e68058edaea8e3fd0012883.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/discretetimestockpricemodel1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to apply [Ito’s Lemma](http://en.wikipedia.org/wiki/It%C5%8D%27s_lemma),
    which describes how a function, f, of the underlying S and time t is related to
    changes in S and t.  Then a ‘riskless’ portfolio is formed consisting of a long
    position in the derivative and a short position in ‘delta’  units of the underlying
    (I’ll get to what delta means in a moment). This effectively cancels out the randomness
    of the underlying stochastic process and create an instantaneously riskless position.  
    The position is riskless only for an instant because the relationship between
    f, S and t is constantly changing as the market moves.  I won’t go into all the
    math, which is beyond the scope of this post, but the end result is the Black-Scholes
    differential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![bsmdiffequation](img/40983566590a5eea189dc5c44a299fff.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/bsmdiffequation.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, to solve for the value of a call and put, the appropriate boundary conditions
    must be used, which should be familiar from my last post as the *payoff* functions
    for a call and put respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a call, the boundary condition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![callboundary](img/81235ab043de47f40bbe3ff230ec83fb.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/callboundary.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a put, the boundary condition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![putboundary](img/9779a3d87b6fbc910b0c4207020a96a4.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/putboundary.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in the following equation for the value of a call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![callequation](img/1ca95c74e1126bf1ba5ffa9b24158507.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/callequation.jpg)and
    the value of a put:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![putequation](img/7e487047b9bd9d6829eaf8827adf2645.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/putequation.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'where d1 and d2 are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![d1andd2](img/40c4fb7e4ac6f5f92518defa68da7246.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/d1andd2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: and N is the normal cumulative probability density function. As such, N(x) is
    the probability that a normally distributed random variable is less than x.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate how these equations are used in practice to calculate the value
    of a call and put, I’ve uploaded a spread sheet to my Box account at [https://app.box.com/s/iqekbg6phhf9m23tuzki](https://app.box.com/s/iqekbg6phhf9m23tuzki)
    .  A screen shot is below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![bscalc](img/be2f9b110e31136ef541b898cd7abc3f.png)](https://mhittesdorf.wordpress.com/wp-content/uploads/2013/07/bscalc.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that N(x) is implemented in LibreOffice (and Excel) as the function *normsdist.*
    Also you can see that the call and put values agree with those from my previous
    post.
  prefs: []
  type: TYPE_NORMAL
- en: The Greeks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So let’s move on to the second part of this post, in which I’ll introduce and
    show how to calculate the *Greeks*.  In the context of option valuation, the Greeks
    refer to a standard set of option sensitivity measures.   They are:'
  prefs: []
  type: TYPE_NORMAL
- en: Delta (df/dS) – the change in the value of an option (f) given a one point change
    in the price of the underlying (S).  Delta is defined as the first derivative
    of f with respect to S.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gamma (d2f/d2S) – the change in the delta of an option given a one point change
    in the price of the  underlying (S).  Gamma is defined as the second derivative
    of f with respect to S.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theta (df/dt) – the change in the value of an option (f) given a 1 day decrease
    in the option’s time to maturity (t).  Theta is often referred to as the decay
    rate of an option. It is defined as the first derivative of f with respect to
    t.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vega (df/dsigma) – the change in the value of an option (f) given a one point
    change in the volatility (sigma).  Vega is defined as the first derivative of
    f with respect to sigma.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rho (df/dr) – the change in the value of an option (f) given a one basis point
    change in the risk-free rate (r).  Rho is defined as the first derivative of f
    with respect to r.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In options trading, the Greeks are critical to managing the risk of an options
    portfolio. For example, vega can be used to measure the PnL impact of a change
    in market volatility.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, as most option traders seek to limit their exposure to movements
    in the underlying, the delta of an option is used as a hedge ratio.  To achieve
    a delta neutral position, a trader must offset his delta by buying (selling) delta
    units of the underlying if the trader’s option delta is negative (positive).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, by virtue of the fact that delta and gamma are the first and second derivatives
    of the option valuation function (f) with respect to S, the new value of an option
    can be estimated by means of a [Taylor series expansion](http://en.wikipedia.org/wiki/Taylor_expansion). 
    As such, delta and gamma are similar in many respects to duration and convexity
    in the fixed income domain (see my March 2013 post,  Introducing QuantLib: Duration
    and Convexity).'
  prefs: []
  type: TYPE_NORMAL
- en: So now that we’ve covered all the key background concepts related to the valuation
    of options with Black-Scholes and the measurement of option price sensitivity, 
    I’ll show how easy it is to value an option in QuantLib using the [BlackScholesCalculator](http://quantlib.org/reference/class_quant_lib_1_1_black_scholes_calculator.html)
    class. This class, in keeping with the Black-Scholes assumptions above, takes
    a constant volatility (sigma) and rate (r) as input along with the underlying’s
    price (S), the option’s strike (K) and the option’s time to maturity (t).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the original, classic Black-Scholes model, the QuantLib BlackScholesCalculator
    also supports an optional dividend yield.   Also, a subtle quirk of the BlackScholesCalculator
    implementation to watch out for is that the constructor expects sigma to be multiplied
    by the square root of time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When run, the code produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Value of 110.0 call is 2.6119'
  prefs: []
  type: TYPE_NORMAL
- en: Delta of 110.0 call is 0.3095
  prefs: []
  type: TYPE_NORMAL
- en: Gamma of 110.0 call is 0.0249
  prefs: []
  type: TYPE_NORMAL
- en: Vega of 110.0 call is 0.2493
  prefs: []
  type: TYPE_NORMAL
- en: Theta of 110.0 call is -0.0160
  prefs: []
  type: TYPE_NORMAL
- en: Value of 110.0 call (spot up $1) is 2.9340
  prefs: []
  type: TYPE_NORMAL
- en: Value of 110.0 call (spot up $1) estimated from delta is 2.9214
  prefs: []
  type: TYPE_NORMAL
- en: Value of 110.0 call (spot up $1) estimated from delta and gamma is 2.9339
  prefs: []
  type: TYPE_NORMAL
- en: Value of 110.0 call (sigma up 0.01) is 2.8631
  prefs: []
  type: TYPE_NORMAL
- en: Value of 110.0 call (sigma up 0.01 estimated from vega) is 2.8612`
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, for small changes in the Black-Scholes input parameters, the
    Greeks can accurately estimate the new price of the option.   For larger changes
    in parameter values or when needing to consider the combined effect of multiple
    parameter changes (often called a *scenario*), it is necessary to revalue all
    of the options in a portfolio. This can be expensive and time consuming depending
    on the performance of the option pricing code, the number of options and the complexity
    of the scenario.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I think we’ve covered all the essentials of computing option
    values and sensitivities with QuantLib’s BlackScholesCalculator class. I hope
    you enjoyed my latest ‘Introducing QuantLib’ post. Until next time, have fun with
    QuantLib!
  prefs: []
  type: TYPE_NORMAL
