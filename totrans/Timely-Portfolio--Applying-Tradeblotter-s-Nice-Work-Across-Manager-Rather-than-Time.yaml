- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 15:01:44'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Timely Portfolio: Applying Tradeblotter’s Nice Work Across Manager Rather than
    Time'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://timelyportfolio.blogspot.com/2013/01/applying-tradeblotters-nice-work-across.html#0001-01-01](http://timelyportfolio.blogspot.com/2013/01/applying-tradeblotters-nice-work-across.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ever since I saw the very helpful distribution page first presented in [Download
    and parse EDHEC hedge fund indexes](http://tradeblotter.wordpress.com/2012/06/04/download-and-parse-edhec-hedge-fund-indexes/),
    I have used it liberally.  Now that it is has been functionalized ([Visually Comparing
    Return Distributions](http://tradeblotter.wordpress.com/2013/01/18/visually-comparing-return-distributions/)),
    I thought I would amend it slightly to compare distributions of returns across
    managers rather than time.  As a simple example, I compared the mutual funds offered
    by [Vanguard](https://personal.vanguard.com/us/funds/vanguard/all?reset=true&sort=name&sortorder=asc)
    and [Pimco](http://investments.pimco.com/Products/pages/PlOEF.aspx?Level1=ulProducts&Center=ulProducts&Level2=liulProductsMutualFunds). 
    This amended function might be very helpful for internal performance monitoring
    of separately managed accounts across external or internal money managers.  Also,
    for the purposes of composite dispersion, this might be a good beginning summary
    look.
  prefs: []
  type: TYPE_NORMAL
- en: I like what I did in [Pretty Correlation Map of PIMCO Funds](http://timelyportfolio.blogspot.com/2012/06/pretty-correlation-map-of-pimco-funds.html),
    but this time I wanted to get the performance data directly in a table rather
    than calculating performance from multiple calls to the getSymbols function. 
    R can easily load these tables, but I got lazy and imported the tables into Excel
    [https://docs.google.com/file/d/0ByeeEIaS0AOsRE1OeWk2VmFFVUU/edit](https://docs.google.com/file/d/0ByeeEIaS0AOsRE1OeWk2VmFFVUU/edit
    "https://docs.google.com/file/d/0ByeeEIaS0AOsRE1OeWk2VmFFVUU/edit") and then cleaned
    them up with some old fashioned pivot tables.  When finished data munging, I copied
    and pasted into a data sheet to save as .csv (could have used R again to get the
    data directly from Excel), so I could publish through [Google Docs](https://docs.google.com/spreadsheet/pub?key=0AieeEIaS0AOsdDFET0ZmbTBKWDNoMnZrZ0oySWRia1E&single=true&gid=0&output=csv)
    for anyone that wanted to replicate what I have done.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I’d like to incorporate another fine piece of work [Tracking Number of
    Historical Clusters](http://systematicinvestor.wordpress.com/2013/01/27/tracking-number-of-historical-clusters/)
    into this analysis, but I’ll save that for another post.
  prefs: []
  type: TYPE_NORMAL
- en: '[Code from Gist:](https://gist.github.com/4658217)'
  prefs: []
  type: TYPE_NORMAL
