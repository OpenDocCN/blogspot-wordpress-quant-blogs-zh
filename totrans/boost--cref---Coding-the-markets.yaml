- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 19:42:47'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: boost::cref | Coding the markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://etrading.wordpress.com/2008/05/21/boostcref/#0001-01-01](https://etrading.wordpress.com/2008/05/21/boostcref/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: boost::cref
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: May 21, 2008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’m continuing to discover the wonder of boost. Yesterday it was [boost::lexical_cast()](http://www.boost.org/doc/libs/1_35_0/libs/conversion/lexical_cast.htm),
    a very neat way to do those peskly int to string conversions. Today, it’s [boost::cref()](http://www.boost.org/doc/libs/1_35_0/doc/html/ref.html).
    Why did I need it ?  I’m using [boost::bind()](http://www.boost.org/doc/libs/1_35_0/libs/bind/bind.html)
    to marshall parameters for dispatch across a thread boundary. All well and good
    til one of the parameters inherited from boost::noncopyable. Wrap the noncopyable
    in a [boost::cref()](http://www.boost.org/doc/libs/1_35_0/doc/html/ref.html) invocation,
    and all is well again.
  prefs: []
  type: TYPE_NORMAL
- en: Apparently, boost::cref converts the reference to a pointer under the covers.
    Ironic, non ?
  prefs: []
  type: TYPE_NORMAL
