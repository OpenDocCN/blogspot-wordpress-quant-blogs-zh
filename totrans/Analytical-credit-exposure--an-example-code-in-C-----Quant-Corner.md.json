["```\n// Analytical_Credit_Exposure.hpp\n\n// Édouard Tallent @ TaGoMa.Tech\n// February 2013\n// QuantCorner: https://quantcorner.wordpress.com\n\n#ifndef ANALYTICAL_CREDIT_EXPOSURE\n#define ANALYTICAL_CREDIT_EXPOSURE\n\nclass AnalyticalCE\n{\npublic:\n    double EE() const;\n    double PFE() const;\n    double EEThreshold() const;\n    double PFEThreshold() const;\n\npublic:\n    double mu;      // expected MtM\n    double sig;     // s.d of the MtM\n    double alpha;   // confidence level\n    double t;       // threshold variable\n\npublic:\n    AnalyticalCE(); // Default constructor\n    AnalyticalCE(const AnalyticalCE& ace);  // Copy constructor\n    virtual ~AnalyticalCE();    // Virtual destructor\n    AnalyticalCE& operator = (const AnalyticalCE& cred);    // Assignment operator \n\n};\n#endif\n```", "```\n// Analytical_Credit_Exposure.cpp\n\n// Édouard Tallent @ TaGoMa.Tech\n// February 2013\n// QuantCorner: https://quantcorner.wordpress.com\n\n#include <cmath>\n#include <boost\\math\\distributions\\normal.hpp>\n#include \"Analytical_Credit_Exposure.hpp\"\n\ndouble AnalyticalCE::EE() const\n{\n    return mu * boost::math::cdf(boost::math::normal(), mu/sig) +\n        sig * boost::math::pdf(boost::math::normal(), mu/sig);\n}\n\ndouble AnalyticalCE::PFE() const\n{\n    return mu + boost::math::quantile(boost::math::normal(), alpha) * sig;\n}\n\ndouble AnalyticalCE::EEThreshold() const\n{\n    return mu * (boost::math::cdf(boost::math::normal(), mu/sig) -\n        boost::math::cdf(boost::math::normal(), (mu - t)/sig)) +\n        sig * (boost::math::pdf(boost::math::normal(), mu/sig) -\n        boost::math::pdf(boost::math::normal(), (mu - t)/sig)) +\n        t * boost::math::cdf(boost::math::normal(), (mu - t)/sig);\n}\n\ndouble AnalyticalCE::PFEThreshold() const\n{\n    return std::min(t , mu + boost::math::quantile(boost::math::normal(), alpha) * sig);\n}\n\nAnalyticalCE::AnalyticalCE() : mu(0.0), sig(20.0), alpha(0.95), t(0.10)\n{\n    // Constructor initializer\n}\n\nAnalyticalCE::AnalyticalCE(const AnalyticalCE& ace) : mu(ace.mu),\n    sig(ace.sig), alpha(ace.alpha), t(ace.t)\n{\n    // Copy constructor\n}\n\nAnalyticalCE::~AnalyticalCE()\n{\n    // Destructor\n}\n\nAnalyticalCE& AnalyticalCE::operator = (const AnalyticalCE& cred)\n{\n    if (this == &cred)\n        return *this;\n}\n```", "```\n// Analytical_Credit_Exposure_test.cpp\n\n// Édouard Tallent @ TaGoMa.Tech\n// February 2013\n// QuantCorner: https://quantcorner.wordpress.com\n\n#include \"Analytical_Credit_Exposure.hpp\"\n#include <iostream>\n\nint main()\n{\n    try\n    {\n        // Creation of an AnalyticalCE object\n        AnalyticalCE risk;\n        risk.mu = 0.00;\n        risk.sig = 0.20;\n        risk.alpha = 0.90;\n        risk.t = 0.10;\n\n        // Print out to the console\n        std::cout << \"Expected exposure:\\t\\t\\t\\t\" << risk.EE() << std::endl;\n        std::cout << \"Potential future exposure:\\t\\t\\t\" << risk.PFE() << std::endl;\n        std::cout << \"Expected exposure for a given threshold:\\t\" << risk.EEThreshold() << std::endl;\n        std::cout << \"Potential future exposure for a given threshold:\" << risk.PFEThreshold() << std::endl;\n    }\n    catch(std::exception& e)\n    {\n        std::cout << \"Error Message:\\t\" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```"]