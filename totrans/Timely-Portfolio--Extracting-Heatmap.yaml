- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 14:49:45'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Timely Portfolio: Extracting Heatmap'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://timelyportfolio.blogspot.com/2015/03/extracting-heatmap.html#0001-01-01](http://timelyportfolio.blogspot.com/2015/03/extracting-heatmap.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Inspired by this tweet, I wanted to try to do something similar in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, I had this old post [Chart from R + Color from Javascript](http://timelyportfolio.blogspot.com/2014/07/chart-from-r-color-from-javascript.html)
    to serve as a reference, and I got lots of help from these links.
  prefs: []
  type: TYPE_NORMAL
- en: In a couple of hours, I got this crude but working [rendering](http://timelyportfolio.github.io/rCharts_color_thief/index_jsfeat.html)
    complete with a d3.js brush to get the scale.  Then since this is sort of a finance
    blog, I imagined we found an old correlation heatmap like the one in [Pretty Correlation
    Map of PIMCO Funds](http://timelyportfolio.blogspot.com/2012/06/pretty-correlation-map-of-pimco-funds.html). 
    Although, we could guess at the correlation values, I thought it would be a lot
    more fun to get live values.  Try it out below.
  prefs: []
  type: TYPE_NORMAL
- en: Brush over the scale / legend
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input scale min and max
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mouseover color areas in the chart
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As I said, it is rough, but it works. It needs a little UI work :)
  prefs: []
  type: TYPE_NORMAL
