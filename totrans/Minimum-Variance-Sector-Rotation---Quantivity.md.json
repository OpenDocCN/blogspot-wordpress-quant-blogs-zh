["```\n\nrequire(xts)\nrequire(tseries)\nrequire(tawny)\n\n# model parameters\ns <- \"2003-01-01\"\nspyS <- \"2004-01-01\"\ne <- \"2011-01-01\"\nq <- \"AdjClose\"\nusEquities <- c(\"XLB\", \"XLE\", \"XLF\", \"XLK\", \"XLI\", \"XLP\", \"XLU\", \"XLV\", \"XLY\")\nusEquityNames <- c(\"materials\", \"energy\", \"financials\", \"tech\", \"industrial\", \"staples\", \"utilities\", \"healthcare\", \"discretionary\")\ncolors <- c('black', 'red', 'blue', 'green', 'orange', 'purple', 'yellow', 'brown', 'pink');\nusClose <- as.xts(data.frame(lapply(usEquities, get.hist.quote, start=s, end=e, quote=q)))\nusRets <- xts(data.frame(lapply(log(usClose), diff)), order.by=index(usClose))[2:nrow(usClose)]\ncolnames(usRets) <- usEquities\nspy <- get.hist.quote(\"SPY\", start=spyS, end=e, quote=q)\n\n# annualize trade returns and calculate MVP weights\nannualNames <- array(c(\"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"))\nannualReturns <- do.call(rbind, sapply(annualNames, function (yr) { usRets[yr] }))\nannualWeights <- t(sapply(c(1:length(annualNames)), function(i) { minvar(annualReturns[annualNames[i]]) } ))\ncolnames(annualWeights) <- usEquities\nrownames(annualWeights) <- annualNames\nannualTradeRets <- matrix(vapply(c(1:(nrow(annualNames)-1)), function (i) { r <- cumsum(annualReturns[annualNames[i+1]] %*% annualWeights[i,]); r[length(r)] }, -100))\ndailyPnL <- do.call(rbind, sapply(c(1:(nrow(annualWeights)-1)), function (i) { matrix(annualReturns[annualNames[i+1]] %*% annualWeights[i,]) }))\n\n# plot longitudinal evolution of pca component variance\npcaStds <- do.call(cbind, lapply(annualNames, function(yr) { sdev <- princomp(covmat=cov.shrink(annualReturns[yr]))$sdev; sdev^2/sum(sdev^2) }))\ncolnames(pcaStds) <- annualNames\npcaStdMeans <- matrix(rowMeans(pcaStds))\ndemeanedPcaStds <- sweep(pcaStds, 1, rowMeans(pcaStds), \"-\")\nplot(pcaStds[1,], ylim=range(pcaStds), type='l', xaxt=\"n\", xlab=\"Year\", ylab=\"Proportion of Variance\", main=\"Longitudinal PCA Variance Decomposition by Component\")\nlapply(c(2:5), function (i) { lines(pcaStds[i,], type='l', col=colors[i])})\naxis(1, 1:nrow(annualNames), annualNames)\nlegend(.45,legend=rownames(pcaStds)[1:5], fill=c(colors[1:5]), cex=0.5)\n\n# plot sector returns\npar(mfrow=c(3,3))\nsapply(c(1:(ncol(usRets))), function (i) { plot(cumsum(usRets[,i]), type='l', xlab=\"\", ylab=\"Return\", main=format(usEquityNames[i])) })\n\n# plot longitudinal annual weights\nplot(annualWeights[,1], ylim=range(annualWeights), type='o', ylab=\"Weight\", xlab=\"Year\", xaxt=\"n\", main=\"Annualized Minimum Variance Sector Weights\", col=colors[1])\naxis(1, 1:nrow(annualWeights), rownames(annualWeights))\nfor (i in c(2:ncol(annualWeights))) {\nlines(annualWeights[,i], col=colors[i], type='o')\n}\nlegend(-.4,legend=usEquityNames, fill=c(colors), cex=0.5)\n\n# plot cumulative daily returns\npar(mfrow=c(3,3))\nsapply(c(1:(nrow(annualWeights)-1)), function (i) { plot(cumsum(annualReturns[annualNames[i+1]] %*% annualWeights[i,]), type='l', xlab=\"Trading Day\", ylab=\"Return\", main=format(annualNames[i+1])) })\n\n# plot daily PnL\ncumDailyPnL <- cumsum(dailyPnL)\ncumSpy <- cumsum(diff(log(coredata(spy))))\nmaxRange <- max(range(cumDailyPnL), range(cumSpy))\nminRange <- min(range(cumDailyPnL), range(cumSpy))\nplot(cumDailyPnL, type='l', xlab=\"Trading Day\", ylab=\"Return\", main=\"Annualized Minimum Variance Sector Strategy P&L\", ylim=c(minRange, maxRange))\nlines(cumSpy, type='l', col='red')\nlegend(.6,legend=c(\"MVP\",\"SPY\"), fill=c(\"black\", \"red\"), cex=0.5)\naxis(1,index(usClose))\n\n# print strategy summary statistics\nplSummary(dailyPnL)\n\n# function to generat weights for MVP from a return series\nminvar <- function(rets) {\n  N <- ncol(rets)\n  zeros <- array(0, dim = c(N,1))\n  aMat <- t(array(1, dim = c(1,N)))\n  res <- solve.QP(cov.shrink(rets), zeros, aMat, bvec=1, meq = 1)\n  return (res$solution)\n}\n\n# function to pretty print strategy statistics\nplSummary <-function(dailyPnL)\n{\n \tcumDailyPnL <- cumprod(1 + dailyPnL) - 1\n\tcat(\"Max drawdown:\", (maxdrawdown(dailyPnL)$maxdrawdown * 100), \"%\\n\")\n\tcat(\"Std dev:\", sd(dailyPnL), \"\\n\")\n\tcat(\"Sharpe:\", sharpe(cumDailyPnL), \"\\n\")\n\twin <- mean(ifelse(dailyPnL > 0, 1, 0))\n\tcat(\"Wins:\", (win*100), \"%\\n\")\n\tcat(\"Losses:\", ((1-win)*100), \"%\\n\")\n\tcat(\"Average Win:\",(mean(ifelse(dailyPnL > 0, dailyPnL, 0)) * 100), \"%\\n\")\n\tcat(\"Average Loss:\",(mean(ifelse(dailyPnL < 0, dailyPnL, 0)) * 100), \"%\\n\")\n}\n\n```"]