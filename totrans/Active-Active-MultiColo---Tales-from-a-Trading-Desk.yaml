- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:37:02'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Active/Active MultiColo | Tales from a Trading Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mdavey.wordpress.com/2015/12/15/activeactive-multicolo/#0001-01-01](https://mdavey.wordpress.com/2015/12/15/activeactive-multicolo/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Active/Active MultiColo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Great [presentation](http://www.infoq.com/presentations/linkedin-scalability-arch)¬†from¬†Erran
    Berger,¬†Head of Content Engineering at LinkedIn. ¬†Discussion centres around stream
    processing, personal data and cache invalidation & replication conflicts. ¬†Take
    aways:'
  prefs: []
  type: TYPE_NORMAL
- en: Kafka ‚Äì data is replicated (best and worst feature because it causes re-processing
    of messages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kafka and DB replication turned out not to be the LinkedIn solution ‚Äì due to
    duplication.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution was to process user notifications in the data centre in which the
    user is attached too via a sticky routing service. ¬†Each data centre has a queue
    to route messages to other data centres.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Process Kafka messages only once, else you‚Äôll go down a painful road üôÇ
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replicate data only as required. ¬†Personal data doesn‚Äôt need to live everywhere
    in LinkedIn. ¬†Profile data does live everywhere.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Router service decide which DB is accessed in which data centre using URN‚Äôs
    as the routing payload, and a catalog held in a DB for route the personal data
    request to the correct DB to retrieve the mailbox.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data centre connectivity needs to be low latency to aid this solution
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DB is shard (1000‚Äôs) for the 95 TeraBytes üôÇ
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache invalidators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of LinkedIn, the cache invalidator listens to DB writes to invalidate
    the cache, leveraging the DB [replication](https://engineering.linkedin.com/data-replication/open-sourcing-databus-linkedins-low-latency-change-data-capture-system)
    across data centres
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Conflicts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soft deletes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom conflict resolution if you can‚Äôt resolve in the data model/actors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ~ by mdavey on December 15, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: Posted in [Data](https://mdavey.wordpress.com/category/data/)
  prefs: []
  type: TYPE_NORMAL
