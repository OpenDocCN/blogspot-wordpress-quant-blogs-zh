["```\n#include <ql/quantlib.hpp>\n\nusing namespace QuantLib;\n\nint main(int, char* []) {\n\n// date set up\nCalendar calendar = TARGET();\nDate todaysDate(27, Jan, 2011);\nDate settlementDate(27, Jan, 2011);\nSettings::instance().evaluationDate() = todaysDate;\n\n// option parameters\nOption::Type type(Option::Call);\nReal stock = 47;\nReal strike = 40;\nSpread dividendYield = 0.00;\nRate riskFreeRate = 0.05;\nVolatility volatility = 0.20;\nDate maturity(27, May, 2011);\nDayCounter dayCounter = Actual365Fixed();\n\nboost::shared_ptr<Exercise> europeanExercise(new EuropeanExercise(maturity));\n\nHandle<Quote> underlyingH(boost::shared_ptr<Quote>(new SimpleQuote(stock)));\n\n// bootstrap the yield/dividend/vol curves\nHandle<YieldTermStructure> flatTermStructure(boost::shared_ptr<YieldTermStructure>(\n\tnew FlatForward(\n\tsettlementDate,\n\triskFreeRate,\n\tdayCounter)));\n\nHandle<YieldTermStructure> flatDividendTS(boost::shared_ptr<YieldTermStructure>(\n\tnew FlatForward(settlementDate,\n\tdividendYield,\n\tdayCounter)));\n\nHandle<BlackVolTermStructure> flatVolTS(boost::shared_ptr<BlackVolTermStructure>(\n\tnew BlackConstantVol(\n\tsettlementDate,\n\tcalendar,\n\tvolatility,\n\tdayCounter)));\n\nboost::shared_ptr<StrikedTypePayoff> payoff(\n\tnew PlainVanillaPayoff(\n\ttype,\n\tstrike));\n\nboost::shared_ptr<BlackScholesMertonProcess> bsmProcess(\n\tnew BlackScholesMertonProcess(\n\tunderlyingH,\n\tflatDividendTS,\n\tflatTermStructure,\n\tflatVolTS));\n\n// our option is European-style\nVanillaOption europeanOption(\n\tpayoff,\n\teuropeanExercise);\n\n// computing the option price with the analytic Black-Scholes formulae\neuropeanOption.setPricingEngine(boost::shared_ptr<PricingEngine>(\n\tnew AnalyticEuropeanEngine(\n\tbsmProcess)));\n\n// outputting\nstd::cout << \"Option type = \" << type << std::endl;\nstd::cout << \"Maturity = \" << maturity << std::endl;\nstd::cout << \"Stock price = \" << stock << std::endl;\nstd::cout << \"Strike = \" << strike << std::endl;\nstd::cout << \"Risk-free interest rate = \" << io::rate(riskFreeRate) << std::endl;\nstd::cout << \"Dividend yield = \" << io::rate(dividendYield) << std::endl;\nstd::cout << \"Volatility = \" << io::volatility(volatility) << std::endl << std::endl;\nstd::cout<<\"European Option value = \" << europeanOption.NPV() << std::endl;\nreturn 0;\n}\n```"]