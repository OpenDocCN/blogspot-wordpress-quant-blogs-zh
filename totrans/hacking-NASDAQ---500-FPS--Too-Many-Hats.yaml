- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-13 00:03:51'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-13 00:03:51
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: Too Many Hats'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NASDAQ黑客 @ 500FPS：太多的帽子
- en: 来源：[http://hackingnasdaq.blogspot.com/2012/03/too-many-hats.html#0001-01-01](http://hackingnasdaq.blogspot.com/2012/03/too-many-hats.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2012/03/too-many-hats.html#0001-01-01](http://hackingnasdaq.blogspot.com/2012/03/too-many-hats.html#0001-01-01)
- en: Another week with consistent alpha proving elusive. Got most of the tech problems
    got sorted out which left only math problems. The math unfortunately is not so
    easy to fix. Was running a few incarnations of a sub tick arbitrage strategy that unfortunately the
    combination of comissions/rebates/latency/law of large numbers means it will never
    make money/inconsistent or not enough to cover the fixed infra costs. So hit the
    puke point, taken the stop loss and building a new strategy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个周围并没有稳定的阿尔法表现。大部分技术问题都解决了，只剩下数学问题。遗憾的是数学并不容易解决。我运行了几种子tick套利策略的变体，遗憾的是佣金/折扣/延迟/大数定律的组合意味着它永远不会赚钱/不一致或不足以覆盖固定的基础设施成本。所以我达到了崩溃点，接受了止损，并正在构建一个新的策略。
- en: Whats interesting(and frustrating) is I can now build a variety of profitable back
    tested strategies fairly easily, which was certainly not the case a few months
    ago. Yet when running it live it fails to match the model. The reason? many. but
    to a large extent I didnt know alot of the characteristics/behaviour when interacting
    with a real market/real broker which significantly eroded the edge.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的地方（也令人沮丧的）是，我现在可以相当容易地构建多种有利可图的经过回测的策略，而几个月前显然不是这种情况。但在实际运行时，它无法与模型匹配。原因？很多。但大部分是我不了解与真实市场/真实经纪打交道时的特性/行为，这显着削弱了优势。
- en: My general process for strategy development goes like
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一般策略开发过程如下
- en: Stage 1) "back of the envelope mode" this is quickly test some basic assumptions
    with level 1 data or medium granularity bars or both. At this point don`t care
    about latency or even the queue and commissions/rebates arent priced in. The goal
    here is to check the "edge" is there and if so, it needs to be sufficiently strong
     & consistent.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 1阶段）"信封背面模式"，这是快速测试一些基本假设，使用一级数据或中等粒度条或两者。在这一点上，不关心延迟甚至队列和佣金/折扣不包括在内。这里的目标是检查“边缘”是否存在，如果存在，它需要足够强大和一致。
- en: Stage 2) Add the queue/comissions/rebates/tax and then trade & quote data. At
    this point everything is run in lock step. e.g. one step == one message. Find
    this is where I most of the time. Whats good about this stage is, its really easy
    to change the strategy add new things, remove things do all sorts of random stuff
    to it and not have to worry about any of the order entry/market data details,
    e.g. order/cancel reject handling, re-priced, latency, etc etc
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2阶段）添加队列/佣金/折扣/税收然后交易和报价数据。在这一点上，一切都是同步运行的。例如，一步等于一个消息。我大部分时间都在这个阶段。这个阶段好的地方是，非常容易改变策略，添加新东西，删除东西，做各种各样的随机操作，并且不必担心任何下单/市场数据的细节，例如下单/取消拒绝处理，重新定价，延迟等等。
- en: Stage 3) Code it up as a a real strategy. This means real async order entry/market
    data and you now have a time constraint - if a tick takes 1sec to crunch then
    you will get run-over. The environment here is a fully simulated exchange both
    order entry & market data that is replaying historical. This can be fiddly but
    your just re-coding up Stage 2) which is fairly straight forward and the environment you
    already coded thus dosent take very long.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 3阶段）将其编码成一个真正的策略。这意味着实际异步的下单和市场数据，现在你有一个时间约束 - 如果一个tick花费1秒来计算，那么你会失败。这里的环境是一个完全模拟的交易所，既有下单也有市场数据，正在回放历史数据。这可能有点麻烦，但你只是重新编码第2阶段，这是相当直接的，并且你已经编码的环境因此不会花费很长时间。
- en: Stage 4) Run it live against the real exchange. My setup makes launching a strategy
    simply executing a program on the command line, theres no monolithic gui/master
    program/program within program. All a strategy does is talk to shared memory.
    Thus can run it one shot at a time, or continuously, have scripts calling scripts
    call the strat, etc etc the usual linux scriptfu. From here its easy to monitor
    and watch, tune and fix/debug. The key here is to make it match the theoretical/backtested
    model or change the theoretical model to match the observed behaviour.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 4阶段）对真正的交易所实施实时运行。我的设置使得启动策略只需在命令行上执行程序，没有庞大的gui/主程序/嵌套程序。所有策略都是通过共享内存进行通信。因此可以一次性运行它，也可以连续不断地运行，有脚本调用脚本调用策略，等等，通常的linux脚本操作。从这里很容易进行监视，调整和修复/调试。关键在于使其与理论回测模型相匹配，或者改变理论模型以匹配观察到的行为。
- en: '... and this is where im at. Sucks pretty badly spent so much time and effort
    so far without any real success. Had a few highs tho, turning my position over
    a few times was really cool! as was sending half a million dollars worth of orders
    to the market but sadly, still missing something, still in the red and the  20H
    days are catching up.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '...这就是我的处境。花了这么多时间和精力，到目前为止都没有真正的成功，感觉相当糟糕。虽然也有一些收获，几次成功翻转我的头寸真的很酷！还有向市场发送了价值半百万美元的订单，但遗憾的是，仍然缺少什么，仍然亏损，而且连续工作20个小时的日子正在追上我。'
- en: the quest continues...
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 探索还在继续...
