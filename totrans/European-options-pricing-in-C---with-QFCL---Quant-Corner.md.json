["```\n// Ã‰douard Tallent @ TAGOMA.tech (July, 2012)\n// GBM_Vanilla Implementation from the QFCL project, http://fcl.wilmott.com/\n// Header files core.hpp and gbm_vanilla.hpp coded by M.A. (Thijs) van den Berg (2011), http://sitmo.com/\n\n#include<iostream>\n#include<cmath>\n#include \"core.hpp\"\n#include \"gbm_vanilla.hpp\"\n\nusing namespace std;\nusing namespace bmlib;\n\nvoid Call_Option (\n    double S,\n    double Y,\n    double v,\n    double r,\n    double X,\n    double t){\n        cout << \"\\n\\nCall price:\\t\" << gbm_vanilla_call_price(S, Y, v, r, X, t) << endl;\n        cout << \"Delta:\\t\\t\" << gbm_vanilla_call_delta(S, Y, v, r, X, t) << endl;\n        cout << \"Gamma:\\t\\t\" << gbm_vanilla_gamma(S, Y, v, r, X, t) << endl;\n        cout << \"Theta:\\t\\t\" << gbm_vanilla_call_theta(S, Y, v, r, X, t) << endl;\n        cout << \"Vega:\\t\\t\" << gbm_vanilla_vega(S, Y, v, r, X, t) << endl;        \n        cout << \"Rho:\\t\\t\" << gbm_vanilla_call_rho(S, Y, v, r, X, t) << endl;\n\n}\n\nvoid Put_Option (\n    double S,\n    double Y,\n    double v,\n    double r,\n    double X,\n    double t){\n        cout << \"\\n\\nPut price:\\t\" << gbm_vanilla_put_price(S, Y, v, r, X, t) << endl;\n        cout << \"Delta:\\t\\t\" << gbm_vanilla_put_delta(S, Y, v, r, X, t) << endl;\n        cout << \"Gamma:\\t\\t\" << gbm_vanilla_gamma(S, Y, v, r, X, t) << endl;\n        cout << \"Theta:\\t\\t\" << gbm_vanilla_put_theta(S, Y, v, r, X, t) << endl;\n        cout << \"Vega:\\t\\t\" << gbm_vanilla_vega(S, Y, v, r, X, t) << endl;        \n        cout << \"Rho:\\t\\t\" << gbm_vanilla_put_rho(S, Y, v, r, X, t) << endl;\n\n}\n\nint main(int argc, char* argv[])\n{\n\n    bool end = false;\n    do\n    {\n    try{\n\n        // Variable initialization\n        char option_type;\n        double S;\n        double Y;\n        double v;\n        double r;\n        double X ;\n        double t ;\n\n        // Console inputs\n        cout << \"\\n\\nCall or put option (C or P)?\\t\";\n        cin >> option_type ;\n\n        cout << \"Strike:\\t\\t\\t\\t\";\n        cin >> X ;\n\n        cout << \"Underlying price (S):\\t\\t\";\n        cin >> S;\n\n        cout << \"Risk-free rate (%):\\t\\t\";\n        cin >> r;\n\n        cout << \"Volatility:\\t\\t\\t\";\n        cin >> v;\n\n        cout << \"Yield rate:\\t\\t\\t\";\n        cin >> Y ;        \n\n        cout << \"Time to maturity (in years):\\t\";\n        cin >> t ;\n\n        if (option_type == 'c' || option_type == 'C')\n        {\n            Call_Option (S, Y, v, r, X, t);\n        }\n        else\n        {\n        Put_Option (S, Y, v, r, X, t);\n        }\n    }\n\n    catch (std::exception& e)\n        {\n            std::cerr << e.what() << endl;\n            return 1;\n        }\n        catch (...)\n        {\n            std::cerr << \"unknown error\" << endl;\n            return 1;\n        }\n\n    } while (end != true);\n\nreturn 0;\n\n}\n```"]