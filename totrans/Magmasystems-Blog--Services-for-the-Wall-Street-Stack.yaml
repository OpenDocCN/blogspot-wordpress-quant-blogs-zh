- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 05:20:27'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Magmasystems Blog: Services for the Wall Street Stack'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://magmasystems.blogspot.com/2006/05/services-for-wall-street-stack.html#0001-01-01](http://magmasystems.blogspot.com/2006/05/services-for-wall-street-stack.html#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I have blogged before about the need for a standardized Wall Street Stack. At
    my current client, there are several different frameworks that have been built
    over the years, but no framework has gained enterprise-wide acceptance.
  prefs: []
  type: TYPE_NORMAL
- en: These are the services that are generally needed for a complete application
    framework. If you can think of any other, let me know.
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication**'
  prefs: []
  type: TYPE_NORMAL
- en: '- logging in to various databases, web servers, internal systems, etc. Best
    implemented through an enterprise-wide authentication service (using the user''s
    Kerberos token, etc)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization**'
  prefs: []
  type: TYPE_NORMAL
- en: (Entitlements) - what actions can a user perform within an application and what
    data is a user entitled to see. Best accomplished through an enterprise-wide system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging**'
  prefs: []
  type: TYPE_NORMAL
- en: '- log interesting things that happen in an application. Log4Net is a good framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Preferences**'
  prefs: []
  type: TYPE_NORMAL
- en: '- load and save the state of the UI'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Data**'
  prefs: []
  type: TYPE_NORMAL
- en: '- each application may want to persist the last state of the application when
    the user logged off'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration**'
  prefs: []
  type: TYPE_NORMAL
- en: '- Each application should be configurable through a series of XMl files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**General Services Manager**'
  prefs: []
  type: TYPE_NORMAL
- en: '- drives the entire service locator framework'
  prefs: []
  type: TYPE_NORMAL
- en: '**Applet Management**'
  prefs: []
  type: TYPE_NORMAL
- en: '- load applets from .NET assemblies'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal Event Broker**'
  prefs: []
  type: TYPE_NORMAL
- en: '- lightweight communication between applets'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data and Persistence layer**'
  prefs: []
  type: TYPE_NORMAL
- en: '- ways to load, query, update and cache data. Should be configurable so that
    we can go through different transport layers'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service Agents**'
  prefs: []
  type: TYPE_NORMAL
- en: '- processed async notifications that come to us through subscriptions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shell**'
  prefs: []
  type: TYPE_NORMAL
- en: '- handles initialization of the application, calls all of the various services,
    provides presentation services for the applets'
  prefs: []
  type: TYPE_NORMAL
- en: '**UI**'
  prefs: []
  type: TYPE_NORMAL
- en: '- menu manager, status bar manager, navbar manager, toolbar manager'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security/Cryptography**'
  prefs: []
  type: TYPE_NORMAL
- en: '- does the data need to be encrypted and decrypted? (passwords, sensitive data)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exception Handling**'
  prefs: []
  type: TYPE_NORMAL
- en: '- provides a unified way of handling errors that occur in shell and the various
    applets'
  prefs: []
  type: TYPE_NORMAL
- en: '**Threading**'
  prefs: []
  type: TYPE_NORMAL
- en: '- model for async processing'
  prefs: []
  type: TYPE_NORMAL
- en: ©2006 Marc Adler - All Rights Reserved
  prefs: []
  type: TYPE_NORMAL
