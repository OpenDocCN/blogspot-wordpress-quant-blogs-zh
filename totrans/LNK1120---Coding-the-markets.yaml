- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 19:33:29'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: LNK1120 | Coding the markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://etrading.wordpress.com/2013/04/05/lnk1120/#0001-01-01](https://etrading.wordpress.com/2013/04/05/lnk1120/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: LNK1120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: April 5, 2013
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just fixed one of those infuriating Visual Studio link errors. There’s lots
    of good stuff on stackoverflow, of course, but this one was a bit more subtle.
    It’s still probably quite common though, if you’re integrating code with differing
    build systems. The root of the problem is linking code built with Visual C++’s
    own STL with code using STLport. There are various tools and options in Visual
    Studio that will help you find the root of the error.
  prefs: []
  type: TYPE_NORMAL
- en: 'dumpbin: command line utility to dump all the symbols defined and referenced
    by a binary. You can use it on .exe, .lib and .obj files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'undname: command line utility to undecorate C++ names. Given a mangled name
    it will demangle it.'
  prefs: []
  type: TYPE_NORMAL
- en: '/P: compiler option to write pre-processor output to file as a .i file. Useful
    for seeing which headers are actually pulled into each unit of compilation.'
  prefs: []
  type: TYPE_NORMAL
- en: '/VERBOSE: linker option which will tell you which libraries and objects are
    searched, and which symbols they resolve.'
  prefs: []
  type: TYPE_NORMAL
