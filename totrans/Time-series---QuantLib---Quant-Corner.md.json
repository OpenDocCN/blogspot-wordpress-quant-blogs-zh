["```\n/*\nCopyright (C) 2013, Edouard 'tagoma' Tallent\nQL timeseries wrapper \nQuantCorner @ https://quantcorner.wordpress.com\n*/\n\n#include\n#include\n#include\n#include\n#include<boost\\algorithmstring.hpp>\n#include<ql\\quantlib.hpp>\n\nQuantLib::TimeSeries<double> PriceSeries(char* filename)\n{\n    // Read the file provided via command line\n    std::ifstream in (filename);\n    std::string line;\n    std::vector lines;\n    while (in >> line)\n        lines.push_back(line);\n\n    // Container tools\n    std::vector dates;\n    std::vector quotes;\n\n    for (unsigned int i = 0; i < lines.size(); i++)\n        {\n            std::vector outerArray;\n\n            boost::split(outerArray, lines[i], boost::is_any_of(\",\"));\n\n            std::vector innerArray;\n            boost::split(innerArray, outerArray[0], boost::is_any_of(\"-\")); \n\n            QuantLib::Year year = (QuantLib::Year) std::stoi(innerArray[0]);\n            QuantLib::Month month = (QuantLib::Month) std::stoi(innerArray[1]);\n            QuantLib::Day day = (QuantLib::Day) std::stoi(innerArray[2]);\n\n            dates.push_back(QuantLib::Date(day, month, year));\n            quotes.push_back(atof(outerArray[6].c_str()));\n        }\n\n    // Create a QuantLib::TimeSeries object\n    QuantLib::TimeSeries series(dates.begin(), dates.end(), quotes.begin());\n\n    // Return the time series\n    return series;\n}\n\nint main(int argc, char *argv[])\n{\n    // Source file\n    char* filename = argv[1];\n\n    // Call to the function\n    QuantLib::TimeSeries mySeries = PriceSeries(filename);\n\n    ///////////////////////////////////////////////////////////////\n    // Below are implementations of some methods of QL Timeseries//\n    ///////////////////////////////////////////////////////////////\n\n    // Is the time series empty?\n    std::cout << \"Is the series empty? (0 = not empty)\\t\" << mySeries.empty() << std::endl;\n\n    // Start date of the time series\n    std::cout << \"Start date of the time series:\\t\" << mySeries.firstDate() << std::endl;\n\n    // Last date of the time series\n    std::cout << \"Last date of the time series:\\t\" << mySeries.lastDate() << std::endl;\n\n    // What was the Adj.close value on November 14th, 2012?\n    std::cout << \"Adjusted close on November 14th, 2012:\\t\" << mySeries[QuantLib::Date(14, QuantLib::Nov, 2012)] << std::endl;\n\n    return 0;\n}\n\n```"]