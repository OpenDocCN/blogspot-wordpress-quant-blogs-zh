["```\ndef drawdown(pnl):\n    \"\"\"\n    calculate max drawdown and duration\n\n    Returns:\n        drawdown : vector of drawdwon values\n        duration : vector of drawdown duration\n    \"\"\"\n    cumret = pnl\n\n    highwatermark = [0]\n\n    idx = pnl.index\n    drawdown = pd.Series(index = idx)\n    drawdowndur = pd.Series(index = idx)\n\n    for t in range(1, len(idx)) :\n        highwatermark.append(max(highwatermark[t-1], cumret[t]))\n        drawdown[t]= (highwatermark[t]-cumret[t])\n        drawdowndur[t]= (0 if drawdown[t] == 0 else drawdowndur[t-1]+1)\n\n    return drawdown, drawdowndur\n\n%timeit drawdown(spy)\n1 loops, best of 3: 1.21 s per loop\n\n```", "```\ndef dd(s):\n#    ''' simple drawdown function '''\n\n    highwatermark = np.zeros(len(s))\n    drawdown = np.zeros(len(s))\n    drawdowndur = np.zeros(len(s))\n\n    for t in range(1,len(s)):\n        highwatermark[t] = max(highwatermark[t-1], s[t])\n        drawdown[t] = (highwatermark[t]-s[t])\n        drawdowndur[t]= (0 if drawdown[t] == 0 else drawdowndur[t-1]+1)\n\n    return drawdown , drawdowndur\n\n%timeit dd(spy.values)\n10 loops, best of 3: 27.9 ms per loop\n\n```", "```\n%%cython\nimport numpy as np\ncimport numpy as np\n\nDTYPE = np.float64\nctypedef np.float64_t DTYPE_t\n\ncimport cython\n@cython.boundscheck(False) # turn of bounds-checking for entire function\ndef dd_c(np.ndarray[DTYPE_t] s):\n#    ''' simple drawdown function '''\n    cdef np.ndarray[DTYPE_t] highwatermark = np.zeros(len(s),dtype=DTYPE)\n    cdef np.ndarray[DTYPE_t] drawdown = np.zeros(len(s),dtype=DTYPE)\n    cdef np.ndarray[DTYPE_t] drawdowndur = np.zeros(len(s),dtype=DTYPE)\n\n    cdef int t\n    for t in range(1,len(s)):\n        highwatermark[t] = max(highwatermark[t-1], s[t])\n        drawdown[t] = (highwatermark[t]-s[t])\n        drawdowndur[t]= (0 if drawdown[t] == 0 else drawdowndur[t-1]+1)\n\n    return drawdown , drawdowndur\n\n%timeit dd_c(spy.values)\n10000 loops, best of 3: 121 Âµs per loop\n\n```"]