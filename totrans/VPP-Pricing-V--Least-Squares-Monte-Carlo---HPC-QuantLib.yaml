- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-17 23:38:59'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-17 23:38:59
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'VPP Pricing V: Least-Squares Monte-Carlo – HPC-QuantLib'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPP定价V：最小二乘蒙特卡罗 - HPC-QuantLib
- en: 来源：[https://hpcquantlib.wordpress.com/2011/11/05/vpp-pricing-v-least-squares-monte-carlo/#0001-01-01](https://hpcquantlib.wordpress.com/2011/11/05/vpp-pricing-v-least-squares-monte-carlo/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://hpcquantlib.wordpress.com/2011/11/05/vpp-pricing-v-least-squares-monte-carlo/#0001-01-01](https://hpcquantlib.wordpress.com/2011/11/05/vpp-pricing-v-least-squares-monte-carlo/#0001-01-01)
- en: For the sake of completeness please find [here](http://www.hpc-quantlib.de/src/vpp6.zip)
    the code for the evaluation of the virtual power plant (VPP) using a least-squares
    Monte-Carlo algorithm. The code depends on the latest [QuantLib](http://quantlib.org)
    version from the [SVN trunk](http://sourceforge.net/p/quantlib/code/HEAD/tree/)
    or the upcoming QuantLib 1.2 release. The model and power plant specifications
    can be found in the previous blog entries. A more general description  of the
    problem and the algorithms can be found e.g. here [1]. Test forward curves can
    be taken e.g. from the [Kyos example download page](http://www.kyos.com/?content=65).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，请在[这里](http://www.hpc-quantlib.de/src/vpp6.zip)找到使用最小二乘蒙特卡罗算法评估虚拟电厂（VPP）的代码。
    该代码依赖于来自[QuantLib](http://quantlib.org)的最新版本的[SVN trunk](http://sourceforge.net/p/quantlib/code/HEAD/tree/)或即将发布的
    QuantLib 1.2版本。 模型和电厂规格可以在先前的博客条目中找到。 问题和算法的更一般描述可以在[这里](http://www.hpcquantlib.wordpress.com/2011/11/05/vpp-pricing-v-least-squares-monte-carlo/#0001-01-01)找到。
    测试远期曲线可以从[Kyos示例下载页面](http://www.kyos.com/?content=65)获取。
- en: The regression polynomials are of third order in the spark spread ![x](img/a02ca3461b38d94f9ca87463267dd179.png)
    and the stochastic component of the gas price ![y](img/af71f85190ec965134a1a811d80c6087.png).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 回归多项式对火花传播 ![x](img/a02ca3461b38d94f9ca87463267dd179.png) 和天然气价格 ![y](img/af71f85190ec965134a1a811d80c6087.png)
    的随机成分采用三阶。
- en: '![p_a(x,y)=a_0 + a_1 x + a_2 x^2 +a_3x^3 + a_4y + a_5y^2 + a_6y^3 + a_7xy+a_8x^2y+a_9xy^2](img/9bfdfd6f5268508df552e0942b92e3d3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![p_a(x,y)=a_0 + a_1 x + a_2 x^2 +a_3x^3 + a_4y + a_5y^2 + a_6y^3 + a_7xy+a_8x^2y+a_9xy^2](img/9bfdfd6f5268508df552e0942b92e3d3.png)'
- en: The regression is carried out for every exercise right (every hour) and every
    possible VPP state separately. The calibration phase is based on ordinary Monte-Carlo
    scenarios, whereas the pricing is done using Quasi Monte-Carlo scenarios (Sobol
    sequence) and a Brownian Bridge (BB).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个运动（每小时）和每个可能的VPP状态单独进行回归。 校准阶段基于普通蒙特卡罗场景，而定价是使用准蒙特卡罗场景（Sobol序列）和布朗桥（BB）完成的。
- en: The following table summarizes the performance of the different pricing algorithms
    for the example contract and maturity of six month. Target accuracy is around
    1% relative error in the NPV. The timings are given for a Core i5@3GHz CPU using
    four threads or a GTX560@0.8/1.6GHz GPU with 336 cores.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了不同定价算法在六个月期限的示例合同的性能。 目标精度约为净现值相对误差的1％。 定时是使用四个线程的Core i5 @ 3GHz CPU或具有336个核心的GTX560
    @ 0.8 / 1.6GHz GPU给出的。
- en: '![\footnotesize{  \begin{tabular}{|c|c|c|c|c|c|} \hline Algorithm & Optimisaton
    & Approximation & Hardware & Runtime & Comment\\ \hline \hline Quasi-MC + BB &
    dyn. prog. & perfect foresight & GPU & 0.19s & single precision \\ Quasi-MC +
    BB & dyn. prog. & perfect foresight & CPU & 20.3s & \\ Monte-Carlo & dyn. prog.
    & perfect foresight & CPU & 286.3s & \\ Finite Difference & dyn. prog.& no & CPU
    & 487.7s & \\ Least-Squares MC & dyn. prog. & no & CPU & 645.6s & \\ Quasi-MC
    + BB & linear prog. & perfect foresight & CPU & 4198s & using GLPK \\ \hline \end{tabular}
    } ](img/941f9186544a8552d1f4fda648b632ce.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![\footnotesize{  \begin{tabular}{|c|c|c|c|c|c|} \hline Algorithm & Optimisaton
    & Approximation & Hardware & Runtime & Comment\\ \hline \hline Quasi-MC + BB &
    dyn. prog. & perfect foresight & GPU & 0.19s & single precision \\ Quasi-MC +
    BB & dyn. prog. & perfect foresight & CPU & 20.3s & \\ Monte-Carlo & dyn. prog.
    & perfect foresight & CPU & 286.3s & \\ Finite Difference & dyn. prog.& no & CPU
    & 487.7s & \\ Least-Squares MC & dyn. prog. & no & CPU & 645.6s & \\ Quasi-MC
    + BB & linear prog. & perfect foresight & CPU & 4198s & using GLPK \\ \hline \end{tabular}
    } ]'
- en: I don’t know the reason for the bad performance of the [Gnu Linear Programming
    Kit](http://www.gnu.org/s/glpk/) for these kind of problems. Some commercial linear
    optimizer are much faster but they can not compete with dynamic programming for
    a simple VPP. As soon as e.g. time integral constraints are involved linear programming
    might become the method of choice.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道[Gnu线性规划套件](http://www.gnu.org/s/glpk/)在这类问题上性能不佳的原因。 一些商业线性优化器速度要快得多，但它们无法与动态规划竞争，对于简单的VPP来说，动态规划可能是最佳选择。
    一旦涉及例如时间积分约束，线性规划可能成为首选方法。
- en: '[1] H. van Dijken, [The value of starting up the power plant.](http://www.erasmusenergy.com/articles/192/1/The-value-of-starting-up-the-power-plant/Page1.html)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] H. van Dijken，[启动电厂的价值。](http://www.erasmusenergy.com/articles/192/1/The-value-of-starting-up-the-power-plant/Page1.html)'
