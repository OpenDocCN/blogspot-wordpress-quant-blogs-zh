["```\n#include <ql/quantlib.hpp>\n#include <iostream>\n#include <iomanip>\n\n#include <boost/timer.hpp>\nusing namespace QuantLib;\n\n#if defined(QL_ENABLE_SESSIONS)\nnamespace QuantLib {\nInteger sessionId() { return 0; }\n}\n#endif\n\nint main(int, char* []) {\n\n    try {\n\n    boost::timer timer;\n    std::cout << std::endl; \n\n\t// date set up\n\tCalendar calendar = TARGET();\n\n\tDate settlementDate(28, January, 2011);\n\t// the settlement date must be a business day\n\tsettlementDate = calendar.adjust(settlementDate);\n\n\t// Evaluation date\n\tInteger fixingDays = 1;\n\tNatural settlementDays = 1;\n\tDate todaysDate = calendar.advance(settlementDate, -fixingDays, Days);\n\tSettings::instance().evaluationDate() = todaysDate;\n\n\t// bond set up \n\tReal faceAmount = 100.0;\n\tReal redemption = 100.0;\n\tDate issueDate(27, January, 2011);\n\tDate maturity(31, August, 2020);\n\tReal couponRate = 0.03625;\n\tReal yield = 0.034921;\n\n\tRelinkableHandle<YieldTermStructure> discountingTermStructure;\n\tboost::shared_ptr<YieldTermStructure> flatTermStructure(\n\tnew FlatForward(\n\t\tsettlementDate,\n\t\tyield,\n\t\tActualActual(ActualActual::Bond),\n\t\tCompounding::Compounded,\n\t\tSemiannual));\n\tdiscountingTermStructure.linkTo(flatTermStructure);\n\n\t// Pricing engine\n\tboost::shared_ptr<PricingEngine> bondEngine(\n\t\tnew DiscountingBondEngine(discountingTermStructure));\n\n\t // Rate\n\tSchedule fixedBondSchedule(\n\t\tissueDate,\n\t\tmaturity,\n\t\tPeriod(Semiannual),\n\t\tUnitedStates(UnitedStates::GovernmentBond),\n\t\tBusinessDayConvention::Unadjusted,\n\t\tBusinessDayConvention::Unadjusted,\n\t\tDateGeneration::Rule::Backward,\n\t\tfalse);\n\n\tFixedRateBond fixedRateBond(\n\t\tsettlementDays,\n\t\tfaceAmount,\n\t\tfixedBondSchedule,\n\t\tstd::vector<Rate>(1, couponRate),\n\t\tActualActual(ActualActual::Bond),\n\t\tBusinessDayConvention::Unadjusted,\n\t\tredemption,\n\t\tissueDate);\n\n\tfixedRateBond.setPricingEngine(bondEngine);\n\n\tstd::cout << \"Principal: \" << faceAmount << std::endl;\n\tstd::cout << \"Issuing date: \" << issueDate << std::endl;\n\tstd::cout << \"Maturity: \" << maturity << std::endl;\n\tstd::cout << \"Coupon rate: \" << std::setprecision (4) << io::percent(couponRate) << std::endl;\n\tstd::cout << \"Yield: \" << std::setprecision (4) << io::percent(yield) << std::endl << std::endl;\n\tstd::cout << \"Net present value: \" << std::setprecision (4) << fixedRateBond.NPV() << std::endl;\n\tstd::cout << \"Clean Price: \" << std::setprecision (4) << fixedRateBond.cleanPrice() << std::endl;\n\tstd::cout << \"Dirty price: \" <<  std::setprecision (4) << fixedRateBond.dirtyPrice() << std::endl;\n\tstd::cout << \"Accrued coupon: \" <<  std::setprecision (4) << fixedRateBond.accruedAmount() << std::endl << std::endl;\n\tsystem(\"pause\");\n\treturn 0;\n\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n        return 1;\n    } catch (...) {\n        std::cerr << \"unknown error\" << std::endl;\n        return 1;\n    }\n}\n```", "```\nDate settlementDate(28, January, 2011);\n// the settlement date must be a business day\nsettlementDate = calendar.adjust(settlementDate);\n```"]