- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-12 19:32:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Excel industrialisation | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://etrading.wordpress.com/2015/04/03/excel-industrialisation/#0001-01-01](https://etrading.wordpress.com/2015/04/03/excel-industrialisation/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Excel industrialisation
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: April 3, 2015
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[John Greenan](https://www.linkedin.com/in/johngreenan) has produced an [excellent
    series of posts on Excel VBA Industrialisation](http://blog.alignment-systems.com/search/label/Excel%20Industrialisation)
    on [his blog](http://blog.alignment-systems.com). It’s a topic dear to me, so
    I figured I’d better respond. In his posts JG presents a series of VB Extensions
    based techniques to enable the export of embedded VB from a spreadsheet, so it
    can be version controlled, as well as techniques for error logging and reporting.
    The code is out there on [github](https://github.com/JohnGreenan), and it’s a
    valuable addition to the public domain, especially since there are several commercial
    offerings addressing this space. For instance, [spreadgit](http://spreadgit.com/),
    [ClusterSeven](http://www.clusterseven.com/) and [Finsbury Solutions](http://www.finsburysolutions.com/).
    JG kicks off his discussion in part one by observing that VBA is in the doldrums,
    and that the cool kids are using MEAN, Scala, OCaml or Haskell. Sure, the cool
    kids are never going to use VBA. But that’s not just because other languages are
    cooler, it’s because VBA and the latest programming languages are aimed at completely
    different audiences. Scala, OCaml & Haskell are for developers, and Excel is for
    non developers, end users, business users. The very reason for Excel’s phenomenal
    success and ubiquity is because it enables end users to create software solutions.
    Apparently there are [eleven million professional software developers](http://www.infoq.com/news/2014/01/IDC-software-developers)
    in the world. But even those eleven million can’t meet the world’s demand for
    software, so end users have to generate their own solutions, and they use Excel
    to do it. The result is, as JG points out in the [comments to part six](http://blog.alignment-systems.com/2015/03/excel-vba-industrialisationpart-six.html?showComment=1427590236378#c5959579053154491774)
    in his series: “In many cases the requirement for Excel Industrialisation is for
    a firm with an existing portfolio of ‘000s of spreadsheets that cannot all, in
    a cost-effective manner, be manually rewritten to conform to a coding standard.”'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: A version control system is an important part of controlling those portfolios
    of end user developed spreadsheets. However, it solves only part of the problem.
    Another major underlying factor that causes so many spreadsheet problems is their
    manual, desktop operation. Since Excel is a desktop application, Excel spreadsheets
    must be manually operated by their users. Users have to start up Excel, load the
    sheet, key in unvalidated data, hit F9, and then copy & paste or email the results
    out. All of that is error prone. And all of this manual operation is a major factor
    preventing any organised, systematic testing. All of these problems were writ
    large with the [London Whale](http://baselinescenario.com/2013/02/09/the-importance-of-excel/).
    All these problems could be resolved if we could decouple Excel as a development
    environment from Excel as a runtime. It’s great that end users can develop their
    own solutions in Excel, but it’s burdensome and error prone for this solutions
    to be operated manually on desktop PCs. Those solutions should be automated, resilient
    and scalable, and hosted by a server side rumtime. That, of course, is [SpreadServe](http://spreadserve.com/industries/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统是控制这些端用户开发的电子表格组合的重要部分。然而，它只解决了问题的一部分。导致这么多电子表格问题的另一个重要潜在因素是它们的手动式桌面操作。由于Excel是一个桌面应用程序，Excel电子表格必须由用户手动操作。用户必须启动Excel，加载表格，输入未经验证的数据，按F9，然后复制粘贴或通过电子邮件传送结果。所有这些操作都容易出错。所有这些手动操作是阻止任何有组织的系统测试的一个主要因素。所有这些问题在[伦敦鲸](http://baselinescenario.com/2013/02/09/the-importance-of-excel/)身上都很明显。如果我们能够将Excel作为开发环境与Excel作为运行时分离，所有这些问题都能解决。端用户可以在Excel中开发自己的解决方案是很好的，但是这些解决方案在桌面PC上手动操作是麻烦且容易出错的。这些解决方案应该是自动化的、有弹性的和可扩展的，并由服务器端运行。当然，这就是[SpreadServe](http://spreadserve.com/industries/)。
