["```\n\n<#@ template language=\"C#\" #>\n<#@ assembly name=\"System.Xml\" #>\n<#@ import namespace=\"System.IO\" #>\n<#@ import namespace=\"System.Xml\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n\nusing System;\nusing Coral8.Transport;\nusing Coral8.Value;\n\n<# \n    DirectoryInfo dir = new DirectoryInfo(@\"v:\\dev\\CEP\\C8Projects\\Schemas\");\n    foreach (FileInfo file in dir.GetFiles(\"*.ccs\"))\n    {\n        string sSchemaFile = file.Name.Replace(\".ccs\", \"\").Replace(\"-\", \"\");\n        List<Info> colInfo = new List<Info>();\n        using (StreamReader reader = new StreamReader(file.FullName))\n        {\n            XmlDocument xmldoc = new XmlDocument();\n            xmldoc.Load(reader);\n            XmlNodeList columns = xmldoc.GetElementsByTagName(\"Column\");\n            foreach (XmlNode node in columns)\n            {\n                string colName = node.Attributes[\"Name\"].Value;\n                string type = node.Attributes[\"xsi:type\"].Value;\n                string netType = \"unknown\";\n                string c8FieldType = \"unknown\";\n\n                if (type.StartsWith(\"String\"))\n                {\n                    netType = \"string\";\n                    c8FieldType = \"StringFieldValue\";\n                }\n                else if (type.StartsWith(\"Int\"))\n                {\n                    netType = \"int?\";\n                    c8FieldType = \"IntegerFieldValue\";\n                }\n                else if (type.StartsWith(\"Long\"))\n                {\n                    netType = \"long?\";\n                    c8FieldType = \"LongFieldValue\";\n                }    \n                else if (type.StartsWith(\"Time\"))\n                {\n                    netType = \"DateTime?\";\n                    c8FieldType = \"TimeFieldValue\";\n                }    \n                else if (type.StartsWith(\"Float\"))\n                {\n                    netType = \"double?\";\n                    c8FieldType = \"FloatFieldValue\";\n                }    \n                else if (type.StartsWith(\"Bool\"))\n                {\n                    netType = \"bool?\";\n                    c8FieldType = \"BooleanFieldValue\";\n                }    \n                else if (type.StartsWith(\"Xml\"))\n                {\n                    netType = \"string\";\n                    c8FieldType = \"XmlFieldValue\";\n                }\n\n                colInfo.Add(new Info(colName, netType, c8FieldType));\n            } // end foreach node\n        } // end using\n#>\n\n#region <#= sSchemaFile #> Serializer\npublic class <#= sSchemaFile #>\n{\n<# \n        foreach (Info info in colInfo)\n        {\n#>\n    public <#= info.NetType #> <#= info.Name #>;\n<#\n        }\n#>        \n    public void ToObject(Tuple tuple)\n    {\n<# \n        foreach (Info info in colInfo)\n        {\n            if (info.C8FieldValue == \"TimeFieldValue\")\n            {\n#>        \n        this.<#= info.Name #> = new DateTime(((<#= info.C8FieldValue #>) tuple.GetFieldValue(\"<#= info.Name #>\")).Value.Value);\n<#\n            }\n            else\n            {\n#>        \n        this.<#= info.Name #> = ((<#= info.C8FieldValue #>) tuple.GetFieldValue(\"<#= info.Name #>\")).Value;\n<#\n            }\n        }\n#>        \n    }\n\n    public Tuple ToTuple()\n    {\n        Tuple tuple = new Tuple();\n<# \n        foreach (Info info in colInfo)\n        {\n            if (info.C8FieldValue == \"TimeFieldValue\")\n            {\n#>        \n        tuple.SetFieldValue(\"<#= info.Name #>\", new <#= info.C8FieldValue #>(this.<#= info.Name #>.Value.Ticks));\n<#\n            }\n            else if (info.C8FieldValue == \"StringFieldValue\" || info.C8FieldValue == \"XmlFieldValue\")\n            {\n#>\n        tuple.SetFieldValue(\"<#= info.Name #>\", new <#= info.C8FieldValue #>(this.<#= info.Name #>));\n<#            \n            }\n            else\n            {\n#>        \n        tuple.SetFieldValue(\"<#= info.Name #>\", new <#= info.C8FieldValue #>(this.<#= info.Name #>.Value));\n<#\n            }\n        }\n#>\n\n        return tuple;\n    }\n}\n#endregion\n<#\n    }\n#>\n<#+\n    public class Info\n    {\n        public string Name;\n        public string NetType;\n        public string C8FieldValue;\n\n        public Info(string name, string type, string val)\n        {\n            this.Name = name;\n            this.NetType = type;\n            this.C8FieldValue = val;\n        }\n    }\n#>\n\n```"]