- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-12 19:32:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月12日 19:32:32
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: YieldCurveBootstrapping _BLOCK_TYPE_IS_VALID in SpreadServe | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YieldCurveBootstrapping _BLOCK_TYPE_IS_VALID in SpreadServe | Coding the markets
- en: 来源：[https://etrading.wordpress.com/2014/12/18/yieldcurvebootstrapping-_block_type_is_valid-in-spreadserve/#0001-01-01](https://etrading.wordpress.com/2014/12/18/yieldcurvebootstrapping-_block_type_is_valid-in-spreadserve/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2014/12/18/yieldcurvebootstrapping-_block_type_is_valid-in-spreadserve/#0001-01-01](https://etrading.wordpress.com/2014/12/18/yieldcurvebootstrapping-_block_type_is_valid-in-spreadserve/#0001-01-01)
- en: YieldCurveBootstrapping _BLOCK_TYPE_IS_VALID in SpreadServe
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YieldCurveBootstrapping _BLOCK_TYPE_IS_VALID在SpreadServe中
- en: December 18, 2014
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2014年12月18日
- en: 'The old ones are the best ones, and I spent too many hours yesterday butting
    my head against a classic Windows bug. I was testing an optimisation in the [SpreadServeEngine](http://spreadserve.com/product/user-guide/)‘s
    handling of nested invocations of XLL supplied functions. I was using [QuantLib](http://quantlib.org/index.shtml)‘s
    YieldCurveBootstrapping spreadsheet, and the QuantLib 1.4.0 XLL addin. The sheet
    invokes the [qlPiecewiseYieldCurve](http://www.bnikolic.co.uk/ql/addindoc/f/qlPiecewiseYieldCurve.html)
    function, and the fourth parameter, RateHelpers, is supplied by an invocation
    of ohPack. Normally in this scenario, the XLOPER returned by ohPack would be marshalled
    to the engine’s internal representation, before being marshalled back to an XLOPER
    for handing into qlPiecewiseYieldCurve. I added a shortcut that made the XLOPER
    available as well as the internal representation, so the marshalling process could
    proceed by shortcut if possible. Unwittingly I ended up newing an object in one
    DLL which was released by another DLL when qlPiecewiseYieldCurve returned and
    released it’s stack frame. My debug build threw a run time assert on _BLOCK_TYPE_IS_VALID.
    Cue a bug hunt with me toothcombing through the codebase for a double delete or
    a buffer overrun. Spreadsheet engines are complex beasts since they’re basically
    a runtime for a functional programming language, so must maintain an object graph
    and dispatch imperatively at the nodes to tokenised code and XLL supplied C/C++
    functions. There’s a lot of memory pool and stack management to do in all that!
    So I was sure there was a subtle memory management bug somewhere that had been
    exposed by my optimisation for the nested XLL functions corner case. While I was
    looking for the bug I did get some good reading on Windows heap debugging done:
    [this](http://msdn.microsoft.com/en-us/library/bebs9zyz%28v=vs.90%29.aspx) and
    [this](http://msdn.microsoft.com/en-us/library/ms235460.aspx) are recommended.
    When debugging it’s easy to keep going deeper and deeper in pursuit of a supposedly
    subtle bug. Better to take a breath and try and widen one’s focus. It was this
    article that made me think again about the fact that each DLL has it’s own C run
    time linked in, and if their memory management implementations differ, there will
    be problems. So it was in this case. Adding a static allocator function to the
    DLL responsible for freeing the object ensured that the new & delete were done
    by the same DLL, and the bootstrapping model started running through smoothly.
    Of course what I need to do now is revisit my build system’s link model and ensure
    all DLLs and EXEs are linking the same CRT implementation…'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 老话说得好，昨天我花了太多时间在一个经典的 Windows bug 上撞头了。我正在测试 [SpreadServeEngine](http://spreadserve.com/product/user-guide/)
    处理 XLL 供应的函数嵌套调用的优化。我使用的是 [QuantLib](http://quantlib.org/index.shtml) 的 YieldCurveBootstrapping
    电子表格和 QuantLib 1.4.0 的 XLL addin。该表格调用了 [qlPiecewiseYieldCurve](http://www.bnikolic.co.uk/ql/addindoc/f/qlPiecewiseYieldCurve.html)
    函数，并且第四个参数 RateHelpers 是由 ohPack 的调用提供的。通常在这种情况下，ohPack 返回的 XLOPER 会被编组到引擎的内部表示中，然后再被编组回一个
    XLOPER 以便传递给 qlPiecewiseYieldCurve。我添加了一个快捷方式，使得 XLOPER 和内部表示都可用，因此如果可能的话，编组过程可以通过快捷方式进行。不知不觉中，我在一个
    DLL 中新建了一个对象，当 qlPiecewiseYieldCurve 返回并释放了其堆栈帧时，另一个 DLL 释放了它。我的调试版本在 _BLOCK_TYPE_IS_VALID
    上抛出了运行时断言。于是我开始了一场病毒猎手般的搜索，通过代码库寻找双重删除或缓冲区溢出。电子表格引擎是复杂的生物，因为它们基本上是一个函数式编程语言的运行时，所以必须维护一个对象图，并在节点上以命令方式分发令牌化的代码和
    XLL 提供的 C/C++ 函数。在所有这些过程中都需要进行大量的内存池和堆栈管理！所以我确信，在我优化了嵌套 XLL 函数边缘情况后，某处暴露了一个微妙的内存管理错误。当我在寻找错误时，我确实对
    Windows 堆调试进行了一些好的阅读：[这个](http://msdn.microsoft.com/en-us/library/bebs9zyz%28v=vs.90%29.aspx)
    和 [这个](http://msdn.microsoft.com/en-us/library/ms235460.aspx) 是推荐的。在调试时，很容易不断地深入追求一个被认为是微妙的错误。最好停下来喘口气，尝试拓宽自己的视野。正是这篇文章让我再次思考到每个
    DLL 都有自己的 C 运行时链接，如果它们的内存管理实现不同，就会有问题。在这种情况下就是这样。向负责释放对象的 DLL 添加一个静态分配器函数，确保新建和删除由同一个
    DLL 完成，引导模型顺利运行。当然，现在我需要重新审视我的构建系统的链接模型，并确保所有的 DLL 和 EXE 都链接到相同的 CRT 实现...
