- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 14:04:43'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Support Vector Machine RSI System – Quantum Financier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://quantumfinancier.wordpress.com/2010/06/26/support-vector-machine-rsi-system/#0001-01-01](https://quantumfinancier.wordpress.com/2010/06/26/support-vector-machine-rsi-system/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Better late than never, as promised, the R code for the SVM system discussed
    in a [previous post](https://quantumfinancier.wordpress.com/2010/06/10/svm-classification-using-rsi-from-various-lengths/).
  prefs: []
  type: TYPE_NORMAL
- en: For the record this code is based on the [random forest system created by Max
    Dama.](http://www.maxdama.com/2009/05/decision-tree-bagging-system-r-code.html)
    I thought that it would make it easier for common reader to compare and evaluate.
    I also want to state that this isn’t anywhere close to optimal programming, I
    did that I long time ago and I was only starting with R at the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the system :'
  prefs: []
  type: TYPE_NORMAL
- en: '`SVMClassifModel = function(data, targets, returns, lookback = 252, ktype =
    "C-svc", crossvalid = 10, C = 10) {'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a predictive model using support vector machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Input data must be lagged one period to avoid look-ahead bias
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Print predictions and confidence, accuracy, equity curves plot, and performance
    statistics v.s. benchmark`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: require(kernlab)
  prefs: []
  type: TYPE_NORMAL
- en: require(quantmod)
  prefs: []
  type: TYPE_NORMAL
- en: Make sure targets is a factor (for classification)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: targets = as.factor(targets)
  prefs: []
  type: TYPE_NORMAL
- en: data$targets = as.factor(data$targets)
  prefs: []
  type: TYPE_NORMAL
- en: Generate indexes for backtest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: idx = data.frame(targets = lookback:(nrow(data)-1))
  prefs: []
  type: TYPE_NORMAL
- en: Isolate index to be used later
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: inx = index(returns[idx$targets])
  prefs: []
  type: TYPE_NORMAL
- en: Prediction function to be used for backtesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pred1pd = function(t) {
  prefs: []
  type: TYPE_NORMAL
- en: Train model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: model = trainSVM(data[(t-lookback):t, ], ktype, C, crossvalid)
  prefs: []
  type: TYPE_NORMAL
- en: Prediction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pred = predict(model, data[t+1, -1], type="prob")
  prefs: []
  type: TYPE_NORMAL
- en: Print for user inspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: print(pred)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: backtest by looping over the calendar previously generated
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: preds = sapply(idx$targets, pred1pd)
  prefs: []
  type: TYPE_NORMAL
- en: print output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: print(preds)
  prefs: []
  type: TYPE_NORMAL
- en: print(max.col(preds))
  prefs: []
  type: TYPE_NORMAL
- en: preds = data.frame(t(rbind(mle = max.col(t(preds)), preds)))
  prefs: []
  type: TYPE_NORMAL
- en: print(preds)
  prefs: []
  type: TYPE_NORMAL
- en: print(summaryStats((returns[idx$targets] * (preds$mle*2-3)), returns[idx$targets],
    comp = TRUE))
  prefs: []
  type: TYPE_NORMAL
- en: '#Equity curves'
  prefs: []
  type: TYPE_NORMAL
- en: equity = xts(cumprod((returns[idx$targets] * (preds$mle*2-3))+1), inx)
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark = xts(cumprod(returns[idx$targets] + 1), inx)
  prefs: []
  type: TYPE_NORMAL
- en: y axis values range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: yrngMin = abs(min(equity, Benchmark))
  prefs: []
  type: TYPE_NORMAL
- en: yrngMax = abs(max(equity, Benchmark))
  prefs: []
  type: TYPE_NORMAL
- en: Plot curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: chartSeries(equity, log.scale = TRUE, name='Equity Curves', yrange=c(yrngMin,
    yrngMax))
  prefs: []
  type: TYPE_NORMAL
- en: addTA(Benchmark, on=1, col='gold')
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: trainSVM = function(data, ktype, C, crossvalid) {
  prefs: []
  type: TYPE_NORMAL
- en: Return a trained svm model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: trainedmodel = ksvm(targets ~ ., data = data, type = ktype, kernel="rbfdot",
    kpar=list(sigma=0.05), C = C, prob.model = TRUE, cross = crossvalid)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: featureGen = function(sym, returns) {
  prefs: []
  type: TYPE_NORMAL
- en: Return a data frame to be used as input by the SVM system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Targets vector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: targets = coredata(returns)
  prefs: []
  type: TYPE_NORMAL
- en: targets[targets>=0] = 1
  prefs: []
  type: TYPE_NORMAL
- en: targets[targets<0] = -1
  prefs: []
  type: TYPE_NORMAL
- en: targets = as.factor(targets)
  prefs: []
  type: TYPE_NORMAL
- en: '#RSIs'
  prefs: []
  type: TYPE_NORMAL
- en: rsi2 = RSI(Cl(sym), 2 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi3 = RSI(Cl(sym), 3 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi4 = RSI(Cl(sym), 4 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi5 = RSI(Cl(sym), 5 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi6 = RSI(Cl(sym), 6 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi7 = RSI(Cl(sym), 7 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi8 = RSI(Cl(sym), 8 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi9 = RSI(Cl(sym), 9 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi10 = RSI(Cl(sym), 10 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi11 = RSI(Cl(sym), 11 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi12 = RSI(Cl(sym), 12 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi13 = RSI(Cl(sym), 13 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi14 = RSI(Cl(sym), 14 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi15 = RSI(Cl(sym), 15 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi16 = RSI(Cl(sym), 16 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi17 = RSI(Cl(sym), 17 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi18 = RSI(Cl(sym), 18 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi19 = RSI(Cl(sym), 19 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi20 = RSI(Cl(sym), 20 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi21 = RSI(Cl(sym), 21 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi22 = RSI(Cl(sym), 22 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi23 = RSI(Cl(sym), 23 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi24 = RSI(Cl(sym), 24 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi25 = RSI(Cl(sym), 25 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi26 = RSI(Cl(sym), 26 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi27 = RSI(Cl(sym), 27 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi28 = RSI(Cl(sym), 28 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi29 = RSI(Cl(sym), 29 )
  prefs: []
  type: TYPE_NORMAL
- en: rsi30 = RSI(Cl(sym), 30 )
  prefs: []
  type: TYPE_NORMAL
- en: lagged RSIs to correspond RSI with target period
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: rsi2 = Lag(rsi2, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi3 = Lag(rsi3, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi4 = Lag(rsi4, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi5 = Lag(rsi5, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi6 = Lag(rsi6, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi7 = Lag(rsi7, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi8 = Lag(rsi8, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi9 = Lag(rsi9, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi10 = Lag(rsi10, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi11 = Lag(rsi11, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi12 = Lag(rsi12, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi13 = Lag(rsi13, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi14 = Lag(rsi14, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi15 = Lag(rsi15, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi16 = Lag(rsi16, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi17 = Lag(rsi17, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi18 = Lag(rsi18, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi19 = Lag(rsi19, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi20 = Lag(rsi20, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi21 = Lag(rsi21, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi22 = Lag(rsi22, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi23 = Lag(rsi23, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi24 = Lag(rsi24, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi25 = Lag(rsi25, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi26 = Lag(rsi26, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi27 = Lag(rsi27, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi28 = Lag(rsi28, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi29 = Lag(rsi29, 1)
  prefs: []
  type: TYPE_NORMAL
- en: rsi30 = Lag(rsi30, 1)
  prefs: []
  type: TYPE_NORMAL
- en: Data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: data = data.frame(targets, rsi2, rsi3, rsi4, rsi5, rsi6, rsi7, rsi8, rsi9, rsi10,
    rsi11, rsi12, rsi13, rsi14, rsi15, rsi16, rsi17, rsi18, rsi19, rsi20, rsi21, rsi22,
    rsi23, rsi24, rsi25, rsi26, rsi27, rsi28, rsi29, rsi30)
  prefs: []
  type: TYPE_NORMAL
- en: names(data) = c("targets", "data")
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: return(data)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: summaryStats = function(x, bmk, comp = FALSE) {
  prefs: []
  type: TYPE_NORMAL
- en: '#Required library'
  prefs: []
  type: TYPE_NORMAL
- en: require(PerformanceAnalytics)
  prefs: []
  type: TYPE_NORMAL
- en: '#Compute stats of interest for strategy'
  prefs: []
  type: TYPE_NORMAL
- en: cumRetx = Return.cumulative(x)
  prefs: []
  type: TYPE_NORMAL
- en: annRetx = Return.annualized(x, scale=252)
  prefs: []
  type: TYPE_NORMAL
- en: sharpex = SharpeRatio.annualized(x, scale=252)
  prefs: []
  type: TYPE_NORMAL
- en: winpctx = length(x[x > 0])/length(x[x != 0])
  prefs: []
  type: TYPE_NORMAL
- en: annSDx = sd.annualized(x, scale=252)
  prefs: []
  type: TYPE_NORMAL
- en: maxDDx = maxDrawdown(x)
  prefs: []
  type: TYPE_NORMAL
- en: avDDx = mean(Drawdowns(x))
  prefs: []
  type: TYPE_NORMAL
- en: if(comp == TRUE) {
  prefs: []
  type: TYPE_NORMAL
- en: '#Compute stats of interest for benchmark'
  prefs: []
  type: TYPE_NORMAL
- en: cumRetbmk = Return.cumulative(bmk)
  prefs: []
  type: TYPE_NORMAL
- en: annRetbmk = Return.annualized(bmk, scale=252)
  prefs: []
  type: TYPE_NORMAL
- en: sharpebmk = SharpeRatio.annualized(bmk, scale=252)
  prefs: []
  type: TYPE_NORMAL
- en: winpctbmk = length(bmk[bmk > 0])/length(bmk)
  prefs: []
  type: TYPE_NORMAL
- en: annSDbmk = sd.annualized(bmk, scale=252)
  prefs: []
  type: TYPE_NORMAL
- en: maxDDbmk = maxDrawdown(bmk)
  prefs: []
  type: TYPE_NORMAL
- en: avDDbmk = mean(Drawdowns(bmk))
  prefs: []
  type: TYPE_NORMAL
- en: '#Return result vectors'
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark = c(cumRetbmk, annRetbmk, sharpebmk, winpctbmk, annSDbmk, maxDDbmk,
    avDDbmk)
  prefs: []
  type: TYPE_NORMAL
- en: Strategy = c(cumRetx, annRetx, sharpex, winpctx, annSDx, maxDDx, avDDx)
  prefs: []
  type: TYPE_NORMAL
- en: nms = c("Cumulative Return", "Annualized Return", "Annualized Sharpe Ratio",
    "Winning Percentage", "Annualized Volatility", "Maximum Drawdown", "Average Drawdown")
  prefs: []
  type: TYPE_NORMAL
- en: result = data.frame(Strategy, Benchmark, row.names = nms)
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: '#Return result vectors'
  prefs: []
  type: TYPE_NORMAL
- en: nms = c("Cumulative Return", "Annualized Return", "Annualized Sharpe Ratio",
    "Winning Percentage", "Annualized Volatility", "Maximum Drawdown", "Average Drawdown")
  prefs: []
  type: TYPE_NORMAL
- en: Strategy = c(cumRetx, annRetx, sharpex, winpctx, annSDx, maxDDx, avDDx)
  prefs: []
  type: TYPE_NORMAL
- en: result = data.frame(Strategy, row.names = nms)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return(result)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the harness used to use the system. Don’t forget to change the first
    two line of the code and replace with your directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: setwd(“C:\Users\John Doe\Documents”)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: source(“SVM System”)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setwd("INPUT DIRECTORY")'
  prefs: []
  type: TYPE_NORMAL
- en: source("NAME OF THE RSI SYSTEM FILE IN THE FOLDER")
  prefs: []
  type: TYPE_NORMAL
- en: require(quantmod)
  prefs: []
  type: TYPE_NORMAL
- en: require(PerformanceAnalytics)`
  prefs: []
  type: TYPE_NORMAL
- en: Load data with quantmod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: getSymbols('SPY', from='2000-06-01')
  prefs: []
  type: TYPE_NORMAL
- en: returns = dailyReturn(Cl(SPY), type='log')
  prefs: []
  type: TYPE_NORMAL
- en: Generate data frame of data and targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: data = featureGen(SPY, returns)
  prefs: []
  type: TYPE_NORMAL
- en: targets = coredata(returns)
  prefs: []
  type: TYPE_NORMAL
- en: targets[targets>=0] = 1
  prefs: []
  type: TYPE_NORMAL
- en: targets[targets<0] = -1
  prefs: []
  type: TYPE_NORMAL
- en: targets = as.factor(targets)
  prefs: []
  type: TYPE_NORMAL
- en: Run the system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVMClassifModel(data[30:nrow(data),], targets[30:length(targets)], returns,
    lookback = 252, ktype = "C-svc", crossvalid = 10, C = 60)
  prefs: []
  type: TYPE_NORMAL
- en: Lastly I would like to know if anyone has a better idea to share code. This
    is not very good way and I would like to improve it. I also welcome suggestions
    to make the code more efficient. I also want to make clear that I do not think
    that this is a good system and I know that it could be improved by adding predictors
    and all, it is only to give an example to follow-up on the post mentioned above.
  prefs: []
  type: TYPE_NORMAL
- en: QF
  prefs: []
  type: TYPE_NORMAL
