["```\n\n\trisk.contribution = w * (cov %*% w)\n\tsum( abs(risk.contribution - mean(risk.contribution)) )\n\n```", "```\n\n#--------------------------------------------------------------------------\n# Equal Risk Contribution portfolio\n#--------------------------------------------------------------------------\nia = aa.test.create.ia()\nn = ia$n\t\t\n\n# 0 <= x.i <= 1\nconstraints = new.constraints(n, lb = 0, ub = 1)\n\n# SUM x.i = 1\nconstraints = add.constraints(rep(1, n), 1, type = '=', constraints)\t\t\n\n# find Equal Risk Contribution portfolio \nw = find.erc.portfolio(ia, constraints)\t\n\n# compute Risk Contributions \t\nrisk.contributions = portfolio.risk.contribution(w, ia)\n\n```", "```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod,quadprog,corpcor,lpSolve')\n\ttickers = spl('SPY,QQQ,EEM,IWM,EFA,TLT,IYR,GLD')\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T)\n\t\tfor(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\t\t\t\t\t\n\tbt.prep(data, align='remove.na', dates='1990::2011')\n\n\t#*****************************************************************\n\t# Code Strategies\n\t#****************************************************************** \n\tprices = data$prices   \n\tn = ncol(prices)\n\n\t# find week ends\n\tperiod.ends = endpoints(prices, 'weeks')\n\t\tperiod.ends = period.ends[period.ends > 0]\n\n\t#*****************************************************************\n\t# Create Constraints\n\t#*****************************************************************\n\tconstraints = new.constraints(n, lb = 0, ub = 1)\n\n\t# SUM x.i = 1\n\tconstraints = add.constraints(rep(1, n), 1, type = '=', constraints)\t\t\n\n\t#*****************************************************************\n\t# Create Portfolios\n\t#*****************************************************************\t\t\t\n\tret = prices / mlag(prices) - 1\n\tstart.i = which(period.ends >= (63 + 1))[1]\n\n\tweight = NA * prices[period.ends,]\n\tweights = list()\n\t\t# Equal Weight 1/N Benchmark\n\t\tweights$equal.weight = weight\n\t\t\tweights$equal.weight[] = ntop(prices[period.ends,], n)\t\n\t\t\tweights$equal.weight[1:start.i,] = NA\n\n\t\tweights$min.var = weight\n\t\tweights$min.maxloss = weight\n\t\tweights$min.mad = weight\n\t\tweights$min.cvar = weight\n\t\tweights$min.cdar = weight\n\t\tweights$min.cor.insteadof.cov = weight\n\t\tweights$min.mad.downside = weight\n\t\tweights$min.risk.downside = weight\n\n\t\t# following optimizations use a non-linear solver\n\t\tweights$erc = weight\t\t\n\t\tweights$min.avgcor = weight\t\t\n\n\trisk.contributions = list()\t\n\t\trisk.contributions$erc = weight\t\t\n\n\t# construct portfolios\n\tfor( j in start.i:len(period.ends) ) {\n\t\ti = period.ends[j]\n\n\t\t# one quarter = 63 days\n\t\thist = ret[ (i- 63 +1):i, ]\n\n\t\t# create historical input assumptions\n\t\tia = create.historical.ia(hist, 252)\n\t\t\ts0 = apply(coredata(hist),2,sd)\t\t\n\t\t\tia$correlation = cor(coredata(hist), use='complete.obs',method='pearson')\n\t\t\tia$cov = ia$correlation * (s0 %*% t(s0))\n\n\t\t# construct portfolios based on various risk measures\n\t\tweights$min.var[j,] = min.risk.portfolio(ia, constraints)\n\t\tweights$min.maxloss[j,] = min.maxloss.portfolio(ia, constraints)\n\t\tweights$min.mad[j,] = min.mad.portfolio(ia, constraints)\n\t\tweights$min.cvar[j,] = min.cvar.portfolio(ia, constraints)\n\t\tweights$min.cdar[j,] = min.cdar.portfolio(ia, constraints)\n\t\tweights$min.cor.insteadof.cov[j,] = min.cor.insteadof.cov.portfolio(ia, constraints)\n\t\tweights$min.mad.downside[j,] = min.mad.downside.portfolio(ia, constraints)\n\t\tweights$min.risk.downside[j,] = min.risk.downside.portfolio(ia, constraints)\n\n\t\t# following optimizations use a non-linear solver\t\t\n\t\tconstraints$x0 = weights$erc[(j-1),]\n\t\tweights$erc[j,] = find.erc.portfolio(ia, constraints)\t\t\n\n\t\tconstraints$x0 = weights$min.avgcor[(j-1),]\n\t\tweights$min.avgcor[j,] = min.avgcor.portfolio(ia, constraints)\t\t\t\t\t\t\n\n\t\trisk.contributions$erc[j,] = portfolio.risk.contribution(weights$erc[j,], ia)\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Create strategies\n\t#****************************************************************** \t\t\n\tmodels = list()\n\tfor(i in names(weights)) {\n\t\tdata$weight[] = NA\n\t\t\tdata$weight[period.ends,] = weights[[i]]\t\n\t\tmodels[[i]] = bt.run.share(data, clean.signal = F)\n\t}\n\n\t#*****************************************************************\n\t# Create Report\n\t#****************************************************************** \n\tmodels = rev(models)\n\n\t# Plot perfromance\n\tplotbt(models, plotX = T, log = 'y', LeftMargin = 3)\t    \t\n\t\tmtext('Cumulative Performance', side = 2, line = 1)\n\n\t# Plot Strategy Statistics  Side by Side\n\tplotbt.strategy.sidebyside(models)\n\n\t# Plot transition maps\n\tlayout(1:len(models))\n\tfor(m in names(models)) {\n\t\tplotbt.transition.map(models[[m]]$weight, name=m)\n\t\t\tlegend('topright', legend = m, bty = 'n')\n\t}\n\n\t# Plot risk contributions\n\tlayout(1:len(risk.contributions))\n\tfor(m in names(risk.contributions)) {\n\t\tplotbt.transition.map(risk.contributions[[m]], name=paste('Risk Contributions',m))\n\t\t\tlegend('topright', legend = m, bty = 'n')\n\t}\n\n\t# Compute portfolio concentration and turnover stats based on the\n\t# On the property of equally-weighted risk contributions portfolios by S. Maillard, \n\t# T. Roncalli and J. Teiletche (2008), page 22\n\t# http://www.thierry-roncalli.com/download/erc.pdf\n\tout = compute.stats( rev(weights),\n\t\tlist(Gini=function(w) mean(portfolio.concentration.gini.coefficient(w), na.rm=T),\n\t\t\tHerfindahl=function(w) mean(portfolio.concentration.herfindahl.index(w), na.rm=T),\n\t\t\tTurnover=function(w) 52 * mean(portfolio.turnover(w), na.rm=T)\n\t\t\t)\n\t\t)\n\n\tout[] = plota.format(100 * out, 1, '', '%')\n\tplot.table(t(out))\n\n```"]