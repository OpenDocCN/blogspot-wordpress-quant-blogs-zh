["```\n#-------------------------------------------------------------------------------\n# Name:        download CBOE futures\n# Purpose:     get VIX futures data from CBOE, process data to a single file\n#\n#\n# Created:     15-10-2011\n# Copyright:   (c) Jev Kuznetsov 2011\n# Licence:     BSD\n#-------------------------------------------------------------------------------\n#!/usr/bin/env python\n\nfrom urllib import urlretrieve\nimport os\nfrom pandas import *\nimport datetime\nimport numpy as np\n\nm_codes = ['F','G','H','J','K','M','N','Q','U','V','X','Z'] #month codes of the futures\ncodes = dict(zip(m_codes,range(1,len(m_codes)+1)))\n\ndataDir = os.path.dirname(__file__)+'/data'\n\ndef saveVixFutureData(year,month, path, forceDownload=False):\n    ''' Get future from CBOE and save to file '''\n    fName = \"CFE_{0}{1}_VX.csv\".format(m_codes[month],str(year)[-2:])\n    if os.path.exists(path+'\\\\'+fName) or forceDownload:\n        print 'File already downloaded, skipping'\n        return\n\n    urlStr = \"http://cfe.cboe.com/Publish/ScheduledTask/MktData/datahouse/{0}\".format(fName)\n    print 'Getting: %s' % urlStr\n    try:\n        urlretrieve(urlStr,path+'\\\\'+fName)\n    except Exception as e:\n        print e\n\ndef buildDataTable(dataDir):\n    \"\"\" create single data sheet \"\"\"\n    files = os.listdir(dataDir)\n\n    data = {}\n    for fName in files:\n        print 'Processing: ', fName\n        try:\n            df = DataFrame.from_csv(dataDir+'/'+fName)\n\n            code = fName.split('.')[0].split('_')[1]\n            month = '%02d' % codes[code[0]]\n            year = '20'+code[1:]\n            newCode = year+'_'+month\n            data[newCode] = df\n        except Exception as e:\n            print 'Could not process:', e\n\n    full = DataFrame()\n    for k,df in data.iteritems():\n        s = df['Settle']\n        s.name = k\n        s[s<5] = np.nan\n        if len(s.dropna())>0:\n            full = full.join(s,how='outer')\n        else:\n            print s.name, ': Empty dataset.'\n\n    full[full<5]=np.nan\n    full = full[sorted(full.columns)]\n\n    # use only data after this date\n    startDate = datetime.datetime(2008,1,1)\n\n    idx = full.index >= startDate\n    full = full.ix[idx,:]\n\n    #full.plot(ax=gca())\n    print 'Saving vix_futures.csv'\n    full.to_csv('vix_futures.csv')\n\nif __name__ == '__main__':\n\n    if not os.path.exists(dataDir):\n         print 'creating data directory %s' % dataDir\n         os.makedirs(dataDir)\n\n    for year in range(2008,2013):\n        for month in range(12):\n            print 'Getting data for {0}/{1}'.format(year,month+1)\n            saveVixFutureData(year,month,dataDir)\n\n    print 'Raw wata was saved to {0}'.format(dataDir)\n\n    buildDataTable(dataDir)\n\n```", "```\n\"\"\"\nReconstructing VXX from futures data\n\nauthor: Jev Kuznetsov\n\nLicense : BSD\n\"\"\"\nfrom __future__ import division\nfrom pandas import *\nimport numpy as np\n\nclass Future(object):\n    \"\"\" vix future class, used to keep data structures simple \"\"\"\n    def __init__(self,series,code=None):\n        \"\"\" code is optional, example '2010_01' \"\"\"\n        self.series = series.dropna() # price data\n        self.settleDate = self.series.index[-1]\n        self.dt = len(self.series) # roll period (this is default, should be recalculated)\n        self.code = code # string code 'YYYY_MM'\n\n    def monthNr(self):\n        \"\"\" get month nr from the future code \"\"\"\n        return int(self.code.split('_')[1])\n\n    def dr(self,date):\n        \"\"\" days remaining before settlement, on a given date \"\"\"\n        return(sum(self.series.index>date))\n\n    def price(self,date):\n        \"\"\" price on a date \"\"\"\n        return self.series.get_value(date)\n\ndef returns(df):\n    \"\"\" daily return \"\"\"\n    return (df/df.shift(1)-1)\n\ndef recounstructVXX():\n    \"\"\" \n    calculate VXX returns \n    needs a previously preprocessed file vix_futures.csv     \n    \"\"\"\n    X = DataFrame.from_csv('vix_futures.csv') # raw data table\n\n    # build end dates list & futures classes\n    futures = []\n    codes = X.columns\n    endDates = []\n    for code in codes:\n        f = Future(X[code],code=code)\n        print code,':', f.settleDate\n        endDates.append(f.settleDate)\n        futures.append(f)\n\n    endDates = np.array(endDates) \n\n    # set roll period of each future\n    for i in range(1,len(futures)):\n        futures[i].dt = futures[i].dr(futures[i-1].settleDate)\n\n    # Y is the result table\n    idx = X.index\n    Y = DataFrame(index=idx, columns=['first','second','days_left','w1','w2','ret'])\n\n    # W is the weight matrix\n    W = DataFrame(data = np.zeros(X.values.shape),index=idx,columns = X.columns)\n\n    # for VXX calculation see http://www.ipathetn.com/static/pdf/vix-prospectus.pdf\n    # page PS-20\n    for date in idx:\n        i =nonzero(endDates>=date)[0][0] # find first not exprired future\n        first = futures[i] # first month futures class\n        second = futures[i+1] # second month futures class\n\n        dr = first.dr(date) # number of remaining dates in the first futures contract\n        dt = first.dt #number of business days in roll period\n\n        W.set_value(date,codes[i],100*dr/dt)\n        W.set_value(date,codes[i+1],100*(dt-dr)/dt)\n\n        # this is all just debug info\n        Y.set_value(date,'first',first.price(date))\n        Y.set_value(date,'second',second.price(date))\n        Y.set_value(date,'days_left',first.dr(date))\n        Y.set_value(date,'w1',100*dr/dt)\n        Y.set_value(date,'w2',100*(dt-dr)/dt)\n\n    valCurr = (X*W.shift(1)).sum(axis=1) # value on day N\n    valYest = (X.shift(1)*W.shift(1)).sum(axis=1) # value on day N-1\n    Y['ret'] = valCurr/valYest-1    # index return on day N\n\n    return Y\n\n##-------------------Main script---------------------------\n\nY = recounstructVXX()\n\nprint Y.head(30)#\nY.to_csv('reconstructedVXX.csv')\n\n```"]