["```\n\n###############################################################################\n# Load Systematic Investor Toolbox (SIT)\n# https://systematicinvestor.wordpress.com/systematic-investor-toolbox/\n###############################################################################\nsetInternet2(TRUE)\ncon = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))\n    source(con)\nclose(con)\n\n\t#*****************************************************************\n\t# Load historical data\n\t#****************************************************************** \n\tload.packages('quantmod')\t\n\ttickers = 'VISVX'\n\n\tdata <- new.env()\n\tgetSymbols(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T)\n\tfor(i in ls(data)) {\n\t\ttemp = adjustOHLC(data[[i]], use.Adjusted=T)\t\t\t\t\t\t\t\n\n\t\tperiod.ends = endpoints(temp, 'months')\n\t\t\tperiod.ends = period.ends[period.ends > 0]\n\n\t\t# reformat date to match Fama French Data\n\t\tmonthly.dates = as.Date(paste(format(index(temp)[period.ends], '%Y%m'),'01',sep=''), '%Y%m%d')\n\t\tdata[[i]] = make.xts(coredata(temp[period.ends,]), monthly.dates)\n\t}\n\n\t# Fama/French factors\n\tfactors = get.fama.french.data('F-F_Research_Data_Factors', periodicity = 'months',download = T, clean = F)\n\n\t# add factors and align\n\tdata$factors = factors$data / 100\n\tbt.prep(data, align='remove.na', dates='1994::')\n\n```", "```\n\n\t#*****************************************************************\n\t# Facto Loadings Regression over whole period\n\t#****************************************************************** \n\tprices = data$prices\n\t\tnperiods = nrow(prices)\n\t\tdates = index(data$prices)\n\n\t# compute simple returns\t\n\thist.returns = ROC(prices[,tickers], type = 'discrete')\n\t\thist.returns = hist.returns - data$factors$RF\n\t\tcolnames(hist.returns) = 'fund'\n\thist.returns = cbind(hist.returns, data$factors$Mkt.RF,\n\t\t\t\t\tdata$factors$SMB, data$factors$HML)\n\n\tfit.all = summary(lm(fund~Mkt.RF+SMB+HML, data=hist.returns))\n\t\testimate.all = c(fit.all$coefficients[,'Estimate'], fit.all$r.squared)\n\t\tstd.error.all = c(fit.all$coefficients[,'Std. Error'], NA)\n\n```", "```\n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)\n(Intercept) -0.0006828  0.0012695  -0.538    0.591\nMkt.RF       0.9973980  0.0262881  37.941   <2e-16 ***\nSMB          0.5478299  0.0364984  15.010   <2e-16 ***\nHML          0.6316528  0.0367979  17.165   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nMultiple R-squared: 0.9276,     Adjusted R-squared: 0.9262\n\n```", "```\n\n\t#*****************************************************************\n\t# Facto Loadings Regression over 36 Month window\n\t#****************************************************************** \t\t\t\t\t\t\t\n\twindow.len = 36\n\n\tcolnames = spl('alpha,MKT,SMB,HML,R2')\n\testimate = make.xts(matrix(NA, nr = nperiods, len(colnames)), dates)\n\tcolnames(estimate) = colnames\n\tstd.error = estimate\n\n\t# main loop\n\tfor( i in window.len:nperiods ) {\n\t\twindow.index = (i - window.len + 1) : i\n\n\t\tfit = summary(lm(fund~Mkt.RF+SMB+HML, data=hist.returns[window.index,]))\n\t\testimate[i,] = c(fit$coefficients[,'Estimate'], fit$r.squared)\n\t\tstd.error[i,] = c(fit$coefficients[,'Std. Error'], NA)\n\n\t\tif( i %% 10 == 0) cat(i, '\\n')\n\t}\n\n```", "```\n\n\t#*****************************************************************\n\t# Reports\n\t#****************************************************************** \n\tlayout(matrix(1:10,nc=2,byrow=T))\n\n\tfor(i in 1:5) {\t\n\t\t#-------------------------------------------------------------------------\n\t\t# Time plot\n\t\t#-------------------------------------------------------------------------\n\t\test = estimate[,i]\n\t\test.std.error = ifna(std.error[,i], 0)\n\n\t\tplota(est, \n\t\t\tylim = range( c(\n\t\t\t\trange(est + est.std.error, na.rm=T),\n\t\t\t\trange(est - est.std.error, na.rm=T)\t\t\n\t\t\t\t)))\n\n\t\tpolygon(c(dates,rev(dates)), \n\t\t\tc(coredata(est + est.std.error), \n\t\t\trev(coredata(est - est.std.error))), \n\t\t\tborder=NA, col=col.add.alpha('red',50))\n\n\t\test = estimate.all[i]\n\t\test.std.error = std.error.all[i]\n\n\t\tpolygon(c(range(dates),rev(range(dates))), \n\t\t\tc(rep(est + est.std.error,2),\n\t\t\trep(est - est.std.error,2)),\n\t\t\tborder=NA, col=col.add.alpha('blue',50))\n\n\t\tabline(h=0, col='blue', lty='dashed')\n\n\t\tabline(h=est, col='blue')\n\n\t\tplota.lines(estimate[,i], type='l', col='red')\n\n\t\t#-------------------------------------------------------------------------\n\t\t# Histogram\n\t\t#-------------------------------------------------------------------------\n\t\tpar(mar = c(4,3,2,1))\n\t\thist(estimate[,i], col='red', border='gray', las=1,\n\t\t\txlab='', ylab='', main=colnames(estimate)[i])\n\t\t\tabline(v=estimate.all[i], col='blue', lwd=2)\n\t}\n\n```"]