- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-18 15:28:52'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Causality in observational data | Tr8dr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tr8dr.wordpress.com/2014/12/26/causality-in-observational-data/#0001-01-01](https://tr8dr.wordpress.com/2014/12/26/causality-in-observational-data/#0001-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: December 26, 2014 · 10:37 am
  prefs: []
  type: TYPE_NORMAL
- en: In the past had created [clusters](https://tr8dr.wordpress.com/2010/01/22/cointegration-clusters/
    "Cointegration Clusters") on assets to help identify relationships across assets.
      The resulting graphs were useful in identifying assets for use in mean-reverting
    portfolios.   A difficulty in the approach was always around accurately measuring
    the strength of relationships between asset pairs.   I had looked at Granger-causality,
    which is fairly limited in that expects asset relationships to follow a VECM-like
    model, and eventually settled on weighting across a number of techniques as an approximate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Determining causality for more general relationships requires a very different
    approach, where Y ← f(X) + ε.   i.e. f(x) may be an (unknown) non-linear function
    on X.   I came across an interesting paper: “Distinguishing cause from effect
    using observational data: methods and benchmarks” ([link](http://arxiv.org/pdf/1412.3773v1.pdf))
    which builds on work around looking at the asymmetry of the “complexity” of p(Y|X)
    versus p(X|Y), where if  Y ← X (X causes Y), p(Y|X) will tend to have lower complexity
    than p(X|Y).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The paper provides results on two methods: Additive Noise Methods (ANM) and
    Information Geometric Causal Inference (IGCI), where ANM generally did better
    across a variety of scenarios than IGCI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The algorithm for ANM in python-like pseudo-code (taken from the paper):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The paper recommended using a scoring of the Hilbert-Schmidt Independence Criterion
    (HSIC) as the complexity test. I will have to code the above up and see how it
    does on a broad set of assets. The paper did test the CEP benchmark which includes
    some known financial relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Addendum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Am quite busy now with another investigation, but will revisit this with a proper
    implementation.
  prefs: []
  type: TYPE_NORMAL
