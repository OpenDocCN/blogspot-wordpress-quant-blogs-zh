- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-13 00:08:22'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月13日 00:08:22
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: trivial reject'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hacking NASDAQ @ 500 FPS：trivial reject
- en: 来源：[http://hackingnasdaq.blogspot.com/2009/12/trivial-reject.html#0001-01-01](http://hackingnasdaq.blogspot.com/2009/12/trivial-reject.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2009/12/trivial-reject.html#0001-01-01](http://hackingnasdaq.blogspot.com/2009/12/trivial-reject.html#0001-01-01)
- en: Ok down to business, problem is there's a 64b unique index(OrderID) we need
    test against so a straight up array aint going to cut it. Next choice is std::map<>
    with a key of orderID storing a pointer to the order structure. Please note we
    are testing against 700M / messages on the MSFT symbol, so reject rate is 99.7%
    of all messages. Also note this is ITCH3.1 so we need to do ascii->u64 converion
    on the orderid which is reflected in the perf numbers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，言归正传，问题是我们需要测试一个 64 位的唯一索引（OrderID），所以直接的数组不够用。下一个选择是使用 std::map<>，使用 orderID
    作为键，存储指向 order 结构的指针。请注意，我们在 MSFT 符号上测试了 7 亿条消息，因此拒绝率是所有消息的 99.7%。此外，请注意，这是 ITCH3.1，因此我们需要对
    orderid 进行 ascii->u64 转换，这也反映在性能数字中。
- en: First up std::map<> which ... fails to run. Allocats a metric ton of memory
    and barely gets beyond an hour or two of trading. assuming theres enough memory..
    clocks in at 553cycles / message or 135ns@4.1ghz.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是 std::map<>，它……无法运行。需要分配大量内存，基本上无法超过一两个小时的交易时间，假设内存足够……在4.1ghz下表现为553cycles/消息或135ns。
- en: Next up is an unordered map, as we dont need it sorted and.. same thing. metric
    ton of memory and fails to complete. assuming you have the memory, it clocks in
    at  285cycles/message or 69ns@4.1ghz.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个无序 map，因为我们不需要它排序，……情况一样。需要大量内存，并且无法完成。假设你有足够的内存，它的速度是 285cycles/消息或者69ns@4.1ghz。
- en: Which is hmm not bad if you have 64GB of RAM and your run of the mill programmer,
    but we can do better. The trick is we have information that can`t be expressed
    to STL, and that`s that orderID only uses 34bits of data, and the working set
    is roughly 18k orders so lets exploit it using a bitmap array + 16 way set, similar
    to a hardware set associtave cache.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有 64GB 内存且是你的许多程序员，这个速度还不错，但我们可以做得更好。诀窍在于我们拥有无法表达给 STL 的信息，那就是 orderID 只使用了
    34 位数据，工作集大约有 18k 个订单，因此让我们利用位图数组 + 16 通道集来利用它，类似于硬件组相联高速缓存。
- en: How it works is use the 20 LSB as an index into a 1bit array, resulting in a
    128KB array (2^20 / 8 /1024). If the bit is set, then theres valid entries in
    the set, otherwise theres nothing there - trivial reject. If there is entries
    then its a simple 16 entry search space which is easily parallelizable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原理是，将 20 位的 LSB 用作 1bit 数组的索引，从而得到 128KB 数组（2^20 / 8 / 1024）。如果位已设置，则集合中有有效条目，否则就没有
    - 简单的拒绝。如果存在条目，那么就是一个简单的 16 个条目搜索空间，很容易并行化。
- en: Thus going from OrderID -> Order_t* is nice fast O(1) or O(16) depending on
    how you look at it with a nice fixed memory footprint. Problems arise if the set
    overflows and theres data loss, but the highest occupancy is a wopping 3 entries
    for MSFT so in practice we drop down to 8 entries in the set.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此从 OrderID -> Order_t* 转换速度快，O(1) 或 O(16)，具体取决于你的看法，并且有一个不错的固定内存占用空间。如果集合溢出和数据丢失，问题就会出现，但
    MSFT 的最大占用空间为 3 个条目，实际上我们会在集合中降到 8 个条目。
- en: Total footprint = (2^20 / 8) + (2^20 * 16 * 8)  ~= 128MB. However as stated
    in optimization 101, keeping the footprint down is critical and we can reduce
    this further. Given each set entry, we know its lower 20bits are unique, and the
    same for all set entries. OrderID has 34 significant bits, so that drops down
    to significant 14bits thus we can use a 16bit value in the set search space instead
    of the full 64bit, woot.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总占用空间 = (2^20 / 8) + (2^20 * 16 * 8)  约等于 128MB。然而，正如优化 101 中所述，保持占用空间最低是至关重要的，我们可以进一步减少这个值。对于每个集合条目，我们知道它的低
    20 位是唯一的，并且对所有的设置条目都是相同的。OrderID 有 34 个有效位，因此降到了 14 位有效位，我们可以在设置搜索空间中使用 16 位值，而不是全
    64 位，太好了。
- en: Footprint = (2^20 / 8) + (2^20 * 16 * 2) ~= 32MB
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 占用空间 = (2^20 / 8) + (2^20 * 16 * 2) 约等于 32MB
- en: As the data indicates a max 3 entry occupancy, its safe to reduce to 8 entries
    per set leaving
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据表明最大的占用是 3 个条目，所以可以将集合减少到每个集合 8 个条目。
- en: Footprint = (2^20 / 8) + (2^20 * 8 * 2) ~= 16.125MB
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 占用空间 = (2^20 / 8) + (2^20 * 8 * 2) 约等于 16.125MB
- en: Which gets close to fitting entirely in the L3 cacahe! The numbers clock in
    , averaging 108 cycles / message, meaning 26ns / msg @ 4.1GHz for a full book
    update on a single symbol. Keep in mind this is  mostly just the reject code at
    play, its straight C(no assembler/intrinsics), were dealing with ITCH3.1 and the
    book update code is pretty shitty and eats into the average. So .... theres still
    plenty of milage to get that number down!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎完全适应L3缓存！数字达到，平均每个消息108个周期，这意味着在一个符号上以4.1GHz的速度进行全书更新，每个消息需要26ns。请记住，这主要只是拒绝代码在起作用，它是直接的C语言（没有汇编/内部函数）,
    我们处理的是ITCH3.1，而且书籍更新代码非常糟糕且影响了平均值。所以...还有很多余地来降低这个数字！
