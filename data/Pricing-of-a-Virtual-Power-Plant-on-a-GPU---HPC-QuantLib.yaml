- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-17 23:40:36'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-17 23:40:36
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Pricing of a Virtual Power Plant on a GPU – HPC-QuantLib
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟电厂在GPU上的定价 - HPC-QuantLib
- en: 来源：[https://hpcquantlib.wordpress.com/2011/10/03/pricing-of-a-virtual-power-plant-on-a-gpu-with-cuda-4-0/#0001-01-01](https://hpcquantlib.wordpress.com/2011/10/03/pricing-of-a-virtual-power-plant-on-a-gpu-with-cuda-4-0/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://hpcquantlib.wordpress.com/2011/10/03/pricing-of-a-virtual-power-plant-on-a-gpu-with-cuda-4-0/#0001-01-01](https://hpcquantlib.wordpress.com/2011/10/03/pricing-of-a-virtual-power-plant-on-a-gpu-with-cuda-4-0/#0001-01-01)
- en: Even the pricing of  a simple virtual power plant (VPP) is challenging. Main
    reasons are the high number of possible states of the VPP and the large number
    of possible exercise dates because often a VPP is priced as a bermudan-style option
    with hourly exercise rights. The implementation effort for an exact pricing engine
    based on finite difference methods (see e.g.[1]) or based on least squares Monte-Carlo
    is comparable large. As shown in [1] Monte-Carlo combined with  *perfect foresight*
    optimization can result in a very good approximation. The algorithm consists of
    a Monte-Carlo path generator and a dynamic programming optimization part, which
    calculates the optimal load schedule plan for each path separately. The stochastic
    processes involved are outlined in [1].
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是简单的虚拟电厂（VPP）的定价也是具有挑战性的。主要原因是VPP可能的状态数量和大范围的行权日期，通常因为VPP被定价为带有每小时行权权的百慕大风格期权。基于有限差分方法（例如[1]）或基于最小二乘蒙特卡洛的准确定价引擎的实现工作量相当大。如[1]所示，结合蒙特卡洛和*完美洞察*优化可以得到非常好的近似。算法包括一个蒙特卡洛路径生成器和一个动态规划优化部分，它为每条路径分别计算最优负载计划。涉及的随机过程在[1]中有概述。
- en: 'The CUDA based GPU implementation is available [here.](http://hpc-quantlib.de/src/gpuvpp.zip)
     It depends on the latest [QuantLib](http://www.quantlib.org/) version from the
    [SVN trunk](http://sourceforge.net/p/quantlib/code/HEAD/tree/) or the upcoming
    QuantLib 1.2 release and CUDA 4.0\. The corresponding C++ implementation is a
    speed-optimized version of the test-case VPPTest::testVPPPricing. This version
    also supports multi-threading. The following hardware was used to compare both
    implementations:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CUDA based GPU实现可在此处获得[](http://hpc-quantlib.de/src/gpuvpp.zip)。它依赖于最新的[QuantLib](http://www.quantlib.org/)版本，该版本来自[SVN主干](http://sourceforge.net/p/quantlib/code/HEAD/tree/)或即将发布的QuantLib
    1.2版本，以及CUDA 4.0。相应的C++实现是测试用例VPPTest::testVPPPricing的速度优化版本。此版本还支持多线程。以下硬件用于比较两种实现：
- en: 'CPU: Core i5@3.0 GHz, quad-core'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU：Core i5@3.0 GHz，四核
- en: 'GPU: GTX560@810/1620MHz, 336 cores'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU：GTX560@810/1620MHz，336核心
- en: As can be seen in the diagram below the GPU outperforms the CPU roughly by a
    factor 100 for single precision and a factor of 50 if the GPU is using double
    precision.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如下面图表所示，对于单精度计算，GPU的性能比CPU高出大约100倍，如果GPU使用双精度计算，则性能高出大约50倍。
- en: '[![](img/2f397d5601eeda411479450936cf3049.png "plot")](https://hpcquantlib.wordpress.com/wp-content/uploads/2011/10/plot.png)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/2f397d5601eeda411479450936cf3049.png "plot")](https://hpcquantlib.wordpress.com/wp-content/uploads/2011/10/plot.png)'
- en: 'The CUDA implementation consists of the following files:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CUDA实现包括以下文件：
- en: '**gpuvpppricingengine.hpp / gpuvpppricingengine.cpp**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**gpuvpppricingengine.hpp / gpuvpppricingengine.cpp**'
- en: A QuantLib pricing engine for a simple VPP based on a Monte-Carlo simulation
    and *perfect foresight* optimization via dynamic programming. The physical size
    of the Monte-Carlo simulation is controlled by the following parameters of the
    constructor
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基于蒙特卡洛模拟的简单VPP定价引擎，并通过动态规划实现*完美洞察*优化。蒙特卡洛模拟的物理大小由构造函数以下参数控制
- en: 'Size nSimulations: number of Monte-Carlo simulations carried out.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大小nSimulations：进行的蒙特卡洛模拟的数量。
- en: 'bool antithetic: enables/disables antithetic sampling'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: bool antithetic：启用/禁用反向采样
- en: 'Size blockSize: number of threads in a CUDA block.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 块大小（blockSize）：CUDA块中的线程数。
- en: 'Size gridSize: number of CUDA blocks that are grouped together in a simulation
    kernel.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网格大小（gridSize）：在模拟内核中组合在一起的CUDA块的数量。
- en: '**gpuvpppricingengine_kernel.hpp'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**gpuvpppricingengine_kernel.hpp'
- en: gpuvpppricingengine_kernel.cu/ gpuvpppricingengine_kernel.def** The CUDA implementation
    consists of two kernels. The first kernel is the Monte-Carlo path generator, which
    calculates the paths on hourly granularity and stores them in the global memory
    of the graphic card.. The technics used are outlined e.g. in [2], [3] and [4].
    The second kernel performs the optimization of the load schedule based on dynamic
    programming. The memory layout of this step depends on the number of possible
    states of the VPP because every possible state is stored in the shared memory
    of the GPU. The number of states is given by ![N_{states} = 2t_{up}+t_{down}](img/066a806e76f3edf64c42e18a4a12f09f.png).
    CUDA does not support efficient dynamic shared memory allocation. Therefore the
    sizes of all shared memory arrays must be given at compile time. To allow an optimal
    use of the limited shared memory capacity different kernels with different ![N_{states}](img/5324d92011efdd13b5e327379bce90d9.png)
    values are generated using X-macros and the appropriate kernel is chosen at runtime.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: gpuvpppricingengine_kernel.cu/ gpuvpppricingengine_kernel.def** CUDA实现包括两个内核。第一个内核是蒙特卡洛路径生成器，它计算以每小时粒度为基础的路径，并将它们存储在图形卡的全球内存中。使用的技术在[2]，[3]和[4]中概述。第二个内核执行基于动态规划的负载调度优化。这一步骤的内存布局取决于VPP可能状态的数量，因为每个可能的状态都存储在GPU的共享内存中。状态的数量由
    ![N_{states} = 2t_{up}+t_{down}](img/066a806e76f3edf64c42e18a4a12f09f.png) 给出。CUDA不支持有效的动态共享内存分配。因此，所有共享内存数组的大小必须在编译时给出。为了充分利用有限的共享内存容量，使用X-宏生成不同
    ![N_{states}](img/5324d92011efdd13b5e327379bce90d9.png) 值的多个内核，并在运行时选择合适的内核。
- en: '**cudatype.hpp**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**cudatype.hpp**'
- en: defines basic CUDA types, especially the typedef for the type “real” can be
    used to compile the code either for single or double precision.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 定义基本CUDA类型，特别是“real”类型的typedef，可用于编译单精度或双精度代码。
- en: '**gpurand.hpp**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**gpurand.hpp**'
- en: C++ interface for a GPU random number generator
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: C++接口，用于GPU随机数生成器
- en: '**gpucurand.hpp / gpucurand.cpp / gpucurand_kernel.hpp / gpucurand_kernel.cu**
    implementation of the GPURand interface based on the CURAND library, which is
    part of CUDA 4.0.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**gpucurand.hpp / gpucurand.cpp / gpucurand_kernel.hpp / gpucurand_kernel.cu**
    基于CURAND库的GPURand接口实现，后者是CUDA 4.0的一部分。'
- en: '**[1] this blog, [VPP Pricing III: Exact Pricing based on Finite Difference Methods.](https://hpcquantlib.wordpress.com/2011/08/07/vpp-pricing-iii-exact-pricing-based-on-finite-difference-methods/)**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[1] 本博客，[VPP定价III：基于有限差分法精确定价](https://hpcquantlib.wordpress.com/2011/08/07/vpp-pricing-iii-exact-pricing-based-on-finite-difference-methods/)。**'
- en: '**[2] L. Howes, D. Thomas, [Efficient Random Number Generation and Application
    Using CUDA](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch37.html).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[2] L. Howes, D. Thomas, [使用CUDA进行高效随机数生成及其应用](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch37.html)。'
- en: '[3] A. Bernemann, R. Schreyer, K. Spanderen, [Accelerating Exotic Option Pricing
    and Model Calibration Using GPUs](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1753596)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] A. Bernemann, R. Schreyer, K. Spanderen, [使用GPU加速异国情调期权定价和模型校准](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1753596)'
- en: '[4] M. Joshi, [Graphical Asian Options](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1473563)**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] M. Joshi, [图形亚洲期权](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1473563)**'
