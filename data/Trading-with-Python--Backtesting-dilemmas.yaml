- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 15:42:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 15:42:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Trading with Python: Backtesting dilemmas'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Python 交易：回测困境
- en: 来源：[http://tradingwithpython.blogspot.com/2014/05/backtesting-dilemmas.html#0001-01-01](http://tradingwithpython.blogspot.com/2014/05/backtesting-dilemmas.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://tradingwithpython.blogspot.com/2014/05/backtesting-dilemmas.html#0001-01-01](http://tradingwithpython.blogspot.com/2014/05/backtesting-dilemmas.html#0001-01-01)
- en: 'A quantitative trader faces quite some challenges on a way to a successful
    trading strategy. Here I’ll discuss a couple dilemmas involved in backtesting.
    A good trading simulation must :'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 量化交易者在成功交易策略的道路上面临着不少挑战。在这里，我将讨论在回测中涉及的一些困境。一个好的交易模拟必须：
- en: Be good approximation of the real world. This one is of course the most important
    requirement .
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的近似于现实世界。显然，这是最重要的要求。
- en: 'Allow unlimited flexibility: the tooling should not stand in the way of testing
    out-of-the-box ideas. Everything that can be quantified should be usable.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许无限制的灵活性：工具不应该阻碍测试现成的想法。可以量化的任何东西都应该可用。
- en: Be easy to implement & maintain. It is all about productivity and being able
    to test many ideas to find one that works.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 易于实施和维护。这全是关于生产力和能够测试许多想法以找到一个有效的方法。
- en: Allow for parameter scans, walk-forward testing and optimisations. This is needed
    for investigating strategy performance and stability depending on strategy parameters.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许进行参数扫描、前进测试和优化。这是为了调查策略性能和稳定性，这取决于策略参数。
- en: 'The problem with satisfying all of the requirements above is that #2 and #3
    are conflicting ones. There is no tool that can do everything without the cost
    of high complexity (=low maintainablity). Typically, a third party point-and-click
    tool will severely limit freedom to test with custom signals and odd portfolios,
    while at the other end of the spectrum a custom-coded diy solution will require
    tens or more hours to implement with high chances of ending up with cluttered
    and unreadable code. So in attempt to combine the best of both worlds, let’s start
    somewehere in the middle: use an existing backtesting framework and adapt it to
    our taste.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 满足上述所有要求的问题在于，第2和第3点是相互冲突的。没有工具能不付出高复杂度（=低可维护性）的成本就做到一切。通常，第三方点击工具会严重限制测试自定义信号和奇怪投资组合的自由，而在另一端，定制编码的解决方案可能需要数十小时甚至更多时间来实现，并且最终可能得出杂乱无章、难以理解的代码。因此，试图结合这两个世界的最佳特点，让我们从中间开始：使用现有的回测框架并将其调整到我们的口味。
- en: 'In the following posts I’ll be looking at three possible candidates I’ve found:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的文章中，我将研究三种我找到的可能候选者：
- en: '[Zipline](https://github.com/quantopian/zipline) is widely known and is the
    engine behind Quantopian'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zipline**（[https://github.com/quantopian/zipline](https://github.com/quantopian/zipline)）广为人知，是
    Quantopian 的引擎'
- en: '[PyAlgotrade](http://gbeced.github.io/pyalgotrade/) seems to be actively developed
    and well-documented'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyAlgotrade** 似乎在积极开发且文档齐全'
- en: '[pybacktest](https://github.com/ematvey/pybacktest) is a light-weight vector-based
    framework with that might be interesting because of its simplicity and performance.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pybacktest**（[https://github.com/ematvey/pybacktest](https://github.com/ematvey/pybacktest)）是一个轻量级的向量框架，可能因其简单性和性能而有趣。'
- en: I’ll be looking at suitability of these tools benchmarking them against a hypothetical
    trading strategy. If none of these options fits my requirements I will have to
    decide if I want to invest into writing my own framework (at least by looking
    at the available options I’ll know what does
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我将研究这些工具的适用性，将它们与一个假设的交易策略进行基准测试。如果没有这些选项符合我的要求，我需要决定是否愿意投资编写自己的框架（至少通过查看可用的选项，我会知道什么是
- en: '*not*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*不是*'
- en: work) or stick with custom code for each strategy.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 工作）或者坚持为每个策略使用定制代码。
- en: First one for the evaluation is
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个用于评估的是
- en: '**Zipline**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zipline**'
- en: .
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: My first impression of Zipline and
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我对 Zipline 的第一印象和
- en: '[Quantopian](https://www.quantopian.com/)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Quantopian**'
- en: is a positive one. Zipline is backed by a team of developers and is tested in
    production, so quality (bugs) should be great. There is good documentation on
    the
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个积极的评价。Zipline 由一个开发团队支持，并在生产中得到测试，所以质量（缺陷）应该非常好。在
- en: '[site](https://www.quantopian.com/help#api-doco)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站**：[https://www.quantopian.com/help#api-doco](https://www.quantopian.com/help#api-doco)'
- en: and an example
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 和一个示例
- en: '[notebook on github](http://nbviewer.ipython.org/github/twiecki/financial-analysis-python-tutorial/blob/master/3.%20Backtesting%20using%20Zipline.ipynb)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub 上的笔记本**：[http://nbviewer.ipython.org/github/twiecki/financial-analysis-python-tutorial/blob/master/3.%20Backtesting%20using%20Zipline.ipynb](http://nbviewer.ipython.org/github/twiecki/financial-analysis-python-tutorial/blob/master/3.%20Backtesting%20using%20Zipline.ipynb)'
- en: .
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: To get a hang of it, I downloaded the exampe notebook and started playing with
    it. To my disappointment I quickly run into trouble at the first example
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了掌握它，我下载了示例笔记本并开始与之交互。令我失望的是，我在第一个示例中很快就遇到了麻烦。
- en: '*Simplest Zipline Algorithm: Buy Apple*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**最简单的Zipline算法：买入苹果**'
- en: '. The dataset has only 3028 days, but running this example just took forever.
    Here is what I measured:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集只有3028天，但运行这个示例似乎永远也完不成。以下是我测量的结果：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I did not expect stellar performance as zipline is an event-based backtester,
    but almost a minute for 3000 samples is just too bad. This kind of performance
    would be prohibitive for any kind of scan or optimization. Another problem would
    arise when working with larger datasets like intraday data or multiple securities,
    which can easily contain hundreds of thousands of samples.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有期待Zipline这个基于事件的回测工具会有出色的表现，但是3000个样本几乎要花一分钟的时间实在是太糟糕了。这种性能对于任何类型的扫描或优化来说都是不可接受的。当处理更大的数据集，比如日内数据或多种证券时，这个问题会更加严重，这些数据集很容易包含数十万个样本。
- en: 'Unfortunately, I will have to drop Zipline from the list of useable backtesters
    as it does not meet my requirement #4 by a fat margin.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我不得不将Zipline从可用的回测工具列表中删除，因为它远远没有达到我的要求#4。
- en: In the following post I will be looking at PyAlgotrade.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的文章中，我将看看PyAlgotrade。
- en: '*Note: My current system is a couple of years old, running an AMD Athlon II
    X2 @2800MHZ with 3GB of RAM. With vector-based backtesting I’m used to calculation
    times of less than a second for a single backtest and a minute or two for a parameter
    scan. A basic walk-forward test with 10 steps and a parameter scan for 20x20 grid
    would result in a whooping 66 hours with zipline. I’m not that paitient.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：我当前的系统有几岁了，运行着AMD Athlon II X2 @2800MHZ和3GB的RAM。在使用基于向量的回测时，我习惯于单个回测计算时间少于一秒，参数扫描一分钟或两分钟。基本的向前测试，10步和20x20网格的参数扫描，使用zipline将耗时惊人的66小时。我没有那么有耐心。**'
