- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-12 19:33:50'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月12日 19:33:50
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: C++ Disruptor | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ Disruptor | 编码市场
- en: 来源：[https://etrading.wordpress.com/2012/09/20/c-disruptor/#0001-01-01](https://etrading.wordpress.com/2012/09/20/c-disruptor/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2012/09/20/c-disruptor/#0001-01-01](https://etrading.wordpress.com/2012/09/20/c-disruptor/#0001-01-01)
- en: C++ Disruptor
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++ Disruptor
- en: September 20, 2012
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2012年9月20日
- en: I’ve collected some handy links on the [Disruptor](https://etrading.wordpress.com/disruptor/)
    and lock free programming in general [here](https://etrading.wordpress.com/disruptor/).
    I’m coding up a Windows specific C++ Disruptor implementation at the moment, using
    the [Interlocked*](http://msdn.microsoft.com/en-us/library/aa908785.aspx) family
    of Win32 API functions. I’m using the volatile keyword, in the Microsoft sense
    to enforce the code ordering intent on the compiler, and the Interlocked functions
    to address cache coherence when there are multiple writers to, for instance, the
    RingBuffer cursor.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我收集了一些关于[Disruptor](https://etrading.wordpress.com/disruptor/)和无锁编程的有用链接 [此处](https://etrading.wordpress.com/disruptor/)。我目前正在编写一个特定于Windows的C++
    Disruptor实现，使用[Interlocked*](http://msdn.microsoft.com/en-us/library/aa908785.aspx)系列Win32
    API函数。我使用volatile关键字，按照微软的意义，来强制编译器执行代码顺序意图，并使用Interlocked函数来解决当有多个写入者时，例如，对RingBuffer游标的缓存一致性。
