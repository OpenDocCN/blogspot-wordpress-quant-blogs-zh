- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-12 23:45:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-12 23:45:48'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'hacking NASDAQ @ 500 FPS: PCIe latency'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以每秒 500 张图片的速度黑客纳斯达克：PCIe 延迟
- en: 来源：[http://hackingnasdaq.blogspot.com/2014/05/pcie-latency.html#0001-01-01](http://hackingnasdaq.blogspot.com/2014/05/pcie-latency.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://hackingnasdaq.blogspot.com/2014/05/pcie-latency.html#0001-01-01](http://hackingnasdaq.blogspot.com/2014/05/pcie-latency.html#0001-01-01)
- en: Ever wondered what the RTT is over PCI Express ? or you may be asking wtf is
    PCIe RTT ?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经想知道 PCI Express 上的 RTT 是多少吗？或者你可能会问 PCIe RTT 是什么鬼？
- en: PCIe is quite similar to ethernet in the sense its a packet bus, where as PCI
    and PCI-X are the older more traditional style parallel bus. The oversimplified
    way to look it is, inside your PC/Server is a small ethernet network with an MTU
    of 128B. Could rant about PCIe quite a bit but suggest an excellent write up
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PCIe 在某种意义上与以太网相似，它是一个数据包总线，而 PCI 和 PCI-X 是更传统的并行总线。简单地来看，你的 PC/服务器内部就是一个 MTU
    为 128B 的小型以太网网络。关于 PCIe 可以大谈特谈，但建议阅读一篇优秀的文章
- en: '[here](http://xillybus.com/tutorials/pci-express-tlp-pcie-primer-tutorial-guide-1)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[here](http://xillybus.com/tutorials/pci-express-tlp-pcie-primer-tutorial-guide-1)'
- en: to see how it all works.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 来看看它是如何运作的。
- en: By PCIe RTT it means the time to ping/pong a packet from one EndPoint (think
    ethernet IP) to some other EndPoint and back again. The same as an ICMP ping to
    some IP address. How do you write such a test ? ... with an fpga of course!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 PCIe RTT，它表示从一个端点（以太网 IP）到另一个端点并返回一个数据包的来回时间。就像对某个 IP 地址进行 ICMP ping 一样。你该如何编写这样的测试呢？……当然是用
    FPGA！
- en: Xilinx`s Virtex 7 has a variety of SKU`s having between 1-4 PCIe Gen3 interfaces
    at 8 lines wide @ 8 GT/sec (note GT == Giga Transactions not GBytes). Thus the
    test is simply replying to an appropriately addressed PCIe TLP packet.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Xilinx 的 Virtex 7 有多种 SKU，具有 1-4 个 PCIe Gen3 接口，每个接口宽度为 8 行 @ 8 GT/sec（注意 GT
    == Giga Transactions 而不是 GBytes）。因此，测试就是简单地回复一个合适寻址的 PCIe TLP 数据包。
- en: For the more visually inclined it looks like
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于视觉倾向的人，他看起来是这样的
- en: Things to note are the i7 4771 is intels latest and greatest CPU with a native
    PCIe Gen3 interface wired directly to the CPU pads/pins. Also note this is all
    "Desktop" grade hardware tho... significance of this is debatable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，i7 4771是英特尔最新和最好的CPU，具有本地PCIe Gen3接口，直接连接到CPU的引脚/接点。另外，请注意这都是“台式机”级别硬件...
    这个意义是值得商榷的。
- en: And what do the numbers look like ? ..... Pretty shity actually, surprisingly
    shitty infact.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数字是什么样的？.....实际上相当糟糕，令人惊讶地糟糕。
- en: Above is a plot of the RTT in nanosecconds.  X axis is sample count Y axis is
    nanos. You can see its ~ 850ns for the full Round trip... quite high to be honest.
    Time to dig in and investigate wtf the time has gone - and yes the card is in
    the correct PCIe slot!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上面是RTT的纳秒绘图。X轴是样本计数，Y轴是纳秒。你可以看到完整的往返时间约为850ns... 老实说有些高。是时候深入调查一下时间去了——是的，卡槽是正确的PCIe插槽！
- en: Why so high? here`s a short list of ideas
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这么高？这里是一些想法的简短清单
- en: V7 PCIe end point
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: V7 PCIe端点
- en: 1337 ping code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1337 ping代码
- en: Intel PCIe EP
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔PCIe EP
- en: Intel Memory Model
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔内存模型
- en: The easiest of these is my "1337 ping code" as the code is already in a development
    style setup  thus getting Waves (waveforms) is straight forward.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的是我的“1337 ping代码”，因为代码已经处于开发样式设置中，因此获得波形是直接的。
- en: Above is how a typical debug session goes. Run some simulation, wait a bit and
    check out the waves. In the above pic you can see the clock ticking over every
    4ns, and 2 (out of 4) of Xilinx`s new PCIe IPCore interfaces. They are the m_axis_cq_*
    signals and m_axis_rq_* signals. The CPU`s register writes show up on the m_axis_cq_*
    interface, while our writes (to CPU`s DDR) are issued  on the s_axis_rq_* interface.
    If you want to dig deeper check out the
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以上是典型调试会话的进行方式。运行一些模拟，稍等片刻再检查波形。在上图中，你可以看到时钟每4ns进行一次滴答，并且有2（共4个）Xilinx`s新PCIe
    IPCore接口。它们是m_axis_cq_*信号和m_axis_rq_*信号。CPU的寄存器写入显示在m_axis_cq_*接口上，而我们写入（到CPU的DDR）被发出到s_axis_rq_*接口。如果你想更深入地了解，请查看
- en: '[spec](http://www.xilinx.com/support/documentation/ip_documentation/pcie3_7x/v1_1/pg023_v7_pcie_gen3.pdf)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[规格](http://www.xilinx.com/support/documentation/ip_documentation/pcie3_7x/v1_1/pg023_v7_pcie_gen3.pdf)'
- en: We can then count the number of cycles between receiving the CPU write (yellow
    line), and the first cycle of the "1337 ping code" write into CPU DDR (red line).
    Which is ~16 cycles where the interface is running at 250mhz means 4ns * 16 cycles
    = 64ns - not particularly great but workable. Meaning the search for the remaining
    ~800ns remains .... inconclusive.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以计算接收CPU写入（黄线）和“1337 ping代码”写入CPU DDR（红线）的第一个周期之间的周期数。在这里大约是16个周期，接口以250MHz运行意味着4ns
    * 16个周期 = 64ns - 并不是特别好但可以工作。这意味着寻找其余的~800ns仍然....没有结论。
- en: '.... next up will investigate writing directly into the CPU`s L2 cache from
    the fpga, thus avoiding any shenanigans involving the CPU`s DDR.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '...接下来将研究直接从FPGA写入CPU的L2缓存，从而避免涉及CPU的DDR的任何把戏。'
