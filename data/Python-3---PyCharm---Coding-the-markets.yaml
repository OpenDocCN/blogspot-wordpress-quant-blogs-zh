- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-12 19:31:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-12 19:31:41
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Python 3 & PyCharm | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3 & PyCharm | 编码市场
- en: 来源：[https://etrading.wordpress.com/2015/07/01/python-3-pycharm/#0001-01-01](https://etrading.wordpress.com/2015/07/01/python-3-pycharm/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2015/07/01/python-3-pycharm/#0001-01-01](https://etrading.wordpress.com/2015/07/01/python-3-pycharm/#0001-01-01)
- en: Python 3 & PyCharm
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 3 & PyCharm
- en: July 1, 2015
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: July 1, 2015
- en: I’ve been coding in [Python](http://www.python.org) since 2000, and for a long
    time my dev env preferences haven’t changed. Like many I used Python 1.5.2 with
    a basic text editor, often vim, for a long time. Once the 2.x series of Python
    releases started I held off and stuck with 1.5.2 for a long time. I never used
    1.6.x. I can’t remember whether I made the jump to 2.1 or 2.2, but I’ve been using
    2.x for a long time now, usually with notepad++ as my editor. Part of the reason
    is that it takes time for the extensive Python ecosystem to catch up and port
    all the libraries and frameworks. Anyway, I’ve just finished a contract where
    I used Python 3.3 and the [PyCharm IDE](https://www.jetbrains.com/pycharm/), and
    it was a breath of fresh air. I’d never consider development in Java or C++ without
    an IDE, and my preferences are [IntelliJ](https://www.jetbrains.com/idea/) & [MS
    Visual C++](http://blogs.msdn.com/b/vcblog/) respectively. Previously I’d felt
    an IDE was unnecessary in Python, mainly because the rapid cycle time is so quick.
    Unlike C++ the cycle is not edit, compile, link, test. In Python one just edits
    and tests, which makes the printf style of debugging far more effective. PyCharm
    turbocharges the debugging process with breakpoints and visual object graph traversal.
    And during coding it interactively highlights syntax errors and variable references.
    That’s a big time saver too, since it makes code run at the first attempt without
    throwing syntax errors. +1 for PyCharm!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我从2000年开始使用[Python](http://www.python.org)编程，很长一段时间里，我的开发环境偏好没有改变。像许多人一样，我使用Python
    1.5.2版本和一个基本的文本编辑器，通常是vim，很长时间。Python 2.x系列发布之初，我持观望态度，很长时间内都坚持使用1.5.2版本。我从未使用过1.6.x。我不记得我是跳到2.1还是2.2版本的，但现在我已经使用Python
    2.x很长时间了，通常使用notepad++作为我的编辑器。部分原因是广泛的Python生态系统需要时间来追赶上，并将所有库和框架移植过来。无论如何，我刚完成了一个合同，其中我使用了Python
    3.3和[PyCharm IDE](https://www.jetbrains.com/pycharm/)，这让我感觉焕然一新。我从不考虑在没有IDE的情况下用Java或C++进行开发，而我的偏好分别是[IntelliJ](https://www.jetbrains.com/idea/)和[MS
    Visual C++](http://blogs.msdn.com/b/vcblog/)。以前我认为在Python中使用IDE是不必要的，主要因为快速的迭代周期。与C++不同，周期不是编辑、编译、链接、测试。在Python中，只需编辑和测试，这使得`printf`风格的调试更加有效。PyCharm通过断点和可视化对象图遍历，极大地加速了调试过程。在编码过程中，它交互式地高亮显示语法错误和变量引用。这也是节省时间的一个大因素，因为它使得代码在第一次尝试就能运行，而不会出现语法错误。为PyCharm点赞！
- en: So what about the shift from Python 2.x to 3.x ?  For me the important points
    have been the move to more iterator based coding. The iteritems( )/iterkeys( )/itervalues(
    ) methods no longer exist as items( )/keys( )/values( ) no longer return lists,
    they return iterable view objects. Those view objects are not stand in replacements
    for lists. And I had to get used to using the next( ) operator with generators.
    And, of course, print is now a function and no longer a statement. But apart from
    that it was straightforward.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么从Python 2.x升级到3.x带来了哪些改变呢？对我来说，重要的变化是向更多基于迭代器的编程方式转变。`iteritems()`/`iterkeys()`/`itervalues()`方法已不再存在，因为`items()`/`keys()`/`values()`不再返回列表，而是返回可迭代的视图对象。这些视图对象并不是列表的替代品。我必须习惯使用`next()`运算符与生成器一起使用。当然，`print`现在是一个函数，不再是语句。但除此之外，升级过程是顺利的。
- en: '**Update 2015-07-01**: I’ve just been pinged by an old coding compadre who
    downloaded PyCharm on my recommendation, and needs a tip on fixing up interpreter
    paths to pick up libs. I had to read a couple of StackOverflow articles to figure
    this out too, so I though I’d document it here. I’m using PyCharm Community Edition
    4.5.2, and to add libraries to my interpreter search path I go to the File/Settings
    dialog. In the left had tree control, under the Project: <myproj> node I select
    Project Interpreter. Then I click on the cog icon in the top right, next to the
    selected interpreter, and choose the More… option. This throws up another dialog:
    Project Interpreters. On the right are several icons. The bottom one is a mini
    tree control that shows a pop up tooltip saying “show paths for the selected interpreter”.
    Click on that, and finally you get the Interpreter Paths dialog, and you can add
    your library. Phew!! Could this config be buried any deeper? IntelliJ: sort it
    out! PyCharm is very, very good, but this is quite a useability flaw….'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新 2015-07-01**：我刚刚被一个老编程战友ping了，他按照我的推荐下载了PyCharm，现在需要一个关于修复解释器路径以便获取库的小技巧。我之前也得阅读了几篇StackOverflow文章才搞明白这个，所以我觉得在这里记录下来。我使用的是PyCharm
    Community Edition 4.5.2，要向我的解释器搜索路径中添加库，我会前往文件/设置对话框。在左侧的树状控件中，在项目节点<myproj>下，我选择项目解释器。然后我点击右上角的齿轮图标，旁边是所选的解释器，选择更多…选项。这会弹出另一个对话框：项目解释器。右侧有多个图标。最下面的是一个小型树状控件，它会弹出一个工具提示，显示“显示所选解释器的路径”。点击那个，最后你就能看到解释器路径对话框，然后你可以添加你的库。谢天谢地！！这个配置能再藏得深一点吗？IntelliJ：解决这个问题！PyCharm非常好，但这个确实是一个相当大的可用性缺陷….'
