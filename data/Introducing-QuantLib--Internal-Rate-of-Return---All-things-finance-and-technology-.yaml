- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-18 06:45:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-18 06:45:20'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Introducing QuantLib: Internal Rate of Return | All things finance and technology…'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 QuantLib：内部收益率 | 金融和技术方方面面……
- en: 来源：[https://mhittesdorf.wordpress.com/2013/03/03/introducing-quantlib-internal-rate-of-return/#0001-01-01](https://mhittesdorf.wordpress.com/2013/03/03/introducing-quantlib-internal-rate-of-return/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mhittesdorf.wordpress.com/2013/03/03/introducing-quantlib-internal-rate-of-return/#0001-01-01](https://mhittesdorf.wordpress.com/2013/03/03/introducing-quantlib-internal-rate-of-return/#0001-01-01)
- en: Welcome back!  In my previous post, we learned about the term structure of interest
    rates in the context of bond pricing. Given the term structure, we saw how to
    calculate the price of a fixed-rate bond by calculating the net present value
    (NPV) of the bond’s future cash flows,  consisting of its annual coupon payments
    plus the final premium repayment.  The bond’s price, if you recall, was calculated
    using a constant interest rate, which, as stated in my previous post, is equivalent
    to a flat interest rate term structure.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来！在我之前的帖子中，我们了解了债券定价背景下的利率期限结构。鉴于期限结构，我们看到了如何通过计算债券未来现金流的净现值（NPV）来计算固定利率债券的价格，包括其年息票支付和最终溢价偿还。如果你还记得，债券的价格是使用一个恒定的利率计算的，正如我之前的帖子中所述，这相当于一个平的利率期限结构。
- en: Now, let’s assume that we know the price of a bond or, more generally, the present
    value of a sequence of future cash flows and we would like to know what interest
    rate was used to arrive at the NPV. This rate of return is commonly referred to
    as the investment’s ‘internal rate of return’ (IRR) or, when applied to a bond,
    the bond’s ‘yield to maturity’ (YTM).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们知道债券的价格，或者更一般地说，未来现金流的现值，我们想知道用于计算 NPV 的利率是多少。这种回报率通常被称为投资的“内部收益率”（IRR），或者，当应用于债券时，被称为债券的“到期收益率”（YTM）。
- en: 'Let’s look at the cash flows from the bond example we’ve been considering thus
    far. The bond has a face value of 100, pays annual coupons of 5% and has a price
    (NPV) of 105.66\. The bond’s cash flows, in order are, 5.0, 5.0 and 105.0\. Therefore,
    to compute the yield to maturity of the bond, we need to solve for the interest
    rate, r, in the following equation:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下迄今为止我们一直在考虑的债券示例的现金流。该债券的面值为 100，年息票为 5%，现价（NPV）为 105.66。债券的现金流依次是 5.0、5.0
    和 105.0。因此，要计算债券的到期收益率，我们需要解出以下方程中的利率 r：
- en: '**105.66 = 5/(1+r) + 5/(1+r)^2 + 105/(1+r)^3**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**105.66 = 5/(1+r) + 5/(1+r)^2 + 105/(1+r)^3**'
- en: 'It turns out that there is no analytical, algebraic method to determine the
    value of r.  As such, the equation must be solved numerically, using a solver
    method.   In the example code that follows, I use the [Bisection](http://quantlib.org/reference/class_quant_lib_1_1_bisection.html)
    class, one of several solver classes supported by QuantLib to back out the  bond’s
    yield to maturity.  Other solvers available in QuantLib include: [Brent](http://quantlib.org/reference/class_quant_lib_1_1_bisection.html),
    [Secant](http://quantlib.org/reference/class_quant_lib_1_1_secant.html), [Ridder](http://quantlib.org/reference/class_quant_lib_1_1_ridder.html),
    [Newton](http://quantlib.org/reference/class_quant_lib_1_1_ridder.html) and [FalsePosition](http://quantlib.org/reference/class_quant_lib_1_1_false_position.html).
     Each one of these solver classes will find the zero, or root, of a function by
    varying a single input to the function.  The solver will terminate its search
    when the return value of the function is less than or equal to the *accuracy*
    parameter, which is defined to be .000001 in the code below.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，没有解析的代数方法可以确定 r 的值。因此，必须使用数值方法数值解方程。在接下来的示例代码中，我使用 [二分法](http://quantlib.org/reference/class_quant_lib_1_1_bisection.html)
    类，这是 QuantLib 支持的几种求解器类之一，来反推债券的到期收益率。QuantLib 中可用的其他求解器包括：[布伦特](http://quantlib.org/reference/class_quant_lib_1_1_bisection.html)、[割线](http://quantlib.org/reference/class_quant_lib_1_1_secant.html)、[里德尔](http://quantlib.org/reference/class_quant_lib_1_1_ridder.html)、[牛顿](http://quantlib.org/reference/class_quant_lib_1_1_ridder.html)和[虚位法](http://quantlib.org/reference/class_quant_lib_1_1_false_position.html)。这些求解器类中的每一个都将通过改变函数的单个输入来找到函数的零点或根。当函数的返回值小于或等于*准确性*参数时，求解器将终止其搜索，在下面的代码中，准确度参数被定义为
    .000001。
- en: The function passed to the Bisection solver in this example takes two forms.
    The first is a *functor* class, which is a class with operator() overridden. The
    second is a lambda expression, which is a type of [closure](http://en.wikipedia.org/wiki/Closure_(computer_science)) introduced
    in the latest C++ standard, [C++ 11](http://en.wikipedia.org/wiki/C%2B%2B11).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中传递给二分法求解器的函数有两种形式。第一种是*函数对象*类，它是一个重载了operator()的类。第二种是一个lambda表达式，它是[C++
    11](http://en.wikipedia.org/wiki/C%2B%2B11)引入的一种类型，是一种[closure](http://en.wikipedia.org/wiki/Closure_(computer_science))。
- en: 'The code to calculate the bond’s yield to maturity is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 计算债券到期收益率的代码如下：
- en: '#include <cstdlib>'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#include <cstdlib>'
- en: '#include <iostream>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <iostream>'
- en: '#define BOOST_AUTO_TEST_MAIN'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '#define BOOST_AUTO_TEST_MAIN'
- en: '#include <boost/test/unit_test.hpp>'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <boost/test/unit_test.hpp>'
- en: '#include <boost/detail/lightweight_test.hpp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <boost/detail/lightweight_test.hpp>'
- en: '#include <ql/quantlib.hpp>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <ql/quantlib.hpp>'
- en: '#include <vector>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <vector>'
- en: '#include <ql/instruments/bonds/fixedratebond.hpp>'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <ql/instruments/bonds/fixedratebond.hpp>'
- en: namespace {
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: namespace {
- en: using namespace QuantLib;class IRRSolver {
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: using namespace QuantLib;class IRRSolver {
- en: 'public:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 'public:'
- en: 'explicit IRRSolver(const Leg& cashFlows, Real npv): _cashFlows(cashFlows),_npv(npv){};'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'explicit IRRSolver(const Leg& cashFlows, Real npv): _cashFlows(cashFlows),_npv(npv){};'
- en: Real operator() (const Rate& rate) const {
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Real operator() (const Rate& rate) const {
- en: InterestRate interestRate(rate, ActualActual(ActualActual::Bond), Compounded,
    Annual);
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: InterestRate interestRate(rate, ActualActual(ActualActual::Bond), Compounded,
    Annual);
- en: return CashFlows::npv(_cashFlows, interestRate, false) – _npv;
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: return CashFlows::npv(_cashFlows, interestRate, false) – _npv;
- en: '}'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'private:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'private:'
- en: const Real _npv;
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: const Real _npv;
- en: const Leg& _cashFlows;
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: const Leg& _cashFlows;
- en: '};'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: BOOST_AUTO_TEST_CASE(testCalculateBondYieldToMaturity) {
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: BOOST_AUTO_TEST_CASE(testCalculateBondYieldToMaturity) {
- en: Calendar calendar = UnitedStates(UnitedStates::GovernmentBond);
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Calendar calendar = UnitedStates(UnitedStates::GovernmentBond);
- en: const Natural settlementDays = 3;
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: const Natural settlementDays = 3;
- en: Date today = Date::todaysDate();
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Date today = Date::todaysDate();
- en: Date issueDate = today;
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Date issueDate = today;
- en: Date terminationDate = issueDate + Period(3, Years);
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Date terminationDate = issueDate + Period(3, Years);
- en: Rate rate = .03;
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Rate rate = .03;
- en: InterestRate couponRate(.05, ActualActual(ActualActual::Bond), Compounded, Annual);
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InterestRate couponRate(.05, ActualActual(ActualActual::Bond), Compounded, Annual);
- en: Real faceValue = 100.0;
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Real faceValue = 100.0;
- en: std::vector<Rate> coupons(3, couponRate);
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: std::vector<Rate> coupons(3, couponRate);
- en: Schedule schedule(issueDate, terminationDate, Period(Annual), calendar,
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Schedule schedule(issueDate, terminationDate, Period(Annual), calendar,
- en: Unadjusted, Unadjusted, DateGeneration::Backward, false);
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Unadjusted, Unadjusted, DateGeneration::Backward, false);
- en: FixedRateBond fixedRateBond(settlementDays, faceValue, schedule, coupons);
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: FixedRateBond fixedRateBond(settlementDays, faceValue, schedule, coupons);
- en: boost::shared_ptr<YieldTermStructure> flatForwardRates(new FlatForward(issueDate,
    rate, ActualActual(ActualActual::Bond), Compounded, Annual));
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: boost::shared_ptr<YieldTermStructure> flatForwardRates(new FlatForward(issueDate,
    rate, ActualActual(ActualActual::Bond), Compounded, Annual));
- en: Handle<YieldTermStructure> flatTermStructure(flatForwardRates);
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Handle<YieldTermStructure> flatTermStructure(flatForwardRates);
- en: boost::shared_ptr<PricingEngine> bondEngine(new DiscountingBondEngine(flatTermStructure));
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: boost::shared_ptr<PricingEngine> bondEngine(new DiscountingBondEngine(flatTermStructure));
- en: fixedRateBond.setPricingEngine(bondEngine);
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fixedRateBond.setPricingEngine(bondEngine);
- en: Real npv = fixedRateBond.NPV();
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Real npv = fixedRateBond.NPV();
- en: 'std::cout << “NPV of bond is: ” << npv << std::endl;'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: std::cout << “债券的现值是：” << npv << std::endl;
- en: //solve for yield to maturity using bisection solver
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: //使用二分法求解到期收益率的函数
- en: Bisection bisection;
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Bisection bisection;
- en: Real accuracy=0.000001, guess=.10;
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Real accuracy=0.000001, guess=.10;
- en: Real min=.0025, max=.15;
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Real min=.0025, max=.15;
- en: //invoke bisection solver with IRRSolver functor
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: //使用IRRSolver函数对象调用二分法求解器
- en: Real irr = bisection.solve(IRRSolver(fixedRateBond.cashflows(), npv),
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Real irr = bisection.solve(IRRSolver(fixedRateBond.cashflows(), npv),
- en: accuracy, guess, min, max);
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: accuracy, guess, min, max);
- en: 'std::cout << “Bond yield to maturity (IRR) is: ” << irr << std::endl;'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: std::cout << “债券到期收益率（IRR）为：” << irr << std::endl;
- en: //invoke bisection solver with C++ 11 lambda expression
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: //使用C++ 11 lambda表达式调用二分法求解器
- en: irr = bisection.solve([&] (const Rate& rate){ return CashFlows::npv(fixedRateBond.cashflows(),
    InterestRate(rate, ActualActual(ActualActual::Bond), Compounded, Annual), false)
    – npv;},
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: irr = bisection.solve([&] (const Rate& rate){ return CashFlows::npv(fixedRateBond.cashflows(),
    InterestRate(rate, ActualActual(ActualActual::Bond), Compounded, Annual), false)
    – npv;},
- en: accuracy, guess, min, max);
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: accuracy, guess, min, max);
- en: 'std::cout << “Bond yield to maturity (IRR) is: ” << irr << std::endl;'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: std::cout << “债券到期收益率（IRR）为：” << irr << std::endl;
- en: '}'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'The output of this code when run is:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码的输出结果为：
- en: '`NPV of bond is: 105.657'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`债券的现值是：105.657`'
- en: 'Bond yield to maturity (IRR) is: 0.0300004'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 债券到期收益率（IRR）为：0.0300004
- en: 'Bond yield to maturity (IRR) is: 0.0300004`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 债券到期收益率（IRR）为：`0.0300004`
- en: As you can see both IRR solver methods produce the same result, 3%, which is
    indeed the interest rate of the bond.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，两种IRR求解方法产生了相同的结果，即3%，这确实是债券的利率。
- en: I hope you enjoyed this post. Please feel free to leave comments or questions
    that you might have. In the next installment of this series, I’ll examine how
    to calculate the sensitivity of a bond’s price to a change in the level of interest
    rates. Until then, have fun with QuantLib!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您喜欢这篇文章。请随时留下您可能有的评论或问题。在本系列的下一部分中，我将探讨如何计算债券价格对利率水平的变化的敏感性。在此之前，祝您在使用QuantLib时玩得开心！
- en: About Mick Hittesdorf
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于Mick Hittesdorf
- en: I'm a versatile technical leader with a passion for data analytics, data science
    and Big Data technology. I have experience working for both large and small organizations,
    in a variety of roles. I've been responsible for the management and operations
    of a global data science and analytics platform, developed low latency, proprietary
    trading systems, managed software development teams, defined enterprise architecture
    strategies, written white papers and blogs, published articles in industry journals
    and delivered innovative solutions to clients, both in a consulting and technical
    sales capacity. My current areas of focus include Big Data, data engineering,
    data science, R, and Cloud computing
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一位多才多艺的技术领导者，对数据分析、数据科学和大数据技术充满热情。我在大型和小型组织中都有工作经验，担任过各种角色。我曾负责管理一个全球数据科学和分析平台，开发了低延迟的专有交易系统，管理过软件开发团队，制定了企业架构策略，撰写了白皮书和博客，在行业期刊上发表文章，并以咨询和技术销售的身份向客户交付创新解决方案。我当前的关注领域包括大数据、数据工程、数据科学、R和云计算。
