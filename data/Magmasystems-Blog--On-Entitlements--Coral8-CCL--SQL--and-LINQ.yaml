- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:02:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:02:28
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Magmasystems Blog: On Entitlements, Coral8 CCL, SQL, and LINQ'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Magmasystems Blog: 关于权益、Coral8 CCL、SQL和LINQ'
- en: 来源：[http://magmasystems.blogspot.com/2008/05/on-entitlements-coral8-ccl-sql-and-linq.html#0001-01-01](http://magmasystems.blogspot.com/2008/05/on-entitlements-coral8-ccl-sql-and-linq.html#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://magmasystems.blogspot.com/2008/05/on-entitlements-coral8-ccl-sql-and-linq.html#0001-01-01](http://magmasystems.blogspot.com/2008/05/on-entitlements-coral8-ccl-sql-and-linq.html#0001-01-01)
- en: One of the nice things about having kids that are a little older is that it
    gives me time to putter around on my laptop while watching the Yankees games on
    TV. I am not doing day-to-day development in Coral8, having handed that aspect
    of the project over to HH. However, I wanted to see if the entitlements processing
    of our system could be done in Coral8, which made logical sense.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 孩子稍微大一点的好处之一就是，它让我在看洋基队比赛的时候，有时间为我的笔记本电脑做些琐事。我现在不在Coral8进行日常开发，因为这方面的工作已经交给了HH。然而，我想看看我们的系统的权益处理是否可以在Coral8中完成，这在逻辑上是有意义的。
- en: 'A brief recap: Our CEP system takes a number of atomic events, puts them through
    the Coral8 cruncher, and produces derived events. However, we don’t want everyone
    to see these derived events. We might have information in a derived event that
    a Prop Trader should not see, or we might have information about a certain financial
    sector that should be hidden from someone on a trading desk who does not cover
    that sector.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 简要回顾：我们的CEP系统取出一系列原子事件，将它们送入Coral8处理器，产生派生事件。然而，我们不希望每个人都看到这些派生事件。我们可能在派生事件中有某些交易员不应该看到的信息，或者我们可能有关于某个金融部门的某些信息，应该隐藏在某交易台不负责该部门的人面前。
- en: In addition, we have different kinds of notification mechanisms (GUIs, message
    buses, email, chat, SMS, etc) that should be utilized depending on the severity
    level of an event. We don’t want to send several hundred emails to a trader for
    informational events. However, we might want to email and SMS a trader if we have
    a “red alert” type of event.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们有各种通知机制（图形用户界面、消息总线、电子邮件、聊天、短信等），应根据事件严重程度使用。我们不希望对于信息事件向交易员发送数百封电子邮件。然而，如果我们有一个“红色警报”类型的事件，我们可能会想通过电子邮件和短信通知交易员。
- en: So, we will turn to a familiar pattern called the
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们将转向一个熟悉的模式，称为
- en: '**Recipient List**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**收件人列表**'
- en: . This is one of the well-documented patterns in the book
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: . 这是书中一个有详细文档的模式
- en: '**[Enterprise Integration Patterns](http://www.eaipatterns.com/)**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**[企业集成模式](http://www.eaipatterns.com/)**'
- en: . I get a good amount of email that asks me for advice on becoming a trading
    systems developer. My advice is to run, not walk, to this website and book. Most
    of this stuff is old hack to experienced trading systems developers, but the use
    cases (especially the one by Jonathan Simon) is worth its weight in gold.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我收到很多邮件，询问我如何成为一名交易系统开发人员。我的建议是，跑过去，而不是慢慢走，去这个网站和预订这本书。对于有经验的交易系统开发人员来说，这些东西大多是陈词滥调，但用例（尤其是乔纳森·西蒙的一个案例）物超所值。
- en: We have come up with a schema and database of entitlement information that marries
    our users/groups list, severity levels, notification mechanisms, and derived events.
    As every derived event gets generated by our CEP system, we want to put it through
    the “entitlements grinder” and come up with a Recipient List of who can see what
    information in the message, and how they want to be notified of its occurrence.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经制定了一个关于权益信息的架构和数据库，该架构和数据库将我们的用户/组列表、严重程度级别、通知机制和派生事件相结合。每当我们的CEP系统生成一个派生事件，我们都希望将其送入“权益加工厂”，得出一个收件人列表，以确定谁可以看到消息中的哪些信息，以及他们希望如何得知事件的发生。
- en: This seems to be a perfect task for a CEP engine. It can be just one more additional
    “enrichment filter” whose input we attach to the output of the derived event stream.
    The output of this enrichment filter consists of the (possibly modified) derived
    event and the Recipient List.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一个完美的任务，适合用CEP引擎。它可能只是一个额外的“丰富过滤器”，其输入连接到派生事件流的输出。这个丰富过滤器的输出包括（可能修改后的）派生事件和收件人列表。
- en: As an initial step, we implemented the Recipient List Generator as a single
    SQL query using SQL Server 2005\. It is a single query that consists of 2 inner
    joins and 2 outer joins. It works fairly well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个初步步骤，我们实现了收件人列表生成器作为一个SQL查询使用SQL Server 2005。这是一个由2个内连接和2个外连接组成的单条查询。它工作得相当好。
- en: 'When I was watching the Yankees game yesterday, I tried porting this query
    to Coral8\. I could not get any variation of this query to compile properly, and
    when I tried to decompose the query into 4 streams, I got totally different results
    that what SQL Server gave me. Ideally, “Streaming SQL” languages should be a superset
    of SQL92\. So, in Coral8, if I mirror each SQL Server table as a Coral8 Window
    with a “KEEP ALL” property, then I should be able to use my SQL Query directly.
    I would like to do something like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我昨天看洋基队比赛时，我尝试将这个查询移植到Coral8中。我无法让这个查询的任何变体正确编译，当我试图将查询分解为4个流时，得到的结果与SQL Server完全不同。理想的“流式SQL”语言应该是SQL92的超集。所以，在Coral8中，如果我每个SQL
    Server表都映射为一个带有“KEEP ALL”属性的Coral8窗口，那么我应该能够直接使用我的SQL查询。我想做这样的事情：
- en: INSERT INTO RecipientListOutputStream
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO RecipientListOutputStream
- en: SELECT *[my original SQL query]*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT *[我的原始SQL查询]*
- en: I have given the guys from Coral8 a homework assignment, and asked them to try
    to take my query and schema and make it work in Coral8.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我给Coral8的团队布置了家庭作业，让他们尝试使用我的查询和模式让它在Coral8中运行。
- en: So, after a frustrating two hours in which I tried to decipher the Coral8 reference
    documentation and compiler, I decided to turn to another strategy. For shits-and-giggles,
    I decided to try to write my SQL query in LINQ. I downloaded the experimental
    Visual LINQ Query Builder from
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在花了两个小时试图解读Coral8的参考文档和编译器后，我决定采取另一种策略。出于好玩的心态，我决定尝试用LINQ来写我的SQL查询。我从
- en: '[http://code.msdn.microsoft.com/vlinq](http://code.msdn.microsoft.com/vlinq)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.msdn.microsoft.com/vlinq](http://code.msdn.microsoft.com/vlinq)'
- en: . I created a new Visual Studio project, pointed the LINQ data sources to the
    entitlements database, and started plugging away on the VLINQ. In about ten minutes,
    I had a full LINQ query that implemented my SQL Server query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个新的Visual Studio项目，将LINQ数据源指向权益数据库，并开始在VLINQ上努力工作。大约十分钟后，我写出了一个完整的LINQ查询，实现了我的SQL
    Server查询。
- en: '*(Note: VLINQ was fairly slow on my laptop, and I soon gave up on it, preferring
    to code the query in LINQ myself. However, Coral8 and other CEP vendors should
    look at it as a prototype of a visual code generator.)*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: （注：在我的笔记本上，VLINQ相当慢，我很快就放弃它了，更愿意自己用LINQ写查询。然而，Coral8和其他CEP供应商应该把它看作是视觉代码生成器的原型。）
- en: LINQ has a lot of goodness to it. LINQ is pervasive, and all flavors of LINQ
    are being developed. I can very well imagine that Microsoft is looking at versions
    of LINQ that could handle streaming data. Right now, I think that it would be
    fairly easy to hook up LINQ queries in a pipeline that would handle simple queries
    on streaming data. Adding streaming SQL constructs is very doable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ有很多优点。LINQ无处不在，而且所有种类的LINQ都在开发中。我很容易想象微软正在研究能够处理流数据的LINQ版本。现在，我认为将LINQ查询连接到处理流数据的水管上会相当简单。增加流式SQL构造是完全可以做到的。
- en: If Microsoft was to come out with a Streaming LINQ that is available as part
    of .NET, how would this affect the world of CEP? An immediate casualty might be
    NEsper, but that’s OK, since NEsper is just Aaron’s side project right now. But,
    longer term, I think that a combination of WCF, Streaming LINQ, and a version
    of Microsoft Analysis Services that was further geared to real-time streams would
    be a killer to the rest of the CEP industry. (Of course, technology is one thing.
    Getting all of those Java and Linux bigots over to .Net is another thing.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果微软发布了一个作为.NET一部分的Streaming LINQ，这将如何影响CEP（复杂事件处理）的世界？可能的直接受害者可能是NEsper，但没关系，因为NEsper现在只是Aaron的业余项目。然而，从长远来看，我认为WCF（Windows
    Communication Foundation）、Streaming LINQ以及一个更加针对实时流分析的Microsoft Analysis Services的组合将对CEP行业的其他部分产生巨大影响。（当然，技术是一回事。让那些Java和Linux的顽固派转投.NET是另一回事。）
- en: ©2008 Marc Adler - All Rights Reserved
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ©2008 Marc Adler - 保留所有权利
