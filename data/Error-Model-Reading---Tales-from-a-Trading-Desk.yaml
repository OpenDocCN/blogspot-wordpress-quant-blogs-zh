- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:35:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:35:41
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Error Model Reading | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误模型阅读 | 交易台的传说
- en: 来源：[https://mdavey.wordpress.com/2016/03/14/error-model-thoughts/#0001-01-01](https://mdavey.wordpress.com/2016/03/14/error-model-thoughts/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2016/03/14/error-model-thoughts/#0001-01-01](https://mdavey.wordpress.com/2016/03/14/error-model-thoughts/#0001-01-01)
- en: Error Model Reading
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误模型阅读
- en: It’s taken me a while to get round to reading Joe Duffy’s Error Model [article](http://joeduffyblog.com/2016/02/07/the-error-model/)
    – mainly due to the length of the article 🙂  However, like most things Joe write,
    its full of useful information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了一段时间才开始阅读乔·达菲的错误模型 [文章](http://joeduffyblog.com/2016/02/07/the-error-model/)
    - 主要是因为文章太长 🙂 但是，像乔写的大多数东西一样，它充满了有用的信息。
- en: Principles at the beginning of the article appropriately sets the stage for
    the reminder of the article.  A number of people could learn a lot from Joe’s
    writing style and format.  Context is key.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 文章开头的原则恰当地为后面的文章铺平了道路。很多人都可以从乔的写作风格和格式中学到很多东西。上下文非常关键。
- en: Its nice to see a lot of references to the Go language through the article.
     Also, the “Let it crash” and Netflix’s Chaos Monkey references 🙂 in the Reliability,
    Fault-tolerance, and Isolation section 🙂
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 文章中有很多关于 Go 语言的引用，看到这一点感觉很不错。此外，“让它崩溃”和 Netflix 的 Chaos Monkey 引用 🙂 在可靠性、容错性和隔离性部分
    🙂
- en: The “lightweight nature of Midori processes” seems to have been a key design
    decisions.  In many ways its sad that Midori never saw the light of day outside
    of Microsoft
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “Midori 进程的轻量化特性”似乎是一个关键的设计决策。在很多方面，Midori 从未在微软以外的地方见过天日，这让人感到遗憾。
- en: Despite us beginning with Singularity, which used Sing#, a variant of Spec#,
    we quickly moved away to vanilla C# and had to rediscover what we wanted. We ultimately
    ended up in a very different place after living with the model for years.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管我们一开始使用 Singularity，它使用的是 Sing#，一种 Spec# 的变种，但我们很快就转向了纯粹的 C#，不得不重新发现我们想要的东西。多年来，我们最终走上了一条非常不同的道路。
- en: If you don’t have time to read the full article, then at least read the Retrospective
    and Conclusions 🙂  Microsoft Edge took advantage of abandonment in a few areas
    based on the Midori work, coupled with consideration to bring contracts to C++.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有时间阅读整篇文章，那么至少读一下回顾和结论 🙂 微软 Edge 利用了 Midori 工作中的一些废弃区域，并考虑将合同引入 C++。
- en: ~ by mdavey on March 14, 2016.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ~ 由 mdavey 于 2016 年 3 月 14 日撰写。
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Posted in [语言](https://mdavey.wordpress.com/category/languages/)
