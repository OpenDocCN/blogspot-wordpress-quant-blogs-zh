- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:38:22'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:38:22
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Microservies Patterns | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务模式 | 交易台的故事
- en: 来源：[https://mdavey.wordpress.com/2015/11/03/microservies-patterns/#0001-01-01](https://mdavey.wordpress.com/2015/11/03/microservies-patterns/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2015/11/03/microservies-patterns/#0001-01-01](https://mdavey.wordpress.com/2015/11/03/microservies-patterns/#0001-01-01)
- en: Microservice Design Patterns [article](https://dzone.com/articles/microservice-design-patterns)
    offer a view on the software patterns that could be used to build microservices.
     Clearly the proxy and aggregator patterns offer some structure in avoiding REST
    microservice’s overload from a user interface perspective.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务设计模式[文章](https://dzone.com/articles/microservice-design-patterns)提供了一个关于可能用于构建微服务的软件模式的视角。显然，代理和聚合器模式在避免从用户界面角度对REST微服务的过载方面提供了一些结构。
- en: This leads nicely to Ray Nicholus “The Future of Web Development – React, Falcor,
    and ES6” [article](http://engineering.widen.com/blog/future-of-the-web-react-falcor/),
    noting in particular the need to keep things “simple”, avoiding the unnecessary
    request overhead, large number of requests, and needlessly large response payloads,
    which in a trading application can kill performance/latency/user experience, and
    thus the clients.  You won’t get much argument around React from myself, and likewise
    the Falcor I find sensible, since I used such concepts on a number of projects
    back in time (too long ago).  Webpack – agree again.  Overall a good article.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这很自然地引出了Ray Nicholus的“Web开发的未来——React, Falcor, 和 ES6”[文章](http://engineering.widen.com/blog/future-of-the-web-react-falcor/)，特别是强调保持事物“简单”的重要性，避免不必要的请求开销、大量的请求和没有必要的大型响应载荷，这在交易应用中可能会杀死性能/延迟/用户体验，从而杀死客户。你不会从我这里得到太多关于React的争论，同样，我觉得Falcor是合理的，因为我曾在很久以前的项目中使用过这样的概念(太久以前了)。Webpack——再次同意。总的来说，这是一篇好文章。
- en: Moving on to “Do Good Microservices Architectures Spell the Death of the Enterprise
    Service Bus?” which provides a good list of high level challenges of Microservices.
     Its nice to see [Swagger](http://swagger.io/) mentioned around contracts.  Likewise
    a nice callout to in-memory data [grids](https://www.voxxed.com/blog/2015/01/good-microservices-architectures-death-enterprise-service-bus-part-one/),
    and not just the classic data cache.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 转向“Do Good Microservices Architectures Spell the Death of the Enterprise Service
    Bus?”这篇文章，它提供了一个很好的高级挑战列表，关于微服务的。很高兴看到[Swagger](http://swagger.io/)在合约方面的提及。同样，对内存数据[网格](https://www.voxxed.com/blog/2015/01/good-microservices-architectures-death-enterprise-service-bus-part-one/)的提及也很棒，不只是传统的数据缓存。
- en: Microservices are independent, scalable services. A modern architecture uses
    a scalable platform, which allows automating deployment of different technologies
    / services / applications independently. Use the tool(s) of your choice to define
    service contracts, implement (micro)services and service discovery, automate independent
    and scalable deployment. Coordinate different (micro)services and react proactively
    in real time to events by doing event correlation in-memory. That is how you create
    a good microservices architecture.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 微服务是独立的、可扩展的服务。现代架构使用可扩展的平台，允许独立自动部署不同的技术/服务/应用程序。使用您选择的工具定义服务合约，实现(微)服务和服务发现，自动化独立和可扩展的部署。协调不同的(微)服务，实时主动对事件进行事件相关联处理。这就是创建良好微服务架构的方法。
- en: One of the thorny questions that needs to be decide from a software stack perspective,
    is the language of choice that the microservices will be implemented in.  If we
    assume for this discussion that REST+JSON are used to define the microservice
    contract, then some may lean towards a JavaScript stack for the microservice to
    leverage JSON.  Others may take the Java road, and incur the DTO overhead.  Time
    to consider Falcor again?  Another option is to avoid the standard road, and consider
    Clojure.  On the [Clojure](http://blog.juxt.pro/posts/why-clojurescript-matters.html)
    road, you could leverage [Prismatics Schema](https://github.com/Prismatic/schema)
    and [compojure-api](https://github.com/metosin/compojure-api) (swagger’d) to declare
    lightweight data contracts – code is data, data is code.  At the end of the day,
    the Clojure is still running on the well known two VM world (JavaScript and JVM)
    and similar to one of the arguments of Node.js as the server software stack, offers
    the developers a consistent experience from client to server, rather than requiring
    different skillsets/teams
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从软件堆栈的角度来看，需要解决的一个棘手问题就是微服务将采用哪种编程语言实现。如果我们假设在这个讨论中使用REST+JSON来定义微服务合同，那么有些人可能会倾向于使用JavaScript堆栈，以便微服务能够利用JSON。其他人可能会选择Java道路，并承担DTO开销。是时候再次考虑Falcor了吗？另一个选择是避免走寻常路，考虑使用Clojure。在[Clojure](http://blog.juxt.pro/posts/why-clojurescript-matters.html)道路上，您可以利用[Prismatics
    Schema](https://github.com/Prismatic/schema)和[compojure-api](https://github.com/metosin/compojure-api)（swagger’d）来声明轻量级数据合同——代码即数据，数据即代码。最终，Clojure仍然运行在著名的两个虚拟机世界（JavaScript和JVM）上，与Node.js作为服务器软件堆栈的论点类似，为开发者提供了从客户端到服务器的连贯体验，而不是要求不同的技能集/团队。
- en: ~ by mdavey on November 3, 2015.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：mdavey，发布日期：2015年11月3日。
- en: Posted in [Languages](https://mdavey.wordpress.com/category/languages/)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 发布在[语言](https://mdavey.wordpress.com/category/languages/)分类下。
