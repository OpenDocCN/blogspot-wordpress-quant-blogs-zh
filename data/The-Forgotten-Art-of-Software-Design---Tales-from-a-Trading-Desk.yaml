- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 06:28:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 06:28:16
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Forgotten Art of Software Design | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The Forgotten Art of Software Design | Tales from a Trading Desk
- en: 来源：[https://mdavey.wordpress.com/2013/04/06/the-forgotten-art-of-software-design/#0001-01-01](https://mdavey.wordpress.com/2013/04/06/the-forgotten-art-of-software-design/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2013/04/06/the-forgotten-art-of-software-design/#0001-01-01](https://mdavey.wordpress.com/2013/04/06/the-forgotten-art-of-software-design/#0001-01-01)
- en: I think Katelyn touches on an important [point](http://katgleason.tumblr.com/post/47257463324/talk-about-the-problem-not-the-solution)
    in “Talk about the problem not the solution”.  I’d also say that a “solution”
    designed before understanding the “problem” also implicitly mean that the solution
    fails on the “smell test” from a general software architecture and design validation. 
    Development has  designed a solution without considering the “problem” and hence
    the business requirements of the “problem” have been missed, which is the grant
    scheme of things means “refactoring”, modification request, and more than likely
    a buggy code base due to the churn.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Katelyn在“谈论问题而非解决方案”中触及了一个重要的点。我还会说，“解决方案”在理解“问题”之前设计，也隐含着该解决方案在一般软件架构和设计验证的“味道测试”上失败。开发已经设计了一个没有考虑“问题”的解决方案，因此忽略了“问题”的业务需求，这意味着“重构”，修改请求，以及很可能是由于混乱而导致的代码库中的bug。
- en: Taking this a step further, from an agile perspective, the agile story may often
    begin to take on a “technical” bias due to the solution before the problem, with
    a lack of acceptance criteria/tests, which continues to lead to a solution development
    want to implement that isn’t actually fully solving the problem. Bad smell!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步来说，从敏捷的角度看，敏捷故事可能因为解决方案先行而变得具有“技术”偏见，缺乏验收标准/测试，这继续导致想要实施的不是完全解决问题的解决方案。糟糕的味道！
- en: 'This problem/solution is partly driven in some quarters through the believe
    that the latest framework/library is the thing that needs to be part of the solution. 
    Which nicely brings me to [Making Software](http://www.amazon.co.uk/Making-Software-Really-Works-Believe/dp/0596808321). 
    So much of development is based on claims that are not verifiable.  Read chapter
    12 on TDD – I’m not saying I’m anti TDD, but just using TDD as an example.  Chapter
    25, “Where do most software flaws come from?” offers the following view:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题/解决方案在某些方面是由于相信最新的框架/库是解决方案中需要的一部分。这使我想到[制作软件](http://www.amazon.co.uk/Making-Software-Really-Works-Believe/dp/0596808321)。开发中有很大一部分是基于无法验证的主张。阅读第12章关于TDD的内容——我不是说我对TDD持反对态度，只是用TDD作为一个例子。第25章“大多数软件缺陷来源于哪里？”提出了以下观点：
- en: Problems with requirements, design, and coding accounted for 34% of the total
    (modification requests) MRs. Requirements account for about 5% of the total MRs
    and, although not extremely numerous, are particularly important because they
    have been found so late in the development process, a period during which they
    are particularly expensive to fix
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 需求、设计和编码问题占总共（修改请求）MRs 的 34%。需求约占总MRs的5%，虽然数量不多，但特别重要，因为它们是在开发过程后期发现的，在这个阶段修复成本特别高。
- en: Which to Katelyn point, that failure to understand the problem, will clearly
    result in future rework of the solution.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Katelyn所指出的，对问题的理解不足，将明确导致未来解决方案的重做。
- en: One of the many issues I believe agile team fail to understand about agile is
    that agile doesn’t stop software architecture and design from happening, it merely
    attempt to avoid the issue of big up-front architecture and design happen at the
    start when there are lots of unknowns.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信敏捷团队对敏捷的许多理解问题是，敏捷并没有阻止软件架构和设计的发生，它只是试图避免在有很多未知数的时候一开始就发生大规模的架构和设计问题。
- en: Which brings me round the circle and back to the start of this posting.  Before
    an agile story goes into development, the story needs to capture the problem clearly,
    and concisely with acceptance criteria/tests, though User Experience (UX) assets,
    the team needs to have architecture/designed a solution to solve the business
    problem, and not a solution looking for a problem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我回到了文章的开头。在敏捷故事进入开发之前，故事需要清楚地、简洁地用验收标准/测试来捕捉问题，通过用户体验（UX）资产，团队需要有架构/设计解决方案来解决业务问题，而不是寻找问题的解决方案。
- en: ~ by mdavey on April 6, 2013.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ~ 由 mdavey 于 2013 年 4 月 6 日发表。
- en: Posted in [Agile](https://mdavey.wordpress.com/category/agile/)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 发布于[敏捷](https://mdavey.wordpress.com/category/agile/)
