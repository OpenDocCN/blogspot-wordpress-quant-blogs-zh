- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: →yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-12 19:29:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-12 19:29:21
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: →
- en: The return of the fat client | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 厚客户端的回归 | Coding the markets
- en: 来源：[https://etrading.wordpress.com/2017/11/03/pricing-monkey-and-openfin-the-return-of-the-fat-client/#0001-01-01](https://etrading.wordpress.com/2017/11/03/pricing-monkey-and-openfin-the-return-of-the-fat-client/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2017/11/03/pricing-monkey-and-openfin-the-return-of-the-fat-client/#0001-01-01](https://etrading.wordpress.com/2017/11/03/pricing-monkey-and-openfin-the-return-of-the-fat-client/#0001-01-01)
- en: The return of the fat client
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 厚客户端的回归
- en: November 3, 2017
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2017年11月3日
- en: Last night I got a demo of a brilliantly innovative IR derivatives system from
    the founder team. It prompted some thoughts on the cyclical nature of the software
    industry, and the return of the fat client. Back in the 90s, when Microsoft still
    ruled the world, client server computing and the fat client were the dominant
    model for application development. Often the server tier was simply a DB,  and
    all app logic happened in a Windows app built in MFC C++ or VB. The rise of Java
    and the browser threatened that model, and met with a forceful response from Microsoft.
    That’s a well-worn story, and I won’t repeat it here. Java never delivered on
    its promise of zero deploy desktop OS agnostic apps; anyone remember [Marimba](https://www.javaworld.com/article/2077287/marimba-software--pushes--information-over-internet.html)?
    Instead the browser began its long march toward becoming the dominant desktop
    client. After the dot com bust it took time for web 2.0 to emerge. For a while
    there was a debate about Silverlight vs Flex vs Ajax. Thankfully Ajax – the only
    one not aligned with a major vendor – won out, despite myriad incompatibilities
    between browsers and unsatisfactory server push mechanisms. Websockets and HTML5
    resolved those issues, setting the scene for thin client zero deploy nirvana.
    Or so it seemed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 昨晚我从一个创始人团队那里得到了一个创新性的IR衍生品系统的演示。这引发了我对软件行业周期性特点的思考，以及厚客户端的回归。回到90年代，当微软仍然统治世界时，客户端服务器计算和厚客户端是应用开发的主导模型。通常，服务器层只是一个数据库，所有的应用逻辑都在用MFC
    C++或VB构建的Windows应用中实现。Java和浏览器的兴起威胁到了这一模型，并遭到了微软的强烈反击。这是一个老生常谈的故事，我这里就不重复了。Java从未实现其零部署、桌面操作系统中立的承诺；谁还记得[Marimba](https://www.javaworld.com/article/2077287/marimba-software--pushes--information-over-internet.html)?相反，浏览器开始了其成为主导桌面客户端的漫长征程。在互联网泡沫破裂后，web
    2.0需要时间才能浮现。有一段时间，人们关于Silverlight与Flex与Ajax之间的争论。幸运的是Ajax——唯一一个没有与主要供应商结盟的——最终胜出，尽管浏览器之间存在无数的不兼容问题和不令人满意的服务器推送机制。WebSocket和HTML5解决了这些问题，为零部署的瘦客户端天堂铺平了道路。或者至少看起来是这样。
- en: Concurrently with these technical developments on the desktop we’ve seen the
    rise of SaaS. The advance of the browser as client enabled ISVs, starting with
    SalesForce, to bypass corporate IT departments and server rooms, and deliver apps
    direct to users, often with UI quality approaching consumer products, and very
    low entry prices. Now there’s no end of CRM, budgeting and financial management,
    project management and industry specific vertical solutions delivered direct from
    cloud hosting to user desktops. Each browser delivered SaaS may be cheap and compelling,
    but they exclude the possibility of integration and data sharing across apps.
    Unless the business users buying those SaaS apps gets their IT department involved
    again to build integrations across the SaaS REST APIs. But that ain’t gonna happen,
    because the users bought into the SaaS apps to free themselves from the dysfunctional
    IT depts in the first place, and because of that the IT depts hate the SaaS apps
    in the same way they hate Excel.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们在桌面上的这些技术发展看到了SaaS的兴起。浏览器的客户端进步使得ISVs（独立软件供应商）得以绕过企业的IT部门和服务器室，直接向用户交付应用，这些应用的界面质量接近于消费产品，且入门价格非常低。现在，从云托管直接到用户桌面的CRM、预算管理、财务管理、项目管理以及特定行业的垂直解决方案层出不穷。每个通过浏览器交付的SaaS可能既便宜又具有吸引力，但它们排除了跨应用集成和数据共享的可能性。除非购买这些SaaS应用的企业用户再次让他们的IT部门参与进来，以在SaaS
    REST API之间构建集成。但这种情况不会发生，因为用户购买SaaS应用就是为了摆脱功能失调的IT部门，正因为如此，IT部门才会像对待Excel一样敌视SaaS应用。
- en: So how does the integration problem get solved? On the desktop of course! We’re
    now seeing the re-emergence of 90s style app to app interop on the desktop. This
    time the enabler is not [Microsoft’s OLE](https://en.wikipedia.org/wiki/Object_Linking_and_Embedding)
    (Object Linking and Embedding), but proprietary extensions to the HTML5 container.
    [OpenFin](https://openfin.co/)’s Chromium based HTML5 container supports drag
    and drop between apps, and also provides a pubsub bus. [DDE](https://msdn.microsoft.com/en-us/library/windows/desktop/ms648774(v=vs.85).aspx)
    anybody? This trend is writ large with the startup’s IRD options pricing solution,
    which addresses the financial sector’s rates options trading niche in a fiendishly
    clever manner. Anyone who’s ever stepped on a trading floor knows about the ubiquity
    of the Bloomberg terminal. Bloomberg’s terminal comes with desktop interop; their
    Excel addin enables live ticking market data in spreadsheets. APIs do the same
    for desktop apps, but license terms mean that data can only be used by apps running
    on the same desktop. That precludes publishing Bloomberg market data to the server
    side pricing systems typical in the bigger hedge funds and banks. So this startup’s
    master stroke is to deliver IRD options pricing in a browser client, as an SaaS,
    and driven by Bloomberg market data. The analytics – the number crunching special
    source – are coded in JavaScript and run in the browser. Truly a browser based
    fat client offering a unique solution enabled by desktop integration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么集成问题是如何得到解决的呢？当然是在桌面上了！我们现在正看到90年代风格的app间在桌面上的交互再次出现。这次推动者不是[微软的OLE](https://en.wikipedia.org/wiki/Object_Linking_and_Embedding)（对象链接与嵌入），而是HTML5容器的专有扩展。有谁记得[DDE](https://msdn.microsoft.com/en-us/library/windows/desktop/ms648774(v=vs.85).aspx)吗？这一趋势在初创公司的IRD期权定价解决方案上表现得尤为明显，该方案以一种极其聪明的方式解决了金融部门
    rates options 交易的利基市场。任何曾经踏交易大厅的人都知道彭博终端的普遍性。彭博终端带有桌面交互功能；他们的Excel插件可以在电子表格中实时显示市场数据。API对桌面应用程序做同样的事情，但由于许可条款，数据只能由在同一桌面运行的应用程序使用。这排除了将彭博市场数据发布到大型对冲基金和银行中常见的服务器端定价系统。因此，这家初创公司的绝招是在浏览器客户端作为SaaS提供IRD期权定价，并由彭博市场数据驱动。分析
    - 数字处理的专用来源 - 是用JavaScript编写的，并在浏览器中运行。真正提供了一个基于浏览器的胖客户端，通过桌面集成提供独特的解决方案。
- en: 'We’re going to see more and more of this kind of SaaS delivered HTML5 fat client
    adding value with smart desktop integrations. Proprietary extensions like those
    in OpenFin, or the startup’s Bloomberg integration, will multiply. Proprietary
    extensions will inevitably clash, and the benefits of zero touch deployment to
    a standardised HTML5 browser client will be dissipated. It’s all yet another instance
    of the endlessly repeating cycle in our industry: standards consolidate, and competition
    differentiates. Standards are introduced to ameliorate the pain of incompatibility,
    then vendors differentiate with proprietary extensions until the level of incompatibility
    becomes too painful and the cycle repeats. Intelligent market participants should
    think hard about where we are in the cycle, and how to get ahead of it. But not
    too far ahead of course!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到越来越多这类通过HTML5胖客户端交付的SaaS，通过智能桌面集成增加价值。像OpenFin中的专有扩展，或者初创公司的彭博集成，将会增多。专有扩展不可避免地会发生冲突，而标准化HTML5浏览器客户端的零触摸部署的好处将会消失。这是我们行业中不断重复出现的另一个实例：标准巩固，竞争区分。标准是为了缓解不兼容的痛苦而引入的，然后供应商通过专有扩展进行区分，直到不兼容的水平变得难以忍受，周期再次重复。明智的市场参与者应该认真思考我们在周期中的位置，以及如何走在前面。当然，但不要走得太远！
