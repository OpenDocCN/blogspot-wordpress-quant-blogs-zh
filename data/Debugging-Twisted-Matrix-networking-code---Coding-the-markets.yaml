- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-12 19:36:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-12 19:36:08'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Debugging Twisted Matrix networking code | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Twisted Matrix 网络代码 | 编码市场
- en: 来源：[https://etrading.wordpress.com/2011/01/24/debugging-twisted-matrix-networking-code/#0001-01-01](https://etrading.wordpress.com/2011/01/24/debugging-twisted-matrix-networking-code/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2011/01/24/debugging-twisted-matrix-networking-code/#0001-01-01](https://etrading.wordpress.com/2011/01/24/debugging-twisted-matrix-networking-code/#0001-01-01)
- en: Debugging Twisted Matrix networking code
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试 Twisted 网络代码
- en: January 24, 2011
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2011年1月24日
- en: 'Debugging Twisted code is an exercise in lateral thinking. The error messages
    and exceptions can be opaque, especially when code wrapped inside a Deferred fails.
    When you get an unhandled error inside a Deferred, check your code for basic errors:
    parameter mismatches, references to undefined variables, or unimported types or
    modules etc. And where you’re deriving from a Twisted base class, check that you’re
    not accidently overriding a member variable. For instance, don’t have a member
    variable called ‘clients’ !'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 调试 Twisted 代码是一种横向思维的练习。错误消息和异常可能会很模糊，特别是当包含在 Deferred 中的代码失败时。当在 Deferred 内部收到未处理的错误时，请检查您的代码是否存在基本错误：参数不匹配、对未定义变量的引用或未导入的类型或模块等等。并且在从
    Twisted 基类派生时，请检查您是否意外地覆盖了成员变量。例如，不要有一个名为 'clients' 的成员变量！
