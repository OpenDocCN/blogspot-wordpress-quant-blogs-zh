- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-18 08:09:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-18 08:09:29'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: European options pricing in C++ with QFCL | Quant Corner
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 QFCL 在 C++ 中定价欧式期权 | 量化角落
- en: 来源：[https://quantcorner.wordpress.com/2012/07/16/european-options-pricing-in-c-with-qfcl/#0001-01-01](https://quantcorner.wordpress.com/2012/07/16/european-options-pricing-in-c-with-qfcl/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://quantcorner.wordpress.com/2012/07/16/european-options-pricing-in-c-with-qfcl/#0001-01-01](https://quantcorner.wordpress.com/2012/07/16/european-options-pricing-in-c-with-qfcl/#0001-01-01)
- en: This time, we implement classes from the [QFCL](http://qfcl.wilmott.com/) project
    allowing to price **European vanilla options**, and to compute the **Greeks**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们从[QFCL](http://qfcl.wilmott.com/)项目实现了一些类，允许定价**欧式期权**，并计算**希腊字母**。
- en: We borrowed both the [core.hpp](http://qfcl.wilmott.com/p/bmlib/source/tree/HEAD/trunk/cpp/bmlib/core.hpp)
    and the [gbm_option_vanilla.hpp](http://qfcl.wilmott.com/p/bmlib/source/tree/HEAD/trunk/cpp/bmlib/gbm_vanilla.hpp)
    files of **QFCL**. These are two header files. Notice that we made some changes
    in the original **gbm_option_vanilla.hpp** file (we corrected some formulae.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们借用了**QFCL**的[core.hpp](http://qfcl.wilmott.com/p/bmlib/source/tree/HEAD/trunk/cpp/bmlib/core.hpp)和[gbm_option_vanilla.hpp](http://qfcl.wilmott.com/p/bmlib/source/tree/HEAD/trunk/cpp/bmlib/gbm_vanilla.hpp)两个文件。这是两个头文件。请注意，我们对原始的**gbm_option_vanilla.hpp**文件进行了一些更改（我们纠正了一些公式）。
- en: Below, is the snippet in C++ of the implementation. This is simple coding, workable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 C++ 实现的片段。这是简单的编码，可行的。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Finally, here is a web link to this project in a zipped folder: [https://docs.google.com/open?id=0B4cGI2MhdkteaE9lTzdnU1U4LUk](https://docs.google.com/open?id=0B4cGI2MhdkteaE9lTzdnU1U4LUk
    "https://docs.google.com/open?id=0B4cGI2MhdkteaE9lTzdnU1U4LUk")
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是一个压缩文件中项目的网页链接：[https://docs.google.com/open?id=0B4cGI2MhdkteaE9lTzdnU1U4LUk](https://docs.google.com/open?id=0B4cGI2MhdkteaE9lTzdnU1U4LUk
    "https://docs.google.com/open?id=0B4cGI2MhdkteaE9lTzdnU1U4LUk")
