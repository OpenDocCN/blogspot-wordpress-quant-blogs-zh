- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '`<!--yml'
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:48:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:48:57
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`-->'
- en: Skill Cloud – Part 3 | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技能云 - 第3部分 | 交易桌上的故事
- en: 来源：[https://mdavey.wordpress.com/2014/06/03/skill-cloud-part-3/#0001-01-01](https://mdavey.wordpress.com/2014/06/03/skill-cloud-part-3/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2014/06/03/skill-cloud-part-3/#0001-01-01](https://mdavey.wordpress.com/2014/06/03/skill-cloud-part-3/#0001-01-01)
- en: Skill Cloud – Part 3
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技能云 - 第3部分
- en: One of the obvious way to store a skill cloud is through a graph database. 
    [Neo4j](http://www.neo4j.org/) or [Titan](http://thinkaurelius.github.io/titan/)
    are two possible choices.  For no reason in particular, I’ll go with Neo4j, and
    use the [embedded](http://docs.neo4j.org/chunked/milestone/tutorials-java-embedded.html)
    version with Java simple for a way to get up and running quickly.  Adding the
    Maven [dependencies](http://docs.neo4j.org/chunked/milestone/tutorials-java-embedded-setup.html)
    into my pom.xml is the easiest way to get started.  The Neo4j [HelloWorld](https://github.com/neo4j/neo4j/blob/2.1.1/community/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java)
    sample is probably the easiest thing to borrow as a skeleton for a quick start.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 存储技能云的一种明显方式是通过图数据库。 [Neo4j](http://www.neo4j.org/) 或 [Titan](http://thinkaurelius.github.io/titan/)
    是两个可能的选择。 出于某种原因，我选择了 Neo4j，并使用 Java 的嵌入式版本来快速入门。 将 Maven [依赖项](http://docs.neo4j.org/chunked/milestone/tutorials-java-embedded-setup.html)添加到我的
    pom.xml 中是开始的最简单方式。 Neo4j 的 [HelloWorld](https://github.com/neo4j/neo4j/blob/2.1.1/community/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java)
    示例可能是作为快速启动的骨架借用的最简单的东西。
- en: '[Modelling](http://docs.neo4j.org/chunked/milestone/data-modeling-examples.html)
    a person, their skills and their team is obvious an important part of this proof
    of concept (PoC).  Skill’s and team members would be modelled as Node’s (obviously),
    with appropriate relationships to capture linkage to a persons skills cloud (node’s)
    coupled with who working with who in a team – team is clearly a node in itself.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 建模一个人、他们的技能和他们的团队是这个概念验证（PoC）的一个重要部分。 技能和团队成员将被建模为节点（显然），适当的关系来捕捉与一个人技能云（节点）的链接，以及团队中谁与谁一起工作
    - 团队本身显然是一个节点。
- en: This nicely leads to “Representing time dependent graphs in Neo4j ” on [GitHub](https://github.com/SocioPatterns/neo4j-dynagraph/wiki/Representing-time-dependent-graphs-in-Neo4j). 
    What’s possibly interesting is that ideally you want a bi-temporal view of the
    nodes and relationships, since people, and teams change over time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好地引导到了 GitHub 上的“在 Neo4j 中表示时间依赖的图”页面。[GitHub](https://github.com/SocioPatterns/neo4j-dynagraph/wiki/Representing-time-dependent-graphs-in-Neo4j)。
    可能有趣的是，理想情况下，您希望有一个双时态的节点和关系的视图，因为随着时间的推移，人和团队都会发生变化。
- en: ~ by mdavey on June 3, 2014.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ~ mdavey 于 2014 年 6 月 3 日。
- en: Posted in [Data](https://mdavey.wordpress.com/category/data/)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 发布在 [数据](https://mdavey.wordpress.com/category/data/) 分类下
