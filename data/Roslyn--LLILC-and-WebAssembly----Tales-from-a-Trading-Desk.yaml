- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 05:41:07'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 05:41:07
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Roslyn, LLILC and WebAssembly? | Tales from a Trading Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Roslyn、LLILC和WebAssembly？| 交易桌上的故事
- en: 来源：[https://mdavey.wordpress.com/2015/06/29/roslyn-llilc-and-webassembly/#0001-01-01](https://mdavey.wordpress.com/2015/06/29/roslyn-llilc-and-webassembly/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2015/06/29/roslyn-llilc-and-webassembly/#0001-01-01](https://mdavey.wordpress.com/2015/06/29/roslyn-llilc-and-webassembly/#0001-01-01)
- en: Given Joe Duffy’s [blog](http://joeduffyblog.com/) is so quite these days, its
    time to speculate.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于Joe Duffy的[博客](http://joeduffyblog.com/)最近非常安静，是时候进行猜测了。
- en: 'The LLILC [announcement](http://www.dotnetfoundation.org/blog/announcing-llilc-llvm-for-dotnet)
    some months ago is interesting – a continued openness from Microsoft.  The main
    difference between Roslyn and LLILC, as provided by LLILC [github](https://github.com/dotnet/llilc/wiki/LLILC-FAQ)
    is:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: LLILC [公告](http://www.dotnetfoundation.org/blog/announcing-llilc-llvm-for-dotnet)几个月前很有趣——微软持续的开放态度。Roslyn和LLILC的主要区别，根据LLILC[github](https://github.com/dotnet/llilc/wiki/LLILC-FAQ)提供的信息是：
- en: 'Roslyn provides frontend support, whilst LLILC (via LLVM) provides backend
    support:'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Roslyn提供前端支持，而LLILC（通过LLVM）提供后端支持：
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Roslyn exposes the data structures of a frontend – so it’s ideal for building
    tools such as IDEs, with syntax coloring, warning squiggles, use/definition lookup,
    refactoring, etc; or translators that convert C# to some other language; or pretty-print
    formatters; or analyzers that check conformance with coding guidelines (think
    FxCop).
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Roslyn暴露了前端的数据结构——所以它非常适合构建诸如IDE之类的工具，具有语法高亮、警告波浪线、用法/定义查找、重构等功能；或者转换C#至其他语言的转换器；或者美化格式化器；或者检查代码指南一致性的分析器（想想FxCop）。
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'LLILC, via LLVM, exposes the data structures of a backend – so it’s ideal for
    building tools that inject extra code (eg: performance profiler, code tracer,
    debugger, parallelism analyzer, race detector); or super-optimizing code (eg:
    auto-vectorizer, auto-parallelizer); or test-case reduction.'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: LLILC通过LLVM暴露了后端的数据结构——所以它非常适合构建注入额外代码的工具（例如：性能分析器、代码跟踪器、调试器、并行性分析器、竞争检测器）；或者超优化代码（例如：自动向量化器、自动并行化器）；或者测试用例减少。
- en: The key in the above is the reference to [LLVM](http://blog.llvm.org/2015/04/llilc-llvm-based-compiler-for-dotnet.html),
    especially if you read “From ASM.JS to [WebAssembly](https://brendaneich.com/2015/06/from-asm-js-to-webassembly/)“,
    and then you read “WebAssembly LLVM [Backend](https://www.phoronix.com/scan.php?page=news_item&px=LLVM-WebAssembly-RFC)
    Being Discussed”.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上述关键在于对[LLVM](http://blog.llvm.org/2015/04/llilc-llvm-based-compiler-for-dotnet.html)的引用，特别是如果你阅读了“从ASM.JS到[WebAssembly](https://brendaneich.com/2015/06/from-asm-js-to-webassembly/)”这篇文章，然后你又阅读了“WebAssembly
    LLVM [后端](https://www.phoronix.com/scan.php?page=news_item&px=LLVM-WebAssembly-RFC)正在讨论中”。
- en: 'Further, Brendan Eich’s recent interview on WebAssembly provides us with this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Brendan Eich关于WebAssembly的最新采访为我们提供了以下内容：
- en: Microsoft has their own compiler so they’ll be doing wasm from a different compiler
    framework, but that’s great.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 微软有自己的编译器，所以他们将会用不同的编译器框架来处理wasm，但这很好。
- en: Given the LLILC work, it would be logically to leverage the LLVM to generate
    wasm
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于LLILC的工作，逻辑上应该利用LLVM来生成wasm
- en: Interesting times.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的时代。
- en: ~ by mdavey on June 29, 2015.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ~ mdavey于2015年6月29日。
- en: Posted in [.NET](https://mdavey.wordpress.com/category/languages/net/), [Languages](https://mdavey.wordpress.com/category/languages/)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 发布在[.NET](https://mdavey.wordpress.com/category/languages/net/)、[语言](https://mdavey.wordpress.com/category/languages/)
