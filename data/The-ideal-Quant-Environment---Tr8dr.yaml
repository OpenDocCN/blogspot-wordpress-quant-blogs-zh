- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-18 15:34:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 15:34:27
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The ideal Quant Environment | Tr8dr
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理想量化环境 | Tr8dr
- en: 来源：[https://tr8dr.wordpress.com/2010/01/27/the-ideal-quant-environment/#0001-01-01](https://tr8dr.wordpress.com/2010/01/27/the-ideal-quant-environment/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tr8dr.wordpress.com/2010/01/27/the-ideal-quant-environment/#0001-01-01](https://tr8dr.wordpress.com/2010/01/27/the-ideal-quant-environment/#0001-01-01)
- en: R is a wonderful tool in that one can prototype and test ideas very quickly.
      If your not using R and doing most of your work in C++ or other low-level language,
    your missing a lot.   The speed of development between a C++ / Java / C# versus
    R is 10-50x.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: R是一个很好的工具，因为可以用它快速地进行原型设计和测试想法。  如果你不用R，而把大部分工作都用到C++或其他低级语言，你会错过很多东西。  C++
    / Java / C#与R之间的发展速度是10-50倍。
- en: R definitely has its warts as a language and environment.  I not a huge fan
    of its matrices, index operators, or lazy expression parsing.   More crippling
    is the fact that R is slow and has memory issues for large data sets.    I would
    estimate that R is 100x slower than java or C++, depending on what you are doing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: R作为一门语言和环境，确实有很多瑕疵。  我对其矩阵、索引运算符或懒表达式解析不太感冒。更糟糕的是，R对大数据集的处理速度慢且内存管理存在问题。  我估计R的速度是java或C++的1/100，具体取决于你在做什么。
- en: My current environment is a combination of R and a number of lower level languages.
      For much of my post-exploration work I feel compelled to write in a lower level
    language due to the performance issues with R.   My preference is to be using
    a functional language, as they are generally very concise and elegant.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前的环境是R和几种低级语言的组合。对于我大部分的后探索工作，我感到有必要用低级语言编写，因为R的性能问题。我的偏好是使用函数式语言，因为它们通常非常简洁优雅。
- en: '**Ideal Environment**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**理想环境**'
- en: 'Here is what an ideal environment for me would be:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我理想环境的描述：
- en: breadth and depth of R
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 广度和深度都类似于R
- en: clean functional language design
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 干净的功能语言设计
- en: concise operations (as close to the math as possible)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简洁的操作（尽可能接近数学）
- en: excellent rendering facilities
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优秀的渲染设施
- en: real-time performance
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实时性能
- en: ability to work with large data-sets (memory efficient)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 能够处理大数据集（内存高效）
- en: concurrency (I do a lot of parallel evaluation)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并发性（我进行很多并行评估）
- en: '**Candidates**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**候选人**'
- en: 'Here are candidate environments that I’ve used or explored:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我使用或探索过的候选环境：
- en: python
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: python
- en: cleaner, generally faster than R, very little in the way of statistics and poor
    integration with R.   No real concurrency as interpreter locked.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更简洁，通常比R快，统计方面几乎没有，与R的集成也很差。真正的并发性因为解释器锁定而不存在。
- en: Ocaml
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ocaml
- en: Beautifully concise language, INRIA implementation does not support concurrency
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言简洁优雅，INRIA实现不支持并发
- en: F# variant of Ocaml
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: F#的Ocaml变体
- en: Solves Ocaml’s problems but bound to MS platform
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决了Ocaml的问题，但受限于MS平台
- en: Scala
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scala
- en: Excellent performance, a bit bleeding-edge, much more complex than Ocaml, but
    on the JVM.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 卓越性能，稍微前沿一些，比Ocaml复杂得多，但在JVM上。
- en: '**The Special Blend**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**特制混合**'
- en: It is impractical to consider reimplementing even a subset of R into another
    language environment.   A hybrid approach makes sense.   With python you have
    **Rpy** and with Java  **JRI**.   Neither of these have first class interaction
    with the language though.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑重新实现R的一个子集到另一个语言环境是不切实际的。混合方法是有意义的。使用python，你有**Rpy**，使用Java有**JRI**。这些都没有与语言的第一类交互。
- en: 'I would like to have the power of a production functional language, but with
    the same development ergonomics and interaction that R has.    It occurred to
    me that I could do the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望拥有生产功能语言的威力，同时拥有R相同的开发人机工程和交互。   我想到可以这样做：
- en: dump function templates of all R functions in one’s environment into a Scala
    module
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把所有R环境中的函数模板dump到一个Scala模块
- en: create implicit conversions from R fundamental types into Scala objects (matrices,
    vectors, data frames, etc)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我Scala对象（矩阵、向量、数据框等）创建隐式转换函数，从R基本类型
- en: create specialized mappings between my Scala-side timeseries and R zoo / ts
    objects
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我Scala侧的时间序列和R动物园/ts对象之间创建专门的映射
- en: create some wrappings for unusual usage patterns such as the ggplot operators
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为不寻常的使用模式（如ggplot运算符）创建一些包装
- en: Scala has an interactive mode where functions, classes, etc. can be created
    on the fly.   Because we’ve dumped proxy function for each R function, we also
    have near first class access to R functions.   There would be some differences
    in that would not be able to replicate the lazy evaluation aspect of some of the
    R functions.   Functions that use expression() would have to be wrapped specially.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Scala有一个交互式模式，其中函数、类等可以即兴创建。由于我们已经为每个R函数放弃了代理函数，我们也可以接近一等公民地访问R函数。存在一些差异，例如无法复制某些R函数的懒评价方面。使用expression()的函数必须特殊包装。
- en: Because scala allows a lot of syntactic magic, the environment would look very
    much like R and have complete access to R, but with the huge upside of the more
    powerful Scala.    One can write code that is “production ready” from the get-go
    and/or do very compute intensive operations otherwise prohibitive in R.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Scala允许大量的语法魔法，环境将看起来非常像R，并拥有对R的完全访问权限，但拥有更强大的Scala的巨大优势。人们可以编写“生产就绪”的代码从一开始，或者执行在R中
    otherwise 禁止的非常计算密集型的操作。
- en: Now I need to find the time to put this together …
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我需要找到时间来整合这一切...
- en: '**Addendum**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**补充**'
- en: I have not decided on which language / environment to base this on.   Scala’s
    main sell is that it is on the JVM.   The other functional language contender
    on the JVM with above-scripting-level performance is Clojure.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有决定基于哪种语言/环境。Scala的主要卖点是它运行在JVM上。JVM上的另一种功能性语言竞争对手，具有超越脚本级别的性能的是Clojure。
- en: Clojure is basically a dialect of Lisp and there is already a project  called
    [Incanter](http://github.com/liebke/incanter#readme) that provides a statistical
    environment within Clojure.    It looks interesting, if early.   Clojure does
    not yet have a performance profile that is close enough to the metal.   I would
    expect to see improvements over time though, but due to Lisp’s lack of static
    typing or type inference, I am doubtful that will see Clojure at the level of
    statically typed languages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Clojure基本上是Lisp的一种方言，并且已经有一个名为[Incanter](http://github.com/liebke/incanter#readme)的项目，在Clojure中提供了一个统计环境。它看起来很有趣，尽管还处于早期阶段。Clojure还没有一个接近硬件的性能配置文件。我预计会随着时间的推移看到改进，但由于Lisp缺乏静态类型或类型推断，我不太相信我们会看到Clojure达到静态类型语言的水平。
- en: Since writing this post and having some conversations, I’ve begun to think that
    F# may be the best choice.   My language preference has been to use Ocaml, but
    the INRIA Ocaml implementation is handicapped.   F# is closely related to Ocaml
    and therefore may be a fit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自从写了这篇文章并与他人交流之后，我开始认为F#可能是最佳选择。我的语言偏好一直是使用Ocaml，但INRIA的Ocaml实现存在缺陷。F#与Ocaml关系密切，因此可能是一个合适的选择。
- en: F# on the MS .NET platform has been shown to be as performant as C#.    From
    benchmarking C# a couple years ago, was clear that the CLR is pretty close to
    the JVM in terms of performance.   Given my cross platform constraints, the question
    has been how viable is F# with Mono from a performance point of view?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: F#在MS .NET平台上的性能已经被证明与C#相当。从几年前对C#的基准测试来看，很明显CLR在性能上与JVM相当接近。考虑到我的跨平台限制，F#与Mono从性能角度来看是否可行一直是个问题？
- en: It seems like the Mono performance  is being addressed.    The mono LLVM experiment
    improved mono benchmarks significantly.   I have not been able to test Mono with
    this extension.   Will have to experiment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎Mono的性能正在得到解决。Mono LLVM实验显著提高了mono基准测试。我没有能够测试带有此扩展的Mono。将进行实验。
- en: To wed this to R would require writing the equivalent of JRI for .NET / R.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这个与R结合，需要编写相当于JRI的.NET/R等效物。
