- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-12 19:30:09'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-12 19:30:09
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: IEX market data, CreateEvent & CPU spikes | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IEX市场数据、CreateEvent与CPU波动|编码市场
- en: 来源：[https://etrading.wordpress.com/2017/02/23/iex-market-data-createevent-cpu-spikes/#0001-01-01](https://etrading.wordpress.com/2017/02/23/iex-market-data-createevent-cpu-spikes/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2017/02/23/iex-market-data-createevent-cpu-spikes/#0001-01-01](https://etrading.wordpress.com/2017/02/23/iex-market-data-createevent-cpu-spikes/#0001-01-01)
- en: IEX market data, CreateEvent & CPU spikes
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IEX市场数据、CreateEvent与CPU波动
- en: February 23, 2017
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2024年5月12日 19:30:09
- en: This week I’ve been testing the [SpreadServe addin](https://github.com/SpreadServe/SSAddin)
    with [Tiingo’s IEX market data](https://api.tiingo.com/docs/iex/realtime). I was
    checking performance on my [sscalc0.online](http://sscalc0.online) [AWS](https://aws.amazon.com/)
    host for a group of [SpreadServeEngines](http://spreadserve.readthedocs.io/en/latest/guide.html)
    executing various test and demo spreadsheets, including one that subscribes to
    [IEX](https://www.iextrading.com/) tickers for AAPL & SPY, via [Tiingo API websockets](https://api.tiingo.com/docs/general/overview).
    That API gives us real time top of book as well as last trade price and size for
    the cash equity traded on IEX. In my test scenario I was running five engines,
    two of them idle, three running spreadsheets, one of which was a simple IEX market
    data subscriber. Using [Process Explorer](https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx)
    I saw some odd CPU spiking on the idle engines. Zooming in with Process Explorer
    I could see the busyness was on a thread that should have been idle, sleeping
    inside a [WaitForSingleObject](https://msdn.microsoft.com/en-us/library/windows/desktop/ms687032(v=vs.85).aspx)
    call, waiting for a signal to check its input queue. The event object waited upon
    was created by some generic code invoking [win32’s CreateEvent](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682396(v=vs.85).aspx)
    and also used in another thread. Reading the docs I found that CreateEvent’s fourth
    param, the event object name, implies that the caller will get a handle to a previously
    created event object if the names match. And I was using a hardwired name! So
    my thread was being repeatedly woken by events from another thread. A quick fix
    to make the names unique produced idling engines with no unnecessary CPU burn.
    All very instructive, partly because running on AWS makes one very aware of paying
    by the CPU hour.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本周，我一直在测试[SpreadServe插件](https://github.com/SpreadServe/SSAddin)与[Tiingo的IEX市场数据](https://api.tiingo.com/docs/iex/realtime)。我在我的[sscalc0.online](http://sscalc0.online)的[AWS](https://aws.amazon.com/)主机上检查了一组[SpreadServeEngines](http://spreadserve.readthedocs.io/en/latest/guide.html)执行各种测试和演示电子表格的表现，包括一个通过[Tiingo
    API websockets](https://api.tiingo.com/docs/general/overview)订阅[IEX](https://www.iextrading.com/)跳动器用于AAPL和SPY的电子表格。该API为我们提供了IEX上现金股票交易的实时最前线以及最后的交易价格和数量。在我的测试场景中，我运行了五个引擎，其中两个闲置，三个运行电子表格，其中一个是一个简单的IEX市场数据订阅者。使用[进程浏览器](https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx)，我发现一些空闲引擎上有奇怪的CPU波动。使用进程浏览器缩小查看，我可以看到忙碌是在一个本应空闲的线程中，在[WaitForSingleObject](https://msdn.microsoft.com/en-us/library/windows/desktop/ms687032(v=vs.85).aspx)调用中休眠，等待一个信号来检查其输入队列。等待的对象事件是由一些通用代码调用的[win32的CreateEvent](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682396(v=vs.85).aspx)创建的，并在另一个线程中使用。阅读文档，我发现CreateEvent的第四个参数，事件对象名称，意味着如果名称匹配，调用者将获得一个先前创建的事件对象的句柄。而我使用的是一个固定的名称！所以我的线程反复被另一个线程的事件唤醒。为使名称唯一，快速修复，产生了没有不必要的CPU烧毁的空闲引擎。这一切都非常富有教益，部分原因是运行在AWS上会让人非常注意按CPU小时付费。
