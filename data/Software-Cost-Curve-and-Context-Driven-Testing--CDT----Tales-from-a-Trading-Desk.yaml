- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: →yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-18 05:35:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-18 05:35:16'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: →
- en: Software Cost Curve and Context-Driven Testing (CDT) | Tales from a Trading
    Desk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件成本曲线与情境驱动测试（CDT）| 交易桌上的故事
- en: 来源：[https://mdavey.wordpress.com/2016/03/16/software-cost-curve/#0001-01-01](https://mdavey.wordpress.com/2016/03/16/software-cost-curve/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mdavey.wordpress.com/2016/03/16/software-cost-curve/#0001-01-01](https://mdavey.wordpress.com/2016/03/16/software-cost-curve/#0001-01-01)
- en: Software Cost Curve and Context-Driven Testing (CDT)
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件成本曲线与情境驱动测试（CDT）
- en: Cost of [defects](http://swreflections.blogspot.co.uk/2013/09/the-real-cost-of-change-in-software.html)
    isn’t something most teams worry about.  Most teams are primarily concerned with
    getting software built, accepting defects will be found in the testing cycle,
    and accepting defects will occur in production.  Unfortunately, this is a naive
    way of thinking about software in the 21st century.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 缺陷成本([defects](http://swreflections.blogspot.co.uk/2013/09/the-real-cost-of-change-in-software.html))是大多数团队不担心的事情。大多数团队主要关心的是构建软件，接受测试周期中会发现的缺陷，以及在生产中会发生缺陷。不幸的是，这是21世纪对软件的一种天真看法。
- en: '[Examining the Agile Cost of Change Curve](http://www.agilemodeling.com/essays/costOfChange.htm)
    offer some thoughts on the subject.  Figure 3 is of particular interest.  Pay
    now or pay later for defects, later will cost more.  Unfortunately, most stake
    holders/product owner wants features, and only features, and don’t understand
    or care about software engineer, and the cost until its often to late 😦'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[考察敏捷变更成本曲线](http://www.agilemodeling.com/essays/costOfChange.htm)对这个话题提供了一些思考。图3特别值得关注。现在支付还是以后支付缺陷成本，以后支付的成本会更高。不幸的是，大多数利益相关者/产品所有者只想要功能，只想要功能，并且不理解或不在乎软件工程师以及成本，直到通常为时已晚
    😦'
- en: Particularly telling on figure 3 is the cost of “Requirement defects found via
    traditional acceptance testing”.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是图3中“通过传统验收测试发现的 Requirements 缺陷”的成本。
- en: Which brings us to the latest fad in software engineering (at least in the testing
    space), Context-Driven Testing ([CDT](http://context-driven-testing.com/)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们想到了软件工程界（至少在测试领域）最新的热潮，即情境驱动测试([CDT](http://context-driven-testing.com/))。
- en: 'Rally has a posting on [CDT](http://www.developsense.com/blog/2016/01/a-context-driven-approach-to-automation-in-testing/)
    and [agile](https://www.rallydev.com/blog/engineering/context-driven-testing-agile-teams)
    teams which offers some interesting data points:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Rally有一篇关于[CDT](http://www.developsense.com/blog/2016/01/a-context-driven-approach-to-automation-in-testing/)和[敏捷](https://www.rallydev.com/blog/engineering/context-driven-testing-agile-teams)团队的帖子，提供了一些有趣的数据点：
- en: “Understanding what we’re testing is the cornerstone of quality for the end
    product.” – can’t disagree with that 🙂
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “理解我们在测试什么是我们产品质量的基石。”——无法反驳这一点:)
- en: '“It’s a tester’s job to ask questions: why, what, where, how, what if, and
    so on. They need to ask questions at every stage but even more before coding starts,
    rather than later in the process” – I think this data point is particularly key.
     I’m always concern of testers who only discuss testing in terms of their CV centric
    viewpoint/ego, ignoring the need to be part of a team, leveraging their testing
    skillset as part of a collaborative process to delivery quality software.  Hence
    “every stage” and “even more before coding starts” resinate well with my view
    of software engineering. 🙂'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “测试人员的职责是提问：为什么、什么、在哪里、如何、如果等等。他们需要在每个阶段提出问题，但尤其在编码开始之前，而不是在过程后期”–我认为这个数据点特别关键。我总是担心那些只从以他们的简历为中心的视角/自尊心讨论测试，忽视了成为团队一员的需求，利用他们的测试技能作为协作过程的一部分，交付高质量的软件。因此，“每个阶段”和“尤其在编码开始之前”与我对软件工程的认识非常契合。:)
- en: “business value” – nothing more needs to be said 🙂
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “业务价值”–无需多言:)
- en: “The purpose is not to find any defect, but the defects that matter” Agreed
    🙂
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “目的不是发现任何缺陷，而是发现重要的缺陷” 同意:)
- en: “As a tester, it’s very easy to get sidetracked with defects in areas of the
    product that may not be as important.” – Unfortunately true, I call this “off-roading”
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一名测试人员，很容易被产品中可能不是那么重要的区域的缺陷所分心。”——不幸的是，这是真的，我称这为“偏离轨道”。
- en: 'Which brings me to [CDT](http://context-driven-testing.com/), and the Seven
    Basic Principles:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我想到了[CDT](http://context-driven-testing.com/)，以及七项基本原则：
- en: “People, working together, are the most important part of any project’s context”
    – 100% agree.  That is why testers like other team members on a project need to
    collaborate as a team to deliver great software.  Get into the discovery discussion
    of a story, and stop accepted code, and thinking the game is to find defects.
     Testing highlights often issues elsewhere in an agile team.  Look for root causes,
    and collaborate to fix the process before code is written and tested.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “人们在一起工作是任何项目背景中最重要的部分”——100%同意。这就是为什么测试人员和其他项目团队成员需要像团队一样协作，以交付伟大的软件。进入故事的发现讨论，停止接受代码，停止认为游戏是发现缺陷。测试通常会在敏捷团队中突出显示其他问题。寻找根本原因，并在代码编写和测试之前协作修复流程。
- en: “Good software testing is a challenging intellectual process.” – this principle
    feels like testers are attempting to validate their intellectual capacity compared
    to developers. This shouldn’t be needed on a team were everyone is of equal value,
    and every is collaboration to delivery a software product that the team is proud
    of within the context of the business.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “良好的软件测试是一个具有挑战性的智力过程。”——这个原则感觉像是测试人员试图验证他们与开发人员的智力能力。在这样一个团队中，每个人都是平等的，每个人都协作交付一个令团队自豪的软件产品，这不应该是有必要的。
- en: We can probably end with the Check != Test [discussions](http://www.satisfice.com/blog/archives/856)
    that have evolved over the last few years.  Thought needs to be given to the concept
    of checking and testing though-out the full lifecycle of a story (agile).  Otherwise
    defects will continue to climb.  Story discovery and elaboration that usually
    generate acceptance criteria discussion needs to also be consider in the context
    of CDT.  CDT can’t just be a silo at the end of the pipeline where tester site
    in the new CDT shiny world.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以大概结束过去几年中发展起来的Check != Test [讨论](http://www.satisfice.com/blog/archives/856)。尽管如此，我们还需要考虑在整个故事生命周期中检查和测试的概念（敏捷）。否则，缺陷将继续上升。通常生成验收标准讨论的故事发现和详细说明也需要在CDT的背景下考虑。CDT不能仅仅是管道末端的孤岛，测试人员坐在新的CDT光鲜世界里。
- en: Final word, a lot of CDT [articles](http://www.satisfice.com/articles/cdt-automation.pdf)
    don’t touch on how CDT (Check != Test) work with kanban or scrum (agile) teams.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，很多CDT [文章](http://www.satisfice.com/articles/cdt-automation.pdf)并没有涉及到CDT（检查≠测试）是如何与看板或Scrum（敏捷）团队一起工作的。
- en: ~ by mdavey on March 16, 2016.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ~ 由 mdavey 于 2016 年 3 月 16 日发表。
- en: Posted in [Agile](https://mdavey.wordpress.com/category/agile/), [Uncategorized](https://mdavey.wordpress.com/category/uncategorized/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 发布在[敏捷](https://mdavey.wordpress.com/category/agile/)、[未分类](https://mdavey.wordpress.com/category/uncategorized/)
