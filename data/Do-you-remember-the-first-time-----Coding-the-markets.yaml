- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-12 19:51:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-12 19:51:08
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Do you remember the first time ? | Coding the markets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你还记得第一次吗？| 编码市场
- en: 来源：[https://etrading.wordpress.com/2006/08/16/do-you-remember-the-first-time-the-joy-of-r/#0001-01-01](https://etrading.wordpress.com/2006/08/16/do-you-remember-the-first-time-the-joy-of-r/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://etrading.wordpress.com/2006/08/16/do-you-remember-the-first-time-the-joy-of-r/#0001-01-01](https://etrading.wordpress.com/2006/08/16/do-you-remember-the-first-time-the-joy-of-r/#0001-01-01)
- en: Do you remember the first time ?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你还记得第一次吗？
- en: August 16, 2006
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2006年8月16日
- en: I started programming as a kid back in the 70s, and I’ve never stopped getting
    a buzz from learning the new paradigm that goes with any genuinely different programming
    environment. But I haven’t picked up a new paradigm since I starting using dynamic
    languages with Python and Smalltalk in 00/01\. Now I’m starting out with R I’m
    experiencing all the excitement that goes with every new glimpse of the possibilities
    of a fresh conceptual toolkit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我从70年代开始学编程，从小就开始了，学了新的编程环境后一直都有兴奋感。但是自从我开始使用Python和Smalltalk等动态语言以来，我就没有掌握过新的编程范式。现在我开始学习R，我正在体验到每一次新的概念工具包可能性的兴奋。
- en: Here’s a timeline of the programming languages I’ve picked up along the way,
    with comment on which ones excited me, and which ones didn’t. Bear in mind this
    is purely about programming languages, and not operating systems or hardware…
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在学习过程中掌握的编程语言的时间线，评论了哪些让我感到兴奋，哪些没有。请注意，这纯粹是关于编程语言，而不是操作系统或硬件...
- en: 'Late 70s: Basic on a Commodore Pet, coding home brew games. You always remember
    the first time !'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 70年代末：在Commodore Pet上的Basic，编写自制游戏。你总是会记得第一次的！
- en: 'Early 80s: Z80 on a ZX81\. My first taste of the power, control and efficiency
    of close to the metal coding.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 80年代初：在ZX81上的Z80。我第一次尝试到了接近金属编码的权力、控制和效率。
- en: 'Mid 80s: early professional coding in Basic, dBaseII and Fortran. Nothing new
    or interesting there.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 80年代中期：在Basic、dBaseII和Fortran中进行早期专业编码。那里没有什么新鲜或有趣的东西。
- en: 'Late 80s: learn to code in C. Data structures and pointers ! They say all programming
    problems can be solved by adding a level of indirection, and all bugs can be fixed
    by removing one ! One has to master indirection to code in assembler, and in C
    I rediscovered something crucial that’s missing in Basic and Fortran. Combine
    that with structs and dynamic memory allocation and you have a big jump forward
    in expressive capability of Basic and Fortran.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 80年代末：学习在C中编写代码。数据结构和指针！他们说所有的编程问题都可以通过增加一层间接性来解决，而所有的错误都可以通过删除一层来修复！人们必须掌握间接性才能在汇编语言中编写代码，在C语言中我重新发现了在Basic和Fortran中缺失的重要内容。将此与结构体和动态内存分配结合起来，您就可以大幅提高Basic和Fortran的表现能力。
- en: 'Early 90s: C++, object orientation and polymorphism. After initial excesses
    with inheritance I discovered the power of interfaces and composition with the
    GoF patterns book. A huge jump forward.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 90年代初：C++，对象导向和多态性。在使用继承后的初期过度之后，我发现了GoF模式书中接口和组合的力量。一个巨大的飞跃。
- en: 'Late 90s: Java. Big standard libraries and portability courtesy of a VM, but
    no improvement in terms of expressiveness, power, control or efficiency over C++.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 90年代末：Java。大型标准库和可移植性，归功于虚拟机，但在表达能力、功能、控制或效率方面没有比C++有所改善。
- en: '2000: Python & Smalltalk. All the power of OO, but much less code. Don’t need
    to write acres of type declarations to get anything done, and containers are built
    in to the language. Radically interactive too, so we get away from tedious compile,
    link, debug cycles.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2000年：Python和Smalltalk。所有面向对象的强大功能，但代码量少得多。不需要写一大堆类型声明就能完成任何事情，并且容器内置到了语言中。交互性也非常强，所以我们摆脱了繁琐的编译、链接、调试循环。
- en: '2001: C#. Yawn.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2001年：C#。无聊。
- en: '2006: R. Array operations. tapply. Built in stats and charting. Wow ! R is
    to Excel as Unix is to Windows…'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2006年：R。数组操作。tapply。内置的统计和图表。哇！R就像Unix对Windows一样...
