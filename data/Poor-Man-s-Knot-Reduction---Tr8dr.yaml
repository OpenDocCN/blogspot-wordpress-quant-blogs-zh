- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-18 15:34:43'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-18 15:34:43
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Poor Man’s Knot Reduction | Tr8dr
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Poor Man’s Knot Reduction | Tr8dr
- en: 来源：[https://tr8dr.wordpress.com/2010/01/18/poor-mans-function-approximator/#0001-01-01](https://tr8dr.wordpress.com/2010/01/18/poor-mans-function-approximator/#0001-01-01)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tr8dr.wordpress.com/2010/01/18/poor-mans-function-approximator/#0001-01-01](https://tr8dr.wordpress.com/2010/01/18/poor-mans-function-approximator/#0001-01-01)
- en: There are many great implementations of **unit-root** tests in packages such
    as R, SAS, etc.  For various reasons I need to implement this in Java.   Probably
    the best known test of this sort is the Augmented Dickey Fuller test.   This is
    most often used in determining whether a process is non-stationary or rejecting
    in favor of stationarity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在R、SAS等包中有许多很好的**单位根**测试实现。出于各种原因，我需要用Java实现这个。最著名的这类测试是 augmented Dickey Fuller
    test。这通常用于确定一个过程是非平稳的还是在支持平稳性方面被拒绝。
- en: Loosely speaking, to say a process is stationary implies that all of its moments
    are largely time invariant.   So for example the mean and variance of a stationary
    process would be (largely) constant across time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 粗略地说，说一个过程是平稳的意味着它的所有矩在很大程度上是时间不变的。例如，平稳过程的均值和方差（很大程度上）在时间上是恒定的。
- en: 'We know that AR(1) processes with AR coefficient α = 1 have unbounded variance
    that grows with time.  This can be seen by evaluating its variance:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道AR(1)过程的AR系数α=1时，其方差是无限的，随时间增长。这可以通过计算其方差来看：
- en: '[![](img/ed8ea26bf42d279039813292d65c6509.png "unbounded")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/unbounded.png)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/ed8ea26bf42d279039813292d65c6509.png "unbounded")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/unbounded.png)'
- en: 'The ADF test therefore tests the hypothesis that a given series expressed as
    a AR(p) process has a coefficient of 1 (ie unit root).   The ADF expands upon
    the original Dickey Fuller test to allow for additional AR lags:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ADF测试测试的是给定系列作为AR(p)过程表达时具有1（即单位根）的系数。ADF在原始Dickey Fuller测试基础上扩展了额外的AR滞后：
- en: '[![](img/fc1cc46d51dc1e7e13533193773b0fda.png "ADF")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/adf.png)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/fc1cc46d51dc1e7e13533193773b0fda.png "ADF")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/adf.png)'
- en: The null hypothesis is that β = 0 (non-stationary process) and alternative hypothesis
    (may be stationary) otherwise.   Note that  β = 0 in this differenced equation
    is equivalent to α = 1 in the non-differenced AR(1) equation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 零假设是β=0（非平稳过程），而备择假设（可能是平稳的）则相反。注意，在这个差分方程中β=0与非差分AR(1)方程中的α=1是等价的。
- en: Samples (i.e. the difference between the observed and null hypothesis value)
    in hypothesis testing often follow a student-t distribution.   In the case of
    the Dickey Fuller test the distribution is not student-t and therefore presents
    a problem.  To calculate the p-value for the ADF hypothesis, one must refer to
    special Dickey-Fuller tables, as there is no known closed form method to calculate
    this (that I am aware of).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在假设测试中，样本（即观察值与零假设值的差异）通常遵循学生t分布。在Dickey Fuller测试的情况下，分布不是学生t分布，因此这是一个问题。为了计算ADF假设的p值，必须查阅特殊的Dickey-Fuller表，因为据我所知，没有已知的封闭形式方法来计算这个。
- en: 'The p-value, we know to be the probability of obtaining a result at least as
    extreme (far away from the hypothesis value) as the one obtained in our sample.
     Basically this involves calculating:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道p值是获取的样本结果至少与我们样本中获得的远离假设值一样极端的概率。这涉及计算：
- en: '[![](img/3a703654ea3765e561499037d999ab59.png "pvalue")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/pvalue.png)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/3a703654ea3765e561499037d999ab59.png "pvalue")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/pvalue.png)'
- en: Then to determine the p-value for the ADF, we need to determine the distribution
    of values around hypothesis β = 0\.  The tables provide precalculated mappings
    between test values and the cumulative probability.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了确定ADF的p值，我们需要确定围绕零假设β=0的值分布。表提供了测试值和累积概率的预计算映射。
- en: '**Problem'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题'
- en: The Dickey-Fuller tables are sparse, particularly at the tails.   For my problem
    I was interested in the relative “stationarity” of many different series.   For
    this, I the needed to calculate the Dickey-Fuller pdf on my own with a Monte-Carlo
    simulation.**
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Dickey-Fuller表很稀疏，特别是在尾部。对于我的问题，我感兴趣的是许多不同序列的相对“平稳性”。为此，我需要用自己的蒙特卡洛模拟计算Dickey-Fuller
    pdf.**
- en: 'Here is one configuration of the pdf for the Dickey-Fuller hypothesis (produced
    from a monte-carlo simulation):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Dickey-Fuller假设的pdf的一个配置（由蒙特卡洛模拟产生）：
- en: '[![](img/cfd5f8bb377792f8db89074b4fb6d51b.png "dist")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/dist.png)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/cfd5f8bb377792f8db89074b4fb6d51b.png "dist")](https://tr8dr.wordpress.com/wp-content/uploads/2010/01/dist.png)'
- en: Of course monte-carlo simulations are not practical on each evaluation of the
    ADF test.   The results from the MC simulation generate a high resolution density
    function as a series of (x,y) points.   I could generate distributions for a number
    of configurations and store a very large 3D table of function values, but is impractical
    and unnecessary.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每次评估ADF测试时都不实用蒙塔卡洛模拟。MC模拟的结果生成了一系列（x,y）点的高分辨率密度函数。我可以为多种配置生成分布，并存储一个非常大的3D函数值表，但这是不切实际的且不必要的。
- en: I started thinking about an approximating function for the distribution.   Aside
    from finding functional form for the distribution through trial and error, a general
    automated approach is to use splines.   A natural spline will fit the function
    and be piecewise continuous.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始思考分布的近似函数。除了通过试错找到分布的功能形式外，一种通用的自动化方法是使用样条。自然样条将适合函数并且是分段连续的。
- en: 'Splines, however, do not reduce the dimensionality of the problem.  A natural
    spline requires the complete set of knot points to reconstitute the function.
      I then started thinking about knot reduction techniques.   With knot reduction
    the idea is: what is the minimum set of knots required to reproduce the target
    function within some (small) error range.   So if my function currently has 2000
    (x,y) points, perhaps I could reduce it to ~10 points?'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，样条并不会降低问题的维度。自然样条需要完整的节点集合来重构函数。然后我开始思考节点减少技术。节点减少的想法是：在某种（小）误差范围内再现目标函数所需的最小节点集合。所以如果我的函数目前有2000（x,y）点，也许我可以将其减少到~10个点？
- en: There have been many papers written on this topic, often involving very complex
    algorithms.   As I wanted to keep this simple, decided to come up with a “poor
    man’s algorithm” for knot reduction.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有很多关于这个主题的论文，通常涉及非常复杂的算法。因为我想保持这个简单，决定提出一个用于节点减少的“穷人算法”。
- en: '**Algorithm'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法**'
- en: The algorithm starts with a spline consisting of the 2 end-points  and gradually
    adding knots at specific positions, iteratively reducing the error between the
    “reduced spline” and the target function.   The new knots are chosen based on
    the maximum distance from the target function.**
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 算法从由2个端点组成的样条开始，逐渐在特定位置添加节点，迭代地减少“简化样条”与目标函数之间的误差。新节点是基于目标函数的最大距离选择的。**
- en: '**The algorithm is not guaranteed to be optimal in that it may have more knot
    points than the smallest possible reproducing set.  However, it is very fast and
    is often close to optimal, depending on the function.   The algorithm is as follows:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法不能保证是最优的，因为它可能有比最小的再现集合更多的节点点。然而，它非常快，并且取决于函数，通常接近最优。算法如下：**'
- en: start with a spline consisting of 2 points (the start and end point)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从2个点（开始和结束点）的样条开始
- en: loop while R^2 < (1 – eps)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环中，当 R^2 < (1 – eps) 时继续循环。
- en: add knot at point with maximum distance from target function
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与目标函数距离最远的点添加节点
- en: compute new spline and R^2 fit metric
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算新的样条和R^2拟合度量
- en: at end of loop, set of knots now matches function within epsilon
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环结束时，节点的集合现在在epsilon范围内与函数匹配
- en: The effectiveness of the approach can be enhanced by using a better basis function
    than the hermite cubic and/or by adjusting tensions in addition to knots.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 采用更好的基函数（比Hermite三次样条）以及调整张力，可以增强这种方法的 effectiveness。
- en: 'Here is an example of the function to epsilon = 1e-8\.  I’ve slowed this down
    to 1 iteration per second so you can see how it works.   In practice this involves
    a few micro-seconds:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个将epsilon = 1e-8的函数示例。我已经将其减速到每秒1次迭代，以便您可以看到它是如何工作的。在实际中，这涉及到几微秒：
- en: '[https://www.youtube.com/embed/bu-tYr4onJc?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent](https://www.youtube.com/embed/bu-tYr4onJc?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/bu-tYr4onJc?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent](https://www.youtube.com/embed/bu-tYr4onJc?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent)'
- en: VIDEO
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: VIDEO
